#include "../scripts/runLocal.C"
#include "../scripts/runProof.C"
#include "../scripts/helperFunc.C"
#include "../scripts/helperJetMETCommon.C"
#include "../scripts/loadLibraries.C"
#include <TFile.h>
#include <TString.h>

void runSimple(TString mode       = "lite",                // local, lite, or cluster
	       TString identifier = "SimpleRun6",               // tag 
	       TString dataset      = "testSLAC.jetmet2012",  // dataset name
	       TString username   = "mswiatlo",                 // username (e.g. swiatlow, fizisist)
	       bool mcweights     = false,                       // use mc weights?
	       bool debug         = false, // debug mode
	       int nWorkers = 4
	       ) 
{ 
    

    ///----------------------------------------------------------------
    /// Load libraries , set the config file, treenam, and cluster info
    ///----------------------------------------------------------------

    cout << "trying to load libraries" << endl; 
    loadLibraries();

    cout << " Libraries loaded " << endl;

    // SetConfig 
    TString configfile("../config/grjetsv11.config");

    bool doCommon = false;
    bool doSMWZ = false;
    if(dataset.Contains("COMMON"))
	doCommon = true;
    if(dataset.Contains("SMWZ"))
	doSMWZ = true;

    
    // Best to leave alone  
    TString pathLite("");
    TString pathCluster("root://atlprf01.slac.stanford.edu:2094//atlas/output/");
    pathCluster.Append(username);
    pathCluster.Append("/");

    // Determine eventbuilder from dataset name
    TString eventbuilder(dataset);
    eventbuilder.Remove(0,eventbuilder.Last('.')+1);

    TString treename;
    if(dataset.Contains("SMWZ"))
      treename = "physics";
    else
      treename = "qcd";
      
    treename = "physics";
 
    ///----------------------------------------------------------------
    /// Filename paths, URLs for PROOF running
    ///----------------------------------------------------------------
    TString url(mode);
    TString path("");
    if(mode.CompareTo("lite")==0) {
        url = "lite://";
        path = pathLite;
    }
    else if(mode.CompareTo("cluster")==0) {
        url = TString(username+"@atlprf01.slac.stanford.edu");
        path = pathCluster;
    }
    
    // Make an options file, edit as needed
    TFile* options = new TFile("options.root","RECREATE");

    ///----------------------------------------------------------------
    /// Overall Configuration
    ///----------------------------------------------------------------
    bool doJetCalibrations= true;
    bool doPRW           = true;
    bool doParentChild   = true;
    bool doTrack         = true;
    bool doLCCluster     = true; 
    bool doEMCluster     = false;
    bool doTruth         = true;
    bool doTruthJets     = true;
    bool doVertex        = true;
    bool doPhotons       = false;
    bool doElectrons     = false;
    bool doMuons         = true;
    bool doJet4          = true;
    bool doLCJets        = true;
    bool doBasic         = true;
    bool doTruthLinks    = false;
    int  counterMax      = -1;

    // set up the actual analyses
    Config* SimpleExample = new Config("SimpleExample",configfile);
    SimpleExample->Set("ANALYSIS","SimpleExample");
    SimpleExample->Set("DEBUG",debug);

    Config* chain = new Config("chain",configfile);
    chain->AddVec("ANALYSIS");
    chain->Add("ANALYSIS",SimpleExample);

    // set up configurations
    chain->Set("DOJETCALIBRATIONS",doJetCalibrations);
    chain->Set("DOJET4"          , doJet4          );
    chain->Set("DOLCJETS"        , doLCJets        );
    chain->Set("COUNTERMAX"      , counterMax      );
    chain->Set("DEBUG"           , debug           );
    chain->Set("MCWEIGHTS"       , mcweights       );
    chain->Set("PILE"            , doPRW           );
    chain->Set("DOBASIC"         , doBasic         );
    chain->Set("DOTRUTHLINKS"    , doTruthLinks    );
    chain->Set("DOPARENTCHILD"   , doParentChild   );
    chain->Set("DOTRACK"         , doTrack         );
    chain->Set("DOLCCLUSTER"     , doLCCluster     );
    chain->Set("DOEMCLUSTER"     , doEMCluster     );
    chain->Set("DOTRUTH"         , doTruth         );
    chain->Set("DOTRUTHJETS"     , doTruthJets     );
    chain->Set("DOVTX"           , doVertex        );
    chain->Set("DOPHOTON"        , doPhotons       );
    chain->Set("DOELECTRONS"     , doElectrons     );
    chain->Set("DOMUONS"         , doMuons         );
    chain->Set("DOCOMMON"        , doCommon        );
    chain->Set("DOSMWZ"          , doSMWZ          );
    chain->Set("JETTYPES"        , "AntiKt10LCTopoTrimmedPtFrac5SmallR30,KtZ3Track");
    chain->Set("BTAGS"           , "KtZ3Track"     ); 
  
 
 
    TString prwTypes = "";

    chain->Set("PRWTYPES", prwTypes);
    chain->Write();


    WriteJetCalibrationObjects(options);
    //WriteGRLObject("data12_8TeV.periodAllYear_HEAD_DQDefects-00-01-00_PHYS_StandardGRL_All_Good.xml");



    //if (chain->Exists("GRL")) WriteGRLObject(chain->String("GRL"));  

    ///----------------------------------------------------------------
    /// ProofAna global Config object
    ///----------------------------------------------------------------
    Config* confProofAna = new Config("ProofAna");
    
    confProofAna->Set("DEBUG"          , false        );  // "false", 0, "0" etc. also works
    confProofAna->Set("SAVETIMERS"     , false        );  // ProofAna timer histos in output file   
    confProofAna->Set("IDENTIFIER"     , identifier   );
    confProofAna->Set("DATASET"        , dataset      );
    confProofAna->Set("OUTPUTPATH"     , path         );
    confProofAna->Set("EVENTBUILDER"   , eventbuilder );
    //if (!doHists) 
      confProofAna->Set("MERGE",true);     // enable dataset mode
   
    cout << "set eventbuilder to " << eventbuilder << endl;
 
    ///----------------------------------------------------------------
    /// Read information used in MC weighting, multi-dataset jobs
    ///----------------------------------------------------------------
    ReadDatasetInfo(dataset  , confProofAna  ); 
    //WriteGroomedPRWO(options , "EF_j240_a4tc_EFFS" );
    confProofAna->Write();
    options->Close();
    delete options;
 
 
    cout << "All setup, ready to go " << endl; 
    int runNevents=10000; 
 

    // Decide to run local or on the cluster
    if(mode.CompareTo("local")==0) runLocal(dataset,treename);
    else{
        runProof(url,dataset,nWorkers,treename);
    }
    gSystem->Unlink("options.root");

}
