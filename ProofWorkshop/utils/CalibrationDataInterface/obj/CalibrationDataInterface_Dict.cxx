#ifdef __llvm__
#pragma GCC diagnostic ignored "-Wunused-private-field"
#endif
#include "CalibrationDataInterface/CalibrationDataVariables.h"
#include "CalibrationDataInterface/CalibrationDataInterfaceBase.h"
#include "CalibrationDataInterface/CalibrationDataInterfaceROOT.h"
#include "CalibrationDataInterface/CalibrationDataContainer.h"
#include "CalibrationDataInterface/CalibrationDataEigenVariations.h"
//
// File generated by /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc5-gcc4.3/bin/rootcint at Mon Jan 12 16:08:20 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIobjdICalibrationDataInterface_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CalibrationDataInterface_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace Analysis {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void Analysis_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("Analysis", 0 /*version*/, "../CalibrationDataInterface/CalibrationDataEigenVariations.h", 16,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &Analysis_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void Analysis_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void AnalysiscLcLCalibrationDataVariables_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void AnalysiscLcLCalibrationDataVariables_Dictionary();
   static void *new_AnalysiscLcLCalibrationDataVariables(void *p = 0);
   static void *newArray_AnalysiscLcLCalibrationDataVariables(Long_t size, void *p);
   static void delete_AnalysiscLcLCalibrationDataVariables(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataVariables(void *p);
   static void destruct_AnalysiscLcLCalibrationDataVariables(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataVariables*)
   {
      ::Analysis::CalibrationDataVariables *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Analysis::CalibrationDataVariables),0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataVariables", "../CalibrationDataInterface/CalibrationDataVariables.h", 22,
                  typeid(::Analysis::CalibrationDataVariables), DefineBehavior(ptr, ptr),
                  0, &AnalysiscLcLCalibrationDataVariables_Dictionary, isa_proxy, 0,
                  sizeof(::Analysis::CalibrationDataVariables) );
      instance.SetNew(&new_AnalysiscLcLCalibrationDataVariables);
      instance.SetNewArray(&newArray_AnalysiscLcLCalibrationDataVariables);
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataVariables);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataVariables);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataVariables);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataVariables*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataVariables*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataVariables*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void AnalysiscLcLCalibrationDataVariables_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataVariables*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void AnalysiscLcLCalibrationDataInterfaceBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AnalysiscLcLCalibrationDataInterfaceBase(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataInterfaceBase(void *p);
   static void destruct_AnalysiscLcLCalibrationDataInterfaceBase(void *p);
   static void streamer_AnalysiscLcLCalibrationDataInterfaceBase(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataInterfaceBase*)
   {
      ::Analysis::CalibrationDataInterfaceBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Analysis::CalibrationDataInterfaceBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataInterfaceBase", ::Analysis::CalibrationDataInterfaceBase::Class_Version(), "../CalibrationDataInterface/CalibrationDataInterfaceBase.h", 43,
                  typeid(::Analysis::CalibrationDataInterfaceBase), DefineBehavior(ptr, ptr),
                  &::Analysis::CalibrationDataInterfaceBase::Dictionary, isa_proxy, 0,
                  sizeof(::Analysis::CalibrationDataInterfaceBase) );
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataInterfaceBase);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataInterfaceBase);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataInterfaceBase);
      instance.SetStreamerFunc(&streamer_AnalysiscLcLCalibrationDataInterfaceBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataInterfaceBase*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataInterfaceBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void AnalysiscLcLCalibrationDataContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AnalysiscLcLCalibrationDataContainer(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataContainer(void *p);
   static void destruct_AnalysiscLcLCalibrationDataContainer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataContainer*)
   {
      ::Analysis::CalibrationDataContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Analysis::CalibrationDataContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataContainer", ::Analysis::CalibrationDataContainer::Class_Version(), "../CalibrationDataInterface/CalibrationDataContainer.h", 38,
                  typeid(::Analysis::CalibrationDataContainer), DefineBehavior(ptr, ptr),
                  &::Analysis::CalibrationDataContainer::Dictionary, isa_proxy, 4,
                  sizeof(::Analysis::CalibrationDataContainer) );
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataContainer);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataContainer);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataContainer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataContainer*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void AnalysiscLcLCalibrationDataEigenVariations_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AnalysiscLcLCalibrationDataEigenVariations(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataEigenVariations(void *p);
   static void destruct_AnalysiscLcLCalibrationDataEigenVariations(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataEigenVariations*)
   {
      ::Analysis::CalibrationDataEigenVariations *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Analysis::CalibrationDataEigenVariations >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataEigenVariations", ::Analysis::CalibrationDataEigenVariations::Class_Version(), "../CalibrationDataInterface/CalibrationDataEigenVariations.h", 19,
                  typeid(::Analysis::CalibrationDataEigenVariations), DefineBehavior(ptr, ptr),
                  &::Analysis::CalibrationDataEigenVariations::Dictionary, isa_proxy, 4,
                  sizeof(::Analysis::CalibrationDataEigenVariations) );
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataEigenVariations);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataEigenVariations);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataEigenVariations);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataEigenVariations*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataEigenVariations*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataEigenVariations*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void AnalysiscLcLCalibrationDataInterfaceROOT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AnalysiscLcLCalibrationDataInterfaceROOT(void *p = 0);
   static void *newArray_AnalysiscLcLCalibrationDataInterfaceROOT(Long_t size, void *p);
   static void delete_AnalysiscLcLCalibrationDataInterfaceROOT(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataInterfaceROOT(void *p);
   static void destruct_AnalysiscLcLCalibrationDataInterfaceROOT(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataInterfaceROOT*)
   {
      ::Analysis::CalibrationDataInterfaceROOT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Analysis::CalibrationDataInterfaceROOT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataInterfaceROOT", ::Analysis::CalibrationDataInterfaceROOT::Class_Version(), "../CalibrationDataInterface/CalibrationDataInterfaceROOT.h", 66,
                  typeid(::Analysis::CalibrationDataInterfaceROOT), DefineBehavior(ptr, ptr),
                  &::Analysis::CalibrationDataInterfaceROOT::Dictionary, isa_proxy, 4,
                  sizeof(::Analysis::CalibrationDataInterfaceROOT) );
      instance.SetNew(&new_AnalysiscLcLCalibrationDataInterfaceROOT);
      instance.SetNewArray(&newArray_AnalysiscLcLCalibrationDataInterfaceROOT);
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataInterfaceROOT);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataInterfaceROOT);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataInterfaceROOT);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataInterfaceROOT*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataInterfaceROOT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void AnalysiscLcLCalibrationDataHistogramContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AnalysiscLcLCalibrationDataHistogramContainer(void *p = 0);
   static void *newArray_AnalysiscLcLCalibrationDataHistogramContainer(Long_t size, void *p);
   static void delete_AnalysiscLcLCalibrationDataHistogramContainer(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataHistogramContainer(void *p);
   static void destruct_AnalysiscLcLCalibrationDataHistogramContainer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataHistogramContainer*)
   {
      ::Analysis::CalibrationDataHistogramContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Analysis::CalibrationDataHistogramContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataHistogramContainer", ::Analysis::CalibrationDataHistogramContainer::Class_Version(), "../CalibrationDataInterface/CalibrationDataContainer.h", 202,
                  typeid(::Analysis::CalibrationDataHistogramContainer), DefineBehavior(ptr, ptr),
                  &::Analysis::CalibrationDataHistogramContainer::Dictionary, isa_proxy, 4,
                  sizeof(::Analysis::CalibrationDataHistogramContainer) );
      instance.SetNew(&new_AnalysiscLcLCalibrationDataHistogramContainer);
      instance.SetNewArray(&newArray_AnalysiscLcLCalibrationDataHistogramContainer);
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataHistogramContainer);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataHistogramContainer);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataHistogramContainer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataHistogramContainer*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataHistogramContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataHistogramContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void AnalysiscLcLCalibrationDataFunctionContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AnalysiscLcLCalibrationDataFunctionContainer(void *p = 0);
   static void *newArray_AnalysiscLcLCalibrationDataFunctionContainer(Long_t size, void *p);
   static void delete_AnalysiscLcLCalibrationDataFunctionContainer(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataFunctionContainer(void *p);
   static void destruct_AnalysiscLcLCalibrationDataFunctionContainer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataFunctionContainer*)
   {
      ::Analysis::CalibrationDataFunctionContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Analysis::CalibrationDataFunctionContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataFunctionContainer", ::Analysis::CalibrationDataFunctionContainer::Class_Version(), "../CalibrationDataInterface/CalibrationDataContainer.h", 239,
                  typeid(::Analysis::CalibrationDataFunctionContainer), DefineBehavior(ptr, ptr),
                  &::Analysis::CalibrationDataFunctionContainer::Dictionary, isa_proxy, 4,
                  sizeof(::Analysis::CalibrationDataFunctionContainer) );
      instance.SetNew(&new_AnalysiscLcLCalibrationDataFunctionContainer);
      instance.SetNewArray(&newArray_AnalysiscLcLCalibrationDataFunctionContainer);
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataFunctionContainer);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataFunctionContainer);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataFunctionContainer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataFunctionContainer*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataFunctionContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataFunctionContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace Analysis {
//______________________________________________________________________________
TClass *CalibrationDataInterfaceBase::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationDataInterfaceBase::Class_Name()
{
   return "Analysis::CalibrationDataInterfaceBase";
}

//______________________________________________________________________________
const char *CalibrationDataInterfaceBase::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationDataInterfaceBase::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationDataInterfaceBase::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationDataInterfaceBase::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Analysis
      namespace Analysis {
//______________________________________________________________________________
TClass *CalibrationDataContainer::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationDataContainer::Class_Name()
{
   return "Analysis::CalibrationDataContainer";
}

//______________________________________________________________________________
const char *CalibrationDataContainer::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationDataContainer::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationDataContainer::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationDataContainer::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataContainer*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Analysis
      namespace Analysis {
//______________________________________________________________________________
TClass *CalibrationDataEigenVariations::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationDataEigenVariations::Class_Name()
{
   return "Analysis::CalibrationDataEigenVariations";
}

//______________________________________________________________________________
const char *CalibrationDataEigenVariations::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataEigenVariations*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationDataEigenVariations::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataEigenVariations*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationDataEigenVariations::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataEigenVariations*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationDataEigenVariations::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataEigenVariations*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Analysis
      namespace Analysis {
//______________________________________________________________________________
TClass *CalibrationDataInterfaceROOT::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationDataInterfaceROOT::Class_Name()
{
   return "Analysis::CalibrationDataInterfaceROOT";
}

//______________________________________________________________________________
const char *CalibrationDataInterfaceROOT::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationDataInterfaceROOT::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationDataInterfaceROOT::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationDataInterfaceROOT::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Analysis
      namespace Analysis {
//______________________________________________________________________________
TClass *CalibrationDataHistogramContainer::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationDataHistogramContainer::Class_Name()
{
   return "Analysis::CalibrationDataHistogramContainer";
}

//______________________________________________________________________________
const char *CalibrationDataHistogramContainer::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataHistogramContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationDataHistogramContainer::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataHistogramContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationDataHistogramContainer::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataHistogramContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationDataHistogramContainer::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataHistogramContainer*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Analysis
      namespace Analysis {
//______________________________________________________________________________
TClass *CalibrationDataFunctionContainer::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationDataFunctionContainer::Class_Name()
{
   return "Analysis::CalibrationDataFunctionContainer";
}

//______________________________________________________________________________
const char *CalibrationDataFunctionContainer::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataFunctionContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationDataFunctionContainer::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataFunctionContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationDataFunctionContainer::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataFunctionContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationDataFunctionContainer::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataFunctionContainer*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Analysis
      namespace Analysis {
//______________________________________________________________________________
void CalibrationDataInterfaceBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class Analysis::CalibrationDataInterfaceBase.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::Analysis::CalibrationDataInterfaceBase thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      {
         map<std::string,std::string> &R__stl =  m_calibrationEffNames;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            string R__t2;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t2 = R__str.Data();}
            typedef string Value_t;
            std::pair<Value_t const, string > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<std::string,std::string> &R__stl =  m_calibrationSFNames;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            string R__t2;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t2 = R__str.Data();}
            typedef string Value_t;
            std::pair<Value_t const, string > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      { TString R__str; R__str.Streamer(R__b); m_taggerName = R__str.Data(); }
      {
         vector<std::string> &R__stl =  m_operatingPoints;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      {
         map<std::string,std::string> &R__stl =  m_calibrationEffNames;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<std::string,std::string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str(((*R__k).first ).c_str());
             R__str.Streamer(R__b);};
            {TString R__str(((*R__k).second).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      {
         map<std::string,std::string> &R__stl =  m_calibrationSFNames;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<std::string,std::string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str(((*R__k).first ).c_str());
             R__str.Streamer(R__b);};
            {TString R__str(((*R__k).second).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      { TString R__str = m_taggerName.c_str(); R__str.Streamer(R__b);}
      {
         vector<std::string> &R__stl =  m_operatingPoints;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<std::string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str((*R__k).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace Analysis
//______________________________________________________________________________
      namespace Analysis {
void CalibrationDataInterfaceBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Analysis::CalibrationDataInterfaceBase.
      TClass *R__cl = ::Analysis::CalibrationDataInterfaceBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_calibrationEffNames", (void*)&m_calibrationEffNames);
      R__insp.InspectMember("map<std::string,std::string>", (void*)&m_calibrationEffNames, "m_calibrationEffNames.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_calibrationSFNames", (void*)&m_calibrationSFNames);
      R__insp.InspectMember("map<std::string,std::string>", (void*)&m_calibrationSFNames, "m_calibrationSFNames.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_taggerName", (void*)&m_taggerName);
      R__insp.InspectMember("string", (void*)&m_taggerName, "m_taggerName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_operatingPoints", (void*)&m_operatingPoints);
      R__insp.InspectMember("vector<std::string>", (void*)&m_operatingPoints, "m_operatingPoints.", false);
      TNamed::ShowMembers(R__insp);
}

} // namespace Analysis
namespace ROOT {
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataInterfaceBase(void *p) {
      delete ((::Analysis::CalibrationDataInterfaceBase*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataInterfaceBase(void *p) {
      delete [] ((::Analysis::CalibrationDataInterfaceBase*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataInterfaceBase(void *p) {
      typedef ::Analysis::CalibrationDataInterfaceBase current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AnalysiscLcLCalibrationDataInterfaceBase(TBuffer &buf, void *obj) {
      ((::Analysis::CalibrationDataInterfaceBase*)obj)->::Analysis::CalibrationDataInterfaceBase::Streamer(buf);
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataInterfaceBase

      namespace Analysis {
//______________________________________________________________________________
void CalibrationDataInterfaceROOT::Streamer(TBuffer &R__b)
{
   // Stream an object of class Analysis::CalibrationDataInterfaceROOT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Analysis::CalibrationDataInterfaceROOT::Class(),this);
   } else {
      R__b.WriteClassBuffer(Analysis::CalibrationDataInterfaceROOT::Class(),this);
   }
}

} // namespace Analysis
//______________________________________________________________________________
      namespace Analysis {
void CalibrationDataInterfaceROOT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Analysis::CalibrationDataInterfaceROOT.
      TClass *R__cl = ::Analysis::CalibrationDataInterfaceROOT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_fileEff", &m_fileEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_fileSF", &m_fileSF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_aliases", (void*)&m_aliases);
      R__insp.InspectMember("map<std::string,std::string>", (void*)&m_aliases, "m_aliases.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_objects", (void*)&m_objects);
      R__insp.InspectMember("vector<CalibrationDataContainer*>", (void*)&m_objects, "m_objects.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_objectIndices", (void*)&m_objectIndices);
      R__insp.InspectMember("map<std::string,unsigned int>", (void*)&m_objectIndices, "m_objectIndices.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_eigenVariationsMap", (void*)&m_eigenVariationsMap);
      R__insp.InspectMember("map<const CalibrationDataContainer*,const CalibrationDataEigenVariations*>", (void*)&m_eigenVariationsMap, "m_eigenVariationsMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_runEigenVectorMethod", &m_runEigenVectorMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_excludeFromCovMatrix", (void*)&m_excludeFromCovMatrix);
      R__insp.InspectMember("vector<std::string>", (void*)&m_excludeFromCovMatrix, "m_excludeFromCovMatrix.", false);
      //This works around a msvc bug and should be harmless on other platforms
      typedef Analysis::CalibrationDataInterfaceBase baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace Analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_AnalysiscLcLCalibrationDataInterfaceROOT(void *p) {
      return  p ? new(p) ::Analysis::CalibrationDataInterfaceROOT : new ::Analysis::CalibrationDataInterfaceROOT;
   }
   static void *newArray_AnalysiscLcLCalibrationDataInterfaceROOT(Long_t nElements, void *p) {
      return p ? new(p) ::Analysis::CalibrationDataInterfaceROOT[nElements] : new ::Analysis::CalibrationDataInterfaceROOT[nElements];
   }
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataInterfaceROOT(void *p) {
      delete ((::Analysis::CalibrationDataInterfaceROOT*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataInterfaceROOT(void *p) {
      delete [] ((::Analysis::CalibrationDataInterfaceROOT*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataInterfaceROOT(void *p) {
      typedef ::Analysis::CalibrationDataInterfaceROOT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataInterfaceROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_AnalysiscLcLCalibrationDataVariables(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Analysis::CalibrationDataVariables : new ::Analysis::CalibrationDataVariables;
   }
   static void *newArray_AnalysiscLcLCalibrationDataVariables(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Analysis::CalibrationDataVariables[nElements] : new ::Analysis::CalibrationDataVariables[nElements];
   }
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataVariables(void *p) {
      delete ((::Analysis::CalibrationDataVariables*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataVariables(void *p) {
      delete [] ((::Analysis::CalibrationDataVariables*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataVariables(void *p) {
      typedef ::Analysis::CalibrationDataVariables current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataVariables

      namespace Analysis {
//______________________________________________________________________________
void CalibrationDataContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class Analysis::CalibrationDataContainer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Analysis::CalibrationDataContainer::Class(),this);
   } else {
      R__b.WriteClassBuffer(Analysis::CalibrationDataContainer::Class(),this);
   }
}

} // namespace Analysis
//______________________________________________________________________________
      namespace Analysis {
void CalibrationDataContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Analysis::CalibrationDataContainer.
      TClass *R__cl = ::Analysis::CalibrationDataContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_lowerBounds", (void*)&m_lowerBounds);
      R__insp.InspectMember("vector<double>", (void*)&m_lowerBounds, "m_lowerBounds.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_upperBounds", (void*)&m_upperBounds);
      R__insp.InspectMember("vector<double>", (void*)&m_upperBounds, "m_upperBounds.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_variables", (void*)&m_variables);
      R__insp.InspectMember("map<std::string,std::vector<unsigned int> >", (void*)&m_variables, "m_variables.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_restrict", &m_restrict);
      TMap::ShowMembers(R__insp);
}

} // namespace Analysis
namespace ROOT {
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataContainer(void *p) {
      delete ((::Analysis::CalibrationDataContainer*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataContainer(void *p) {
      delete [] ((::Analysis::CalibrationDataContainer*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataContainer(void *p) {
      typedef ::Analysis::CalibrationDataContainer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataContainer

      namespace Analysis {
//______________________________________________________________________________
void CalibrationDataHistogramContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class Analysis::CalibrationDataHistogramContainer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Analysis::CalibrationDataHistogramContainer::Class(),this);
   } else {
      R__b.WriteClassBuffer(Analysis::CalibrationDataHistogramContainer::Class(),this);
   }
}

} // namespace Analysis
//______________________________________________________________________________
      namespace Analysis {
void CalibrationDataHistogramContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Analysis::CalibrationDataHistogramContainer.
      TClass *R__cl = ::Analysis::CalibrationDataHistogramContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_uncorrelatedSyst", &m_uncorrelatedSyst);
      R__insp.InspectMember(m_uncorrelatedSyst, "m_uncorrelatedSyst.");
      //This works around a msvc bug and should be harmless on other platforms
      typedef Analysis::CalibrationDataContainer baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace Analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_AnalysiscLcLCalibrationDataHistogramContainer(void *p) {
      return  p ? new(p) ::Analysis::CalibrationDataHistogramContainer : new ::Analysis::CalibrationDataHistogramContainer;
   }
   static void *newArray_AnalysiscLcLCalibrationDataHistogramContainer(Long_t nElements, void *p) {
      return p ? new(p) ::Analysis::CalibrationDataHistogramContainer[nElements] : new ::Analysis::CalibrationDataHistogramContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataHistogramContainer(void *p) {
      delete ((::Analysis::CalibrationDataHistogramContainer*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataHistogramContainer(void *p) {
      delete [] ((::Analysis::CalibrationDataHistogramContainer*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataHistogramContainer(void *p) {
      typedef ::Analysis::CalibrationDataHistogramContainer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataHistogramContainer

      namespace Analysis {
//______________________________________________________________________________
void CalibrationDataFunctionContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class Analysis::CalibrationDataFunctionContainer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Analysis::CalibrationDataFunctionContainer::Class(),this);
   } else {
      R__b.WriteClassBuffer(Analysis::CalibrationDataFunctionContainer::Class(),this);
   }
}

} // namespace Analysis
//______________________________________________________________________________
      namespace Analysis {
void CalibrationDataFunctionContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Analysis::CalibrationDataFunctionContainer.
      TClass *R__cl = ::Analysis::CalibrationDataFunctionContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef Analysis::CalibrationDataContainer baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace Analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_AnalysiscLcLCalibrationDataFunctionContainer(void *p) {
      return  p ? new(p) ::Analysis::CalibrationDataFunctionContainer : new ::Analysis::CalibrationDataFunctionContainer;
   }
   static void *newArray_AnalysiscLcLCalibrationDataFunctionContainer(Long_t nElements, void *p) {
      return p ? new(p) ::Analysis::CalibrationDataFunctionContainer[nElements] : new ::Analysis::CalibrationDataFunctionContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataFunctionContainer(void *p) {
      delete ((::Analysis::CalibrationDataFunctionContainer*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataFunctionContainer(void *p) {
      delete [] ((::Analysis::CalibrationDataFunctionContainer*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataFunctionContainer(void *p) {
      typedef ::Analysis::CalibrationDataFunctionContainer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataFunctionContainer

      namespace Analysis {
//______________________________________________________________________________
void CalibrationDataEigenVariations::Streamer(TBuffer &R__b)
{
   // Stream an object of class Analysis::CalibrationDataEigenVariations.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Analysis::CalibrationDataEigenVariations::Class(),this);
   } else {
      R__b.WriteClassBuffer(Analysis::CalibrationDataEigenVariations::Class(),this);
   }
}

} // namespace Analysis
//______________________________________________________________________________
      namespace Analysis {
void CalibrationDataEigenVariations::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Analysis::CalibrationDataEigenVariations.
      TClass *R__cl = ::Analysis::CalibrationDataEigenVariations::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_cnt", &m_cnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_initialized", &m_initialized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_namedIndices", (void*)&m_namedIndices);
      R__insp.InspectMember("map<std::string,unsigned int>", (void*)&m_namedIndices, "m_namedIndices.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_named", (void*)&m_named);
      R__insp.InspectMember("vector<std::pair<TH1*,TH1*> >", (void*)&m_named, "m_named.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_eigen", (void*)&m_eigen);
      R__insp.InspectMember("vector<std::pair<TH1*,TH1*> >", (void*)&m_eigen, "m_eigen.", false);
}

} // namespace Analysis
namespace ROOT {
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataEigenVariations(void *p) {
      delete ((::Analysis::CalibrationDataEigenVariations*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataEigenVariations(void *p) {
      delete [] ((::Analysis::CalibrationDataEigenVariations*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataEigenVariations(void *p) {
      typedef ::Analysis::CalibrationDataEigenVariations current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataEigenVariations

namespace ROOT {
   void maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR_Dictionary();
   static void *new_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(void *p = 0);
   static void *newArray_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(Long_t size, void *p);
   static void delete_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(void *p);
   static void deleteArray_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(void *p);
   static void destruct_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>*)
   {
      map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>", -2, "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc5-gcc4.3/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>), DefineBehavior(ptr, ptr),
                  0, &maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>) );
      instance.SetNew(&new_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR);
      instance.SetNewArray(&newArray_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR);
      instance.SetDelete(&delete_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR);
      instance.SetDeleteArray(&deleteArray_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR);
      instance.SetDestructor(&destruct_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*> : new map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>;
   }
   static void *newArray_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>[nElements] : new map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(void *p) {
      delete ((map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>*)p);
   }
   static void deleteArray_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(void *p) {
      delete [] ((map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>*)p);
   }
   static void destruct_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgR(void *p) {
      typedef map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>

namespace ROOT {
   void maplEstringcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOstringgR_Dictionary();
   static void *new_maplEstringcOstringgR(void *p = 0);
   static void *newArray_maplEstringcOstringgR(Long_t size, void *p);
   static void delete_maplEstringcOstringgR(void *p);
   static void deleteArray_maplEstringcOstringgR(void *p);
   static void destruct_maplEstringcOstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,string>*)
   {
      map<string,string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,string>", -2, "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc5-gcc4.3/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,string>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOstringgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,string>) );
      instance.SetNew(&new_maplEstringcOstringgR);
      instance.SetNewArray(&newArray_maplEstringcOstringgR);
      instance.SetDelete(&delete_maplEstringcOstringgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOstringgR);
      instance.SetDestructor(&destruct_maplEstringcOstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,string> : new map<string,string>;
   }
   static void *newArray_maplEstringcOstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,string>[nElements] : new map<string,string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOstringgR(void *p) {
      delete ((map<string,string>*)p);
   }
   static void deleteArray_maplEstringcOstringgR(void *p) {
      delete [] ((map<string,string>*)p);
   }
   static void destruct_maplEstringcOstringgR(void *p) {
      typedef map<string,string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,string>

namespace ROOT {
   void maplEstringcOunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOunsignedsPintgR_Dictionary();
   static void *new_maplEstringcOunsignedsPintgR(void *p = 0);
   static void *newArray_maplEstringcOunsignedsPintgR(Long_t size, void *p);
   static void delete_maplEstringcOunsignedsPintgR(void *p);
   static void deleteArray_maplEstringcOunsignedsPintgR(void *p);
   static void destruct_maplEstringcOunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,unsigned int>*)
   {
      map<string,unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,unsigned int>", -2, "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc5-gcc4.3/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,unsigned int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOunsignedsPintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,unsigned int>) );
      instance.SetNew(&new_maplEstringcOunsignedsPintgR);
      instance.SetNewArray(&newArray_maplEstringcOunsignedsPintgR);
      instance.SetDelete(&delete_maplEstringcOunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOunsignedsPintgR);
      instance.SetDestructor(&destruct_maplEstringcOunsignedsPintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned int> : new map<string,unsigned int>;
   }
   static void *newArray_maplEstringcOunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned int>[nElements] : new map<string,unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOunsignedsPintgR(void *p) {
      delete ((map<string,unsigned int>*)p);
   }
   static void deleteArray_maplEstringcOunsignedsPintgR(void *p) {
      delete [] ((map<string,unsigned int>*)p);
   }
   static void destruct_maplEstringcOunsignedsPintgR(void *p) {
      typedef map<string,unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,unsigned int>

namespace ROOT {
   void vectorlEAnalysiscLcLCalibrationDataContainermUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEAnalysiscLcLCalibrationDataContainermUgR_Dictionary();
   static void *new_vectorlEAnalysiscLcLCalibrationDataContainermUgR(void *p = 0);
   static void *newArray_vectorlEAnalysiscLcLCalibrationDataContainermUgR(Long_t size, void *p);
   static void delete_vectorlEAnalysiscLcLCalibrationDataContainermUgR(void *p);
   static void deleteArray_vectorlEAnalysiscLcLCalibrationDataContainermUgR(void *p);
   static void destruct_vectorlEAnalysiscLcLCalibrationDataContainermUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Analysis::CalibrationDataContainer*>*)
   {
      vector<Analysis::CalibrationDataContainer*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Analysis::CalibrationDataContainer*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Analysis::CalibrationDataContainer*>", -2, "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc5-gcc4.3/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<Analysis::CalibrationDataContainer*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEAnalysiscLcLCalibrationDataContainermUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Analysis::CalibrationDataContainer*>) );
      instance.SetNew(&new_vectorlEAnalysiscLcLCalibrationDataContainermUgR);
      instance.SetNewArray(&newArray_vectorlEAnalysiscLcLCalibrationDataContainermUgR);
      instance.SetDelete(&delete_vectorlEAnalysiscLcLCalibrationDataContainermUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEAnalysiscLcLCalibrationDataContainermUgR);
      instance.SetDestructor(&destruct_vectorlEAnalysiscLcLCalibrationDataContainermUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Analysis::CalibrationDataContainer*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Analysis::CalibrationDataContainer*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEAnalysiscLcLCalibrationDataContainermUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Analysis::CalibrationDataContainer*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEAnalysiscLcLCalibrationDataContainermUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Analysis::CalibrationDataContainer*> : new vector<Analysis::CalibrationDataContainer*>;
   }
   static void *newArray_vectorlEAnalysiscLcLCalibrationDataContainermUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Analysis::CalibrationDataContainer*>[nElements] : new vector<Analysis::CalibrationDataContainer*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEAnalysiscLcLCalibrationDataContainermUgR(void *p) {
      delete ((vector<Analysis::CalibrationDataContainer*>*)p);
   }
   static void deleteArray_vectorlEAnalysiscLcLCalibrationDataContainermUgR(void *p) {
      delete [] ((vector<Analysis::CalibrationDataContainer*>*)p);
   }
   static void destruct_vectorlEAnalysiscLcLCalibrationDataContainermUgR(void *p) {
      typedef vector<Analysis::CalibrationDataContainer*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Analysis::CalibrationDataContainer*>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEpairlETH1mUcOTH1mUgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpairlETH1mUcOTH1mUgRsPgR_Dictionary();
   static void *new_vectorlEpairlETH1mUcOTH1mUgRsPgR(void *p = 0);
   static void *newArray_vectorlEpairlETH1mUcOTH1mUgRsPgR(Long_t size, void *p);
   static void delete_vectorlEpairlETH1mUcOTH1mUgRsPgR(void *p);
   static void deleteArray_vectorlEpairlETH1mUcOTH1mUgRsPgR(void *p);
   static void destruct_vectorlEpairlETH1mUcOTH1mUgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pair<TH1*,TH1*> >*)
   {
      vector<pair<TH1*,TH1*> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pair<TH1*,TH1*> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pair<TH1*,TH1*> >", -2, "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc5-gcc4.3/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<pair<TH1*,TH1*> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEpairlETH1mUcOTH1mUgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<pair<TH1*,TH1*> >) );
      instance.SetNew(&new_vectorlEpairlETH1mUcOTH1mUgRsPgR);
      instance.SetNewArray(&newArray_vectorlEpairlETH1mUcOTH1mUgRsPgR);
      instance.SetDelete(&delete_vectorlEpairlETH1mUcOTH1mUgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpairlETH1mUcOTH1mUgRsPgR);
      instance.SetDestructor(&destruct_vectorlEpairlETH1mUcOTH1mUgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pair<TH1*,TH1*> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pair<TH1*,TH1*> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpairlETH1mUcOTH1mUgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pair<TH1*,TH1*> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpairlETH1mUcOTH1mUgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<TH1*,TH1*> > : new vector<pair<TH1*,TH1*> >;
   }
   static void *newArray_vectorlEpairlETH1mUcOTH1mUgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<TH1*,TH1*> >[nElements] : new vector<pair<TH1*,TH1*> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpairlETH1mUcOTH1mUgRsPgR(void *p) {
      delete ((vector<pair<TH1*,TH1*> >*)p);
   }
   static void deleteArray_vectorlEpairlETH1mUcOTH1mUgRsPgR(void *p) {
      delete [] ((vector<pair<TH1*,TH1*> >*)p);
   }
   static void destruct_vectorlEpairlETH1mUcOTH1mUgRsPgR(void *p) {
      typedef vector<pair<TH1*,TH1*> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pair<TH1*,TH1*> >

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc5-gcc4.3/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

/********************************************************
* ../obj/CalibrationDataInterface_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCalibrationDataInterface_Dict();

extern "C" void G__set_cpp_environmentCalibrationDataInterface_Dict() {
  G__cpp_reset_tagtableCalibrationDataInterface_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevCalibrationDataInterface_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Analysis */

/* Analysis::CalibrationDataVariables */
// automatic default constructor
static int G__CalibrationDataInterface_Dict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataVariables *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataVariables[n];
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataVariables[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataVariables;
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataVariables;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CalibrationDataInterface_Dict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Analysis::CalibrationDataVariables* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Analysis::CalibrationDataVariables(*(Analysis::CalibrationDataVariables*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataVariables G__TAnalysiscLcLCalibrationDataVariables;
static int G__CalibrationDataInterface_Dict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataVariables*) (soff+(sizeof(Analysis::CalibrationDataVariables)*i)))->~G__TAnalysiscLcLCalibrationDataVariables();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataVariables*) (soff))->~G__TAnalysiscLcLCalibrationDataVariables();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CalibrationDataInterface_Dict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataVariables* dest = (Analysis::CalibrationDataVariables*) G__getstructoffset();
   *dest = *(Analysis::CalibrationDataVariables*) libp->para[0].ref;
   const Analysis::CalibrationDataVariables& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analysis::CalibrationDataInterfaceBase */
static int G__CalibrationDataInterface_Dict_421_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->EffCalibrationName(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->setEffCalibrationNames(*(map<std::string,std::string>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->SFCalibrationName(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->setSFCalibrationNames(*(map<std::string,std::string>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Analysis::CalibrationDataInterfaceBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Analysis::CalibrationDataInterfaceBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Analysis::CalibrationDataInterfaceBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataInterfaceBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_421_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataInterfaceBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataInterfaceBase G__TAnalysiscLcLCalibrationDataInterfaceBase;
static int G__CalibrationDataInterface_Dict_421_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataInterfaceBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataInterfaceBase*) (soff+(sizeof(Analysis::CalibrationDataInterfaceBase)*i)))->~G__TAnalysiscLcLCalibrationDataInterfaceBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataInterfaceBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataInterfaceBase*) (soff))->~G__TAnalysiscLcLCalibrationDataInterfaceBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CalibrationDataInterface_Dict_421_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataInterfaceBase* dest = (Analysis::CalibrationDataInterfaceBase*) G__getstructoffset();
   *dest = *(Analysis::CalibrationDataInterfaceBase*) libp->para[0].ref;
   const Analysis::CalibrationDataInterfaceBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analysis::CalibrationDataContainer */
static int G__CalibrationDataInterface_Dict_498_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->listUncertainties();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getUncertainties(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(map<std::string,Analysis::UncertaintyResult>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getComment();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getResult(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(double*) G__Doubleref(&libp->para[1])
, (TObject*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getResult(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(double*) G__Doubleref(&libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getStatUncertainty(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getSystUncertainty(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(Analysis::UncertaintyResult*) libp->para[1].ref
, (TObject*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getSystUncertainty(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(Analysis::UncertaintyResult*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getUncertainty(*(string*) libp->para[0].ref, *(Analysis::CalibrationDataVariables*) libp->para[1].ref
, *(Analysis::UncertaintyResult*) libp->para[2].ref, (TObject*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getUncertainty(*(string*) libp->para[0].ref, *(Analysis::CalibrationDataVariables*) libp->para[1].ref
, *(Analysis::UncertaintyResult*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataContainer*) G__getstructoffset())->setResult((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataContainer*) G__getstructoffset())->setComment(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataContainer*) G__getstructoffset())->setUncertainty(*(string*) libp->para[0].ref, (TObject*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataContainer*) G__getstructoffset())->restrictToRange((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->isRangeRestricted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getLowerBound((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getUpperBound((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->checkBounds((TObject*) G__int(libp->para[0]), *(vector<unsigned int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::pair<double,double> >* pobj;
         const vector<std::pair<double,double> > xobj = ((const Analysis::CalibrationDataContainer*) G__getstructoffset())->getBounds();
         pobj = new vector<std::pair<double,double> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<unsigned int>* pobj;
         vector<unsigned int> xobj = Analysis::CalibrationDataContainer::getVariableTypes((TObject*) G__int(libp->para[0]));
         pobj = new vector<unsigned int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Analysis::CalibrationDataContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Analysis::CalibrationDataContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Analysis::CalibrationDataContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_498_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataContainer G__TAnalysiscLcLCalibrationDataContainer;
static int G__CalibrationDataInterface_Dict_498_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataContainer*) (soff+(sizeof(Analysis::CalibrationDataContainer)*i)))->~G__TAnalysiscLcLCalibrationDataContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataContainer*) (soff))->~G__TAnalysiscLcLCalibrationDataContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analysis::CalibrationDataEigenVariations */
static int G__CalibrationDataInterface_Dict_499_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataEigenVariations* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Analysis::CalibrationDataEigenVariations((Analysis::CalibrationDataHistogramContainer*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) Analysis::CalibrationDataEigenVariations((Analysis::CalibrationDataHistogramContainer*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->excludeNamedUncertainty(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->getNumberOfNamedVariations());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->listNamedVariations();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->getNamedVariationIndex(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->getNumberOfEigenVariations());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->getEigenvectorVariation((unsigned int) G__int(libp->para[0]), libp->para[1].ref ? *(TH1**) libp->para[1].ref : *(TH1**) (void*) (&G__Mlong(libp->para[1]))
, libp->para[2].ref ? *(TH1**) libp->para[2].ref : *(TH1**) (void*) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->getNamedVariation(*(string*) libp->para[0].ref, libp->para[1].ref ? *(TH1**) libp->para[1].ref : *(TH1**) (void*) (&G__Mlong(libp->para[1]))
, libp->para[2].ref ? *(TH1**) libp->para[2].ref : *(TH1**) (void*) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->getNamedVariation((unsigned int) G__int(libp->para[0]), libp->para[1].ref ? *(TH1**) libp->para[1].ref : *(TH1**) (void*) (&G__Mlong(libp->para[1]))
, libp->para[2].ref ? *(TH1**) libp->para[2].ref : *(TH1**) (void*) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Analysis::CalibrationDataEigenVariations::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataEigenVariations::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Analysis::CalibrationDataEigenVariations::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Analysis::CalibrationDataEigenVariations::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataEigenVariations*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataEigenVariations::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataEigenVariations::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataEigenVariations::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_499_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataEigenVariations::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CalibrationDataInterface_Dict_499_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Analysis::CalibrationDataEigenVariations* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Analysis::CalibrationDataEigenVariations(*(Analysis::CalibrationDataEigenVariations*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataEigenVariations G__TAnalysiscLcLCalibrationDataEigenVariations;
static int G__CalibrationDataInterface_Dict_499_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataEigenVariations*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataEigenVariations*) (soff+(sizeof(Analysis::CalibrationDataEigenVariations)*i)))->~G__TAnalysiscLcLCalibrationDataEigenVariations();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataEigenVariations*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataEigenVariations*) (soff))->~G__TAnalysiscLcLCalibrationDataEigenVariations();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analysis::CalibrationDataInterfaceROOT */
static int G__CalibrationDataInterface_Dict_501_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataInterfaceROOT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT(
*(string*) libp->para[0].ref, *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT(
*(string*) libp->para[0].ref, *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT(*(string*) libp->para[0].ref, *((string*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT(*(string*) libp->para[0].ref, *((string*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT(*(string*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataInterfaceROOT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT[n];
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT;
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiencyScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiencyScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->listScaleFactorUncertainties(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (bool) G__int(libp->para[3]));
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->listScaleFactorUncertainties(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getNumVariations(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->retrieveCalibrationIndex(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (bool) G__int(libp->para[3])
, *(unsigned int*) G__UIntref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (Analysis::Uncertainty) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (Analysis::Uncertainty) G__int(libp->para[2]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (Analysis::Uncertainty) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiencyScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (Analysis::Uncertainty) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiencyScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (Analysis::Uncertainty) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (Analysis::Uncertainty) G__int(libp->para[2]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])
, (Analysis::Uncertainty) G__int(libp->para[2]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, (unsigned int) G__int(libp->para[1]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->listScaleFactorUncertainties((unsigned int) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->listScaleFactorUncertainties((unsigned int) G__int(libp->para[0]));
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getNumVariations((unsigned int) G__int(libp->para[0]), (Analysis::Uncertainty) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getBinnedScaleFactors(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getShiftedScaleFactors(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, *(string*) libp->para[3].ref
, (double) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const TMatrixDSym* pobj;
         const TMatrixDSym xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getScaleFactorCovarianceMatrix(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, *(string*) libp->para[3].ref);
         pobj = new TMatrixDSym(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const TMatrixDSym* pobj;
         const TMatrixDSym xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getScaleFactorCovarianceMatrix(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new TMatrixDSym(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->initialize(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Analysis::Uncertainty) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Analysis::CalibrationDataInterfaceROOT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceROOT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Analysis::CalibrationDataInterfaceROOT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Analysis::CalibrationDataInterfaceROOT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceROOT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataInterfaceROOT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceROOT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_501_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataInterfaceROOT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CalibrationDataInterface_Dict_501_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Analysis::CalibrationDataInterfaceROOT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Analysis::CalibrationDataInterfaceROOT(*(Analysis::CalibrationDataInterfaceROOT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataInterfaceROOT G__TAnalysiscLcLCalibrationDataInterfaceROOT;
static int G__CalibrationDataInterface_Dict_501_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataInterfaceROOT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataInterfaceROOT*) (soff+(sizeof(Analysis::CalibrationDataInterfaceROOT)*i)))->~G__TAnalysiscLcLCalibrationDataInterfaceROOT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataInterfaceROOT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataInterfaceROOT*) (soff))->~G__TAnalysiscLcLCalibrationDataInterfaceROOT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CalibrationDataInterface_Dict_501_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataInterfaceROOT* dest = (Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset();
   *dest = *(Analysis::CalibrationDataInterfaceROOT*) libp->para[0].ref;
   const Analysis::CalibrationDataInterfaceROOT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analysis::CalibrationDataHistogramContainer */
static int G__CalibrationDataInterface_Dict_557_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataHistogramContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataHistogramContainer((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataHistogramContainer((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Analysis::CalibrationDataHistogramContainer[n];
       } else {
         p = new((void*) gvp) Analysis::CalibrationDataHistogramContainer[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Analysis::CalibrationDataHistogramContainer;
       } else {
         p = new((void*) gvp) Analysis::CalibrationDataHistogramContainer;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Analysis::CalibrationDataHistogramContainer*) G__getstructoffset())->isBinCorrelated(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataHistogramContainer*) G__getstructoffset())->setUncorrelated(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Analysis::CalibrationDataHistogramContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataHistogramContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Analysis::CalibrationDataHistogramContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Analysis::CalibrationDataHistogramContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataHistogramContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataHistogramContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataHistogramContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataHistogramContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_557_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataHistogramContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataHistogramContainer G__TAnalysiscLcLCalibrationDataHistogramContainer;
static int G__CalibrationDataInterface_Dict_557_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataHistogramContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataHistogramContainer*) (soff+(sizeof(Analysis::CalibrationDataHistogramContainer)*i)))->~G__TAnalysiscLcLCalibrationDataHistogramContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataHistogramContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataHistogramContainer*) (soff))->~G__TAnalysiscLcLCalibrationDataHistogramContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analysis::CalibrationDataFunctionContainer */
static int G__CalibrationDataInterface_Dict_558_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataFunctionContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataFunctionContainer((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataFunctionContainer((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Analysis::CalibrationDataFunctionContainer[n];
       } else {
         p = new((void*) gvp) Analysis::CalibrationDataFunctionContainer[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Analysis::CalibrationDataFunctionContainer;
       } else {
         p = new((void*) gvp) Analysis::CalibrationDataFunctionContainer;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataFunctionContainer*) G__getstructoffset())->setLowerBound((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataFunctionContainer*) G__getstructoffset())->setUpperBound((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Analysis::CalibrationDataFunctionContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataFunctionContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Analysis::CalibrationDataFunctionContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Analysis::CalibrationDataFunctionContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataFunctionContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataFunctionContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataFunctionContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataFunctionContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_558_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataFunctionContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataFunctionContainer G__TAnalysiscLcLCalibrationDataFunctionContainer;
static int G__CalibrationDataInterface_Dict_558_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataFunctionContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataFunctionContainer*) (soff+(sizeof(Analysis::CalibrationDataFunctionContainer)*i)))->~G__TAnalysiscLcLCalibrationDataFunctionContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataFunctionContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataFunctionContainer*) (soff))->~G__TAnalysiscLcLCalibrationDataFunctionContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Analysis */

/* Analysis::CalibrationDataVariables */

/* Analysis::CalibrationDataInterfaceBase */

/* Analysis::CalibrationDataContainer */

/* Analysis::CalibrationDataEigenVariations */

/* Analysis::CalibrationDataInterfaceROOT */

/* Analysis::CalibrationDataHistogramContainer */

/* Analysis::CalibrationDataFunctionContainer */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCalibrationDataInterface_Dict {
 public:
  G__Sizep2memfuncCalibrationDataInterface_Dict(): p(&G__Sizep2memfuncCalibrationDataInterface_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCalibrationDataInterface_Dict::*p)();
};

size_t G__get_sizep2memfuncCalibrationDataInterface_Dict()
{
  G__Sizep2memfuncCalibrationDataInterface_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCalibrationDataInterface_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase))) {
     Analysis::CalibrationDataInterfaceBase *G__Lderived;
     G__Lderived=(Analysis::CalibrationDataInterfaceBase*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer))) {
     Analysis::CalibrationDataContainer *G__Lderived;
     G__Lderived=(Analysis::CalibrationDataContainer*)0x1000;
     {
       TMap *G__Lpbase=(TMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMap),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT))) {
     Analysis::CalibrationDataInterfaceROOT *G__Lderived;
     G__Lderived=(Analysis::CalibrationDataInterfaceROOT*)0x1000;
     {
       Analysis::CalibrationDataInterfaceBase *G__Lpbase=(Analysis::CalibrationDataInterfaceBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMap))) {
     TMap *G__Lderived;
     G__Lderived=(TMap*)0x1000;
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMap),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMap),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer))) {
     Analysis::CalibrationDataHistogramContainer *G__Lderived;
     G__Lderived=(Analysis::CalibrationDataHistogramContainer*)0x1000;
     {
       Analysis::CalibrationDataContainer *G__Lpbase=(Analysis::CalibrationDataContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TMap *G__Lpbase=(TMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMap),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer))) {
     Analysis::CalibrationDataFunctionContainer *G__Lderived;
     G__Lderived=(Analysis::CalibrationDataFunctionContainer*)0x1000;
     {
       Analysis::CalibrationDataContainer *G__Lpbase=(Analysis::CalibrationDataContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TMap *G__Lpbase=(TMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMap),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCalibrationDataInterface_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("CalibResult",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_Analysis));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixDSym",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<CalibrationDataContainer*>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Analysis::CalibrationDataContainer*>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,unsigned int>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int,less<string> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const CalibrationDataContainer*,const CalibrationDataEigenVariations*>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUcOlesslEconstsPAnalysiscLcLCalibrationDataContainermUgRcOallocatorlEpairlEconstsPAnalysiscLcLCalibrationDataContainermUsPconstcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUcOlesslEconstsPAnalysiscLcLCalibrationDataContainermUgRcOallocatorlEpairlEconstsPAnalysiscLcLCalibrationDataContainermUsPconstcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*,less<const Analysis::CalibrationDataContainer*> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUcOlesslEconstsPAnalysiscLcLCalibrationDataContainermUgRcOallocatorlEpairlEconstsPAnalysiscLcLCalibrationDataContainermUsPconstcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("UncertaintyResult",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_Analysis));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,Analysis::UncertaintyResult>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOpairlEdoublecOdoublegRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Analysis::UncertaintyResult>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOpairlEdoublecOdoublegRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,pair<double,double> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOpairlEdoublecOdoublegRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,pair<double,double>,less<string> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOpairlEdoublecOdoublegRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<double,double> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<unsigned int> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<unsigned int> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<unsigned int,allocator<unsigned int> > >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<unsigned int,allocator<unsigned int> >,less<string> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<TH1*,TH1*> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<TH1*,TH1*> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<TH1*,TH1*> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Analysis */
static void G__setup_memvarAnalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_Analysis));
   {
   G__memvar_setup((void*)(&Analysis::CalibZERO),100,0,1,-1,-1,-1,1,"CalibZERO=",0,(char*)NULL);
   G__memvar_setup((void*)(&Analysis::dummyValue),100,0,1,-1,-1,-1,1,"dummyValue=",0,(char*)NULL);
   G__memvar_setup((void*)(&Analysis::dummyResult),117,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR),G__defined_typename("CalibResult"),-1,1,"dummyResult=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(4096).Format("None=%lldLL",(long long)Analysis::None).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(4096).Format("Total=%lldLL",(long long)Analysis::Total).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(4096).Format("Statistical=%lldLL",(long long)Analysis::Statistical).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(4096).Format("Systematic=%lldLL",(long long)Analysis::Systematic).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(4096).Format("SFEigen=%lldLL",(long long)Analysis::SFEigen).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(4096).Format("SFNamed=%lldLL",(long long)Analysis::SFNamed).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataVariables */
static void G__setup_memvarAnalysiscLcLCalibrationDataVariables(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables));
   { Analysis::CalibrationDataVariables *p; p=(Analysis::CalibrationDataVariables*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->jetAuthor)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string),-1,-1,1,"jetAuthor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetPt)-(long)(p)),100,0,0,-1,-1,-1,1,"jetPt=",0,"in MeV");
   G__memvar_setup((void*)((long)(&p->jetEta)-(long)(p)),100,0,0,-1,-1,-1,1,"jetEta=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataInterfaceBase */
static void G__setup_memvarAnalysiscLcLCalibrationDataInterfaceBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase));
   { Analysis::CalibrationDataInterfaceBase *p; p=(Analysis::CalibrationDataInterfaceBase*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType),-1,-2,1,G__FastAllocString(4096).Format("kEta=%lldLL",(long long)Analysis::CalibrationDataInterfaceBase::kEta).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType),-1,-2,1,G__FastAllocString(4096).Format("kAbsEta=%lldLL",(long long)Analysis::CalibrationDataInterfaceBase::kAbsEta).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType),-1,-2,1,G__FastAllocString(4096).Format("kPt=%lldLL",(long long)Analysis::CalibrationDataInterfaceBase::kPt).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("map<std::string,std::string>"),-1,4,"m_calibrationEffNames=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("map<std::string,std::string>"),-1,4,"m_calibrationSFNames=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string),-1,-1,2,"m_taggerName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,2,"m_operatingPoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataContainer */
static void G__setup_memvarAnalysiscLcLCalibrationDataContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer));
   { Analysis::CalibrationDataContainer *p; p=(Analysis::CalibrationDataContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationParametrization),-1,-2,1,G__FastAllocString(4096).Format("kPt=%lldLL",(long long)Analysis::CalibrationDataContainer::kPt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationParametrization),-1,-2,1,G__FastAllocString(4096).Format("kEta=%lldLL",(long long)Analysis::CalibrationDataContainer::kEta).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationParametrization),-1,-2,1,G__FastAllocString(4096).Format("kAbsEta=%lldLL",(long long)Analysis::CalibrationDataContainer::kAbsEta).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus),-1,-2,1,G__FastAllocString(4096).Format("kSuccess=%lldLL",(long long)Analysis::CalibrationDataContainer::kSuccess).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus),-1,-2,1,G__FastAllocString(4096).Format("kRange=%lldLL",(long long)Analysis::CalibrationDataContainer::kRange).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus),-1,-2,1,G__FastAllocString(4096).Format("kError=%lldLL",(long long)Analysis::CalibrationDataContainer::kError).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,2,"m_lowerBounds=",0,"lower validity bounds");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,2,"m_upperBounds=",0,"upper validity bounds");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<unsigned int> >"),-1,4,"m_variables=",0,"! persistency not needed for this variable");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"m_restrict=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataEigenVariations */
static void G__setup_memvarAnalysiscLcLCalibrationDataEigenVariations(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations));
   { Analysis::CalibrationDataEigenVariations *p; p=(Analysis::CalibrationDataEigenVariations*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer),-1,-1,4,"m_cnt=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"m_initialized=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),G__defined_typename("map<std::string,unsigned int>"),-1,4,"m_namedIndices=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR),G__defined_typename("vector<std::pair<TH1*,TH1*> >"),-1,4,"m_named=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR),G__defined_typename("vector<std::pair<TH1*,TH1*> >"),-1,4,"m_eigen=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataInterfaceROOT */
static void G__setup_memvarAnalysiscLcLCalibrationDataInterfaceROOT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   { Analysis::CalibrationDataInterfaceROOT *p; p=(Analysis::CalibrationDataInterfaceROOT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TFile),-1,-1,4,"m_fileEff=",0,"! Do not attempt to persistify (PROOF)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TFile),-1,-1,4,"m_fileSF=",0,"! Do not attempt to persistify (PROOF)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("map<std::string,std::string>"),-1,4,"m_aliases=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgR),G__defined_typename("vector<CalibrationDataContainer*>"),-1,4,"m_objects=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),G__defined_typename("map<std::string,unsigned int>"),-1,4,"m_objectIndices=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUcOlesslEconstsPAnalysiscLcLCalibrationDataContainermUgRcOallocatorlEpairlEconstsPAnalysiscLcLCalibrationDataContainermUsPconstcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgRsPgRsPgR),G__defined_typename("map<const CalibrationDataContainer*,const CalibrationDataEigenVariations*>"),-1,4,"m_eigenVariationsMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"m_runEigenVectorMethod=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"m_excludeFromCovMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataHistogramContainer */
static void G__setup_memvarAnalysiscLcLCalibrationDataHistogramContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer));
   { Analysis::CalibrationDataHistogramContainer *p; p=(Analysis::CalibrationDataHistogramContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_THashList),-1,-1,4,"m_uncorrelatedSyst=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataFunctionContainer */
static void G__setup_memvarAnalysiscLcLCalibrationDataFunctionContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer));
   { Analysis::CalibrationDataFunctionContainer *p; p=(Analysis::CalibrationDataFunctionContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCalibrationDataInterface_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncAnalysis(void) {
   /* Analysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_Analysis));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataVariables(void) {
   /* Analysis::CalibrationDataVariables */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables));
   // automatic default constructor
   G__memfunc_setup("CalibrationDataVariables", 2427, G__CalibrationDataInterface_Dict_169_0_1, (int) ('i'), G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CalibrationDataVariables", 2427, G__CalibrationDataInterface_Dict_169_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables), -1, 0, 1, 1, 1, 0, "u 'Analysis::CalibrationDataVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataVariables", 2553, G__CalibrationDataInterface_Dict_169_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CalibrationDataInterface_Dict_169_0_4, (int) ('u'), G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables), -1, 1, 1, 1, 1, 0, "u 'Analysis::CalibrationDataVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataInterfaceBase(void) {
   /* Analysis::CalibrationDataInterfaceBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase));
   G__memfunc_setup("EffCalibrationName",1786,G__CalibrationDataInterface_Dict_421_0_2, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 1, 1, 1, 1, 9, "u 'string' - 11 - flavour", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEffCalibrationNames",2233,G__CalibrationDataInterface_Dict_421_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >' 'map<std::string,std::string>' 11 - names", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SFCalibrationName",1666,G__CalibrationDataInterface_Dict_421_0_4, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 1, 1, 1, 1, 9, "u 'string' - 11 - flavour", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSFCalibrationNames",2113,G__CalibrationDataInterface_Dict_421_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >' 'map<std::string,std::string>' 11 - names", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBasename",1116,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 0, 4, 1, 2, 8, 
"u 'string' - 11 - OP u 'string' - 11 - flavour "
"u 'string' - 11 '\"\"' extra g - - 0 'true' SF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("combinedUncertainty",2007,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 2, 1, 2, 8, 
"d - - 0 - stat u 'pair<double,double>' - 11 - syst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibrationDataInterface_Dict_421_0_8, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Analysis::CalibrationDataInterfaceBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibrationDataInterface_Dict_421_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibrationDataInterface_Dict_421_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Analysis::CalibrationDataInterfaceBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibrationDataInterface_Dict_421_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Analysis::CalibrationDataInterfaceBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibrationDataInterface_Dict_421_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibrationDataInterface_Dict_421_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibrationDataInterface_Dict_421_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataInterfaceBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibrationDataInterface_Dict_421_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibrationDataInterface_Dict_421_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataInterfaceBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataInterfaceBase", 2924, G__CalibrationDataInterface_Dict_421_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 3);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CalibrationDataInterface_Dict_421_0_21, (int) ('u'), G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase), -1, 1, 1, 1, 1, 0, "u 'Analysis::CalibrationDataInterfaceBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataContainer(void) {
   /* Analysis::CalibrationDataContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer));
   G__memfunc_setup("listUncertainties",1818,G__CalibrationDataInterface_Dict_498_0_2, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUncertainties",1694,G__CalibrationDataInterface_Dict_498_0_3, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 2, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - x u 'map<string,pair<double,double>,less<string>,allocator<pair<const string,pair<double,double> > > >' 'map<std::string,Analysis::UncertaintyResult>' 1 - all", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getComment",1043,G__CalibrationDataInterface_Dict_498_0_4, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResult",959,G__CalibrationDataInterface_Dict_498_0_5, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 3, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - x d - - 1 - result "
"U 'TObject' - 0 '0' obj", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getStatUncertainty",1906,G__CalibrationDataInterface_Dict_498_0_6, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 2, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - x d - - 1 - result", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getSystUncertainty",1929,G__CalibrationDataInterface_Dict_498_0_7, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 3, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - x u 'pair<double,double>' 'Analysis::UncertaintyResult' 1 - result "
"U 'TObject' - 0 '0' obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUncertainty",1494,G__CalibrationDataInterface_Dict_498_0_8, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 4, 1, 1, 8, 
"u 'string' - 11 - unc u 'Analysis::CalibrationDataVariables' - 11 - x "
"u 'pair<double,double>' 'Analysis::UncertaintyResult' 1 - result U 'TObject' - 0 '0' obj", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setResult",971,G__CalibrationDataInterface_Dict_498_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setComment",1055,G__CalibrationDataInterface_Dict_498_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUncertainty",1506,G__CalibrationDataInterface_Dict_498_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - unc U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("restrictToRange",1568,G__CalibrationDataInterface_Dict_498_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - restrict", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isRangeRestricted",1762,G__CalibrationDataInterface_Dict_498_0_13, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLowerBound",1345,G__CalibrationDataInterface_Dict_498_0_14, 100, -1, -1, 0, 1, 1, 1, 8, "h - - 0 - vartype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUpperBound",1348,G__CalibrationDataInterface_Dict_498_0_15, 100, -1, -1, 0, 1, 1, 1, 8, "h - - 0 - vartype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkBounds",1129,G__CalibrationDataInterface_Dict_498_0_16, 121, -1, -1, 0, 2, 1, 1, 8, 
"U 'TObject' - 10 - obj u 'vector<unsigned int,allocator<unsigned int> >' 'vector<unsigned int>' 11 - types", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getBounds",939,G__CalibrationDataInterface_Dict_498_0_17, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR), G__defined_typename("vector<std::pair<double,double> >"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVariableTypes",1659,G__CalibrationDataInterface_Dict_498_0_18, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR), G__defined_typename("vector<unsigned int>"), 0, 1, 3, 1, 0, "U 'TObject' - 10 - obj", (char*)NULL, (void*) G__func2void( (vector<unsigned int> (*)(const TObject*))(&Analysis::CalibrationDataContainer::getVariableTypes) ), 0);
   G__memfunc_setup("computeVariables",1686,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 8, 
"u 'string' - 11 - unc u 'Analysis::CalibrationDataVariables' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeVariableTypes",2104,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibrationDataInterface_Dict_498_0_21, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Analysis::CalibrationDataContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibrationDataInterface_Dict_498_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibrationDataInterface_Dict_498_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Analysis::CalibrationDataContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibrationDataInterface_Dict_498_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Analysis::CalibrationDataContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibrationDataInterface_Dict_498_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibrationDataInterface_Dict_498_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibrationDataInterface_Dict_498_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibrationDataInterface_Dict_498_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibrationDataInterface_Dict_498_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataContainer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataContainer", 2563, G__CalibrationDataInterface_Dict_498_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataEigenVariations(void) {
   /* Analysis::CalibrationDataEigenVariations */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations));
   G__memfunc_setup("CalibrationDataEigenVariations",3050,G__CalibrationDataInterface_Dict_499_0_1, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations), -1, 0, 1, 1, 1, 0, "U 'Analysis::CalibrationDataHistogramContainer' - 10 - cnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("excludeNamedUncertainty",2405,G__CalibrationDataInterface_Dict_499_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialize",1074,G__CalibrationDataInterface_Dict_499_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumberOfNamedVariations",2659,G__CalibrationDataInterface_Dict_499_0_4, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("listNamedVariations",1985,G__CalibrationDataInterface_Dict_499_0_5, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNamedVariationIndex",2250,G__CalibrationDataInterface_Dict_499_0_6, 104, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumberOfEigenVariations",2662,G__CalibrationDataInterface_Dict_499_0_7, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEigenvectorVariation",2408,G__CalibrationDataInterface_Dict_499_0_8, 103, -1, -1, 0, 3, 1, 1, 8, 
"h - - 0 - variation U 'TH1' - 1 - up "
"U 'TH1' - 1 - down", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNamedVariation",1746,G__CalibrationDataInterface_Dict_499_0_9, 103, -1, -1, 0, 3, 1, 1, 8, 
"u 'string' - 11 - name U 'TH1' - 1 - up "
"U 'TH1' - 1 - down", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNamedVariation",1746,G__CalibrationDataInterface_Dict_499_0_10, 103, -1, -1, 0, 3, 1, 1, 8, 
"h - - 0 - nameIndex U 'TH1' - 1 - up "
"U 'TH1' - 1 - down", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibrationDataInterface_Dict_499_0_11, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Analysis::CalibrationDataEigenVariations::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibrationDataInterface_Dict_499_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataEigenVariations::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibrationDataInterface_Dict_499_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Analysis::CalibrationDataEigenVariations::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibrationDataInterface_Dict_499_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Analysis::CalibrationDataEigenVariations::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__CalibrationDataInterface_Dict_499_0_15, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowMembers",1132,G__CalibrationDataInterface_Dict_499_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Streamer",835,G__CalibrationDataInterface_Dict_499_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibrationDataInterface_Dict_499_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibrationDataInterface_Dict_499_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataEigenVariations::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibrationDataInterface_Dict_499_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataEigenVariations::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibrationDataInterface_Dict_499_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataEigenVariations::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibrationDataInterface_Dict_499_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataEigenVariations::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CalibrationDataEigenVariations", 3050, G__CalibrationDataInterface_Dict_499_0_23, (int) ('i'), 
G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations), -1, 0, 1, 1, 1, 0, "u 'Analysis::CalibrationDataEigenVariations' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataEigenVariations", 3176, G__CalibrationDataInterface_Dict_499_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataInterfaceROOT(void) {
   /* Analysis::CalibrationDataInterfaceROOT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   G__memfunc_setup("CalibrationDataInterfaceROOT",2743,G__CalibrationDataInterface_Dict_501_0_1, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - taggerName u 'string' - 0 '\"BTagCalibration.env\"' configname "
"u 'string' - 0 '\"\"' pathname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrationDataInterfaceROOT",2743,G__CalibrationDataInterface_Dict_501_0_2, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScaleFactor",1415,G__CalibrationDataInterface_Dict_501_0_3, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 5, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 - unc "
"h - - 0 '0' numVariation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,G__CalibrationDataInterface_Dict_501_0_4, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 5, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 - unc "
"h - - 0 '0' numVariation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInefficiencyScaleFactor",2643,G__CalibrationDataInterface_Dict_501_0_5, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 5, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 - unc "
"h - - 0 '0' numVariation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInefficiency",1548,G__CalibrationDataInterface_Dict_501_0_6, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 5, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 - unc "
"h - - 0 '0' numVariation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCEfficiency",1477,G__CalibrationDataInterface_Dict_501_0_7, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 4, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCInefficiency",1692,G__CalibrationDataInterface_Dict_501_0_8, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 4, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("listScaleFactorUncertainties",2913,G__CalibrationDataInterface_Dict_501_0_9, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 4, 1, 1, 8, 
"u 'string' - 11 - author u 'string' - 11 - label "
"u 'string' - 11 - OP g - - 0 'false' named", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumVariations",1680,G__CalibrationDataInterface_Dict_501_0_10, 104, -1, -1, 0, 4, 1, 1, 8, 
"u 'string' - 11 - author u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 - unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("retrieveCalibrationIndex",2502,G__CalibrationDataInterface_Dict_501_0_11, 103, -1, -1, 0, 5, 1, 1, 8, 
"u 'string' - 11 - label u 'string' - 11 - OP "
"u 'string' - 11 - author g - - 0 - isSF "
"h - - 1 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScaleFactor",1415,G__CalibrationDataInterface_Dict_501_0_12, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 4, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables h - - 0 - index "
"i 'Analysis::Uncertainty' - 0 - unc h - - 0 '0' numVariation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,G__CalibrationDataInterface_Dict_501_0_13, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 5, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables h - - 0 - indexSF "
"h - - 0 - indexEff i 'Analysis::Uncertainty' - 0 - unc "
"h - - 0 '0' numVariation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInefficiencyScaleFactor",2643,G__CalibrationDataInterface_Dict_501_0_14, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 5, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables h - - 0 - indexSF "
"h - - 0 - indexEff i 'Analysis::Uncertainty' - 0 - unc "
"h - - 0 '0' numVariation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInefficiency",1548,G__CalibrationDataInterface_Dict_501_0_15, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 5, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables h - - 0 - indexSF "
"h - - 0 - indexEff i 'Analysis::Uncertainty' - 0 - unc "
"h - - 0 '0' numVariation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCEfficiency",1477,G__CalibrationDataInterface_Dict_501_0_16, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 3, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables h - - 0 - index "
"i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCInefficiency",1692,G__CalibrationDataInterface_Dict_501_0_17, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 3, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables h - - 0 - index "
"i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("listScaleFactorUncertainties",2913,G__CalibrationDataInterface_Dict_501_0_18, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 2, 1, 1, 8, 
"h - - 0 - index g - - 0 'false' named", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumVariations",1680,G__CalibrationDataInterface_Dict_501_0_19, 104, -1, -1, 0, 2, 1, 1, 8, 
"h - - 0 - index i 'Analysis::Uncertainty' - 0 - unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBinnedScaleFactors",2122,G__CalibrationDataInterface_Dict_501_0_20, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TH1), -1, 0, 3, 1, 1, 9, 
"u 'string' - 11 - author u 'string' - 11 - label "
"u 'string' - 11 - OP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShiftedScaleFactors",2241,G__CalibrationDataInterface_Dict_501_0_21, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TH1), -1, 0, 5, 1, 1, 9, 
"u 'string' - 11 - author u 'string' - 11 - label "
"u 'string' - 11 - OP u 'string' - 11 - unc "
"d - - 0 - sigmas", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScaleFactorCovarianceMatrix",3063,G__CalibrationDataInterface_Dict_501_0_22, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 0, 4, 1, 1, 8, 
"u 'string' - 11 - author u 'string' - 11 - label "
"u 'string' - 11 - OP u 'string' - 11 '\"all\"' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialize",1074,G__CalibrationDataInterface_Dict_501_0_23, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - jetauthor u 'string' - 11 - OP "
"i 'Analysis::Uncertainty' - 0 - unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("retrieveContainer",1801,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer), -1, 0, 2, 1, 4, 0, 
"u 'string' - 11 - name g - - 0 - eff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("retrieveCalibrationDataEV",2531,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations), -1, 0, 1, 1, 4, 9, "U 'Analysis::CalibrationDataContainer' - 10 - calibrationDataContainer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlias",810,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 0, 1, 1, 4, 8, "u 'string' - 11 - author", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fullName",820,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 0, 4, 1, 4, 8, 
"u 'string' - 11 - author u 'string' - 11 - OP "
"u 'string' - 11 - label g - - 0 - isSF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibrationDataInterface_Dict_501_0_28, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Analysis::CalibrationDataInterfaceROOT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibrationDataInterface_Dict_501_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceROOT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibrationDataInterface_Dict_501_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Analysis::CalibrationDataInterfaceROOT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibrationDataInterface_Dict_501_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Analysis::CalibrationDataInterfaceROOT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibrationDataInterface_Dict_501_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibrationDataInterface_Dict_501_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceROOT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibrationDataInterface_Dict_501_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataInterfaceROOT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibrationDataInterface_Dict_501_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceROOT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibrationDataInterface_Dict_501_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataInterfaceROOT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CalibrationDataInterfaceROOT", 2743, G__CalibrationDataInterface_Dict_501_0_40, (int) ('i'), 
G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT), -1, 0, 1, 1, 1, 0, "u 'Analysis::CalibrationDataInterfaceROOT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataInterfaceROOT", 2869, G__CalibrationDataInterface_Dict_501_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CalibrationDataInterface_Dict_501_0_42, (int) ('u'), G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT), -1, 1, 1, 1, 1, 0, "u 'Analysis::CalibrationDataInterfaceROOT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataHistogramContainer(void) {
   /* Analysis::CalibrationDataHistogramContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer));
   G__memfunc_setup("CalibrationDataHistogramContainer",3379,G__CalibrationDataInterface_Dict_557_0_1, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer), -1, 0, 1, 1, 1, 0, "C - - 10 '\"default\"' name", "default ctor needed for persistence", (void*) NULL, 0);
   G__memfunc_setup("getResult",959,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 3, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - x d - - 1 - result "
"U 'TObject' - 0 '0' obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getStatUncertainty",1906,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 2, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - x d - - 1 - result", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getUncertainty",1494,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 4, 1, 1, 8, 
"u 'string' - 11 - unc u 'Analysis::CalibrationDataVariables' - 11 - x "
"u 'pair<double,double>' 'Analysis::UncertaintyResult' 1 - result U 'TObject' - 0 '0' obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("checkBounds",1129,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"U 'TObject' - 10 - obj u 'vector<unsigned int,allocator<unsigned int> >' 'vector<unsigned int>' 11 - types", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isBinCorrelated",1530,G__CalibrationDataInterface_Dict_557_0_6, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUncorrelated",1588,G__CalibrationDataInterface_Dict_557_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibrationDataInterface_Dict_557_0_8, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Analysis::CalibrationDataHistogramContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibrationDataInterface_Dict_557_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataHistogramContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibrationDataInterface_Dict_557_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Analysis::CalibrationDataHistogramContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibrationDataInterface_Dict_557_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Analysis::CalibrationDataHistogramContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibrationDataInterface_Dict_557_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibrationDataInterface_Dict_557_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataHistogramContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibrationDataInterface_Dict_557_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataHistogramContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibrationDataInterface_Dict_557_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataHistogramContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibrationDataInterface_Dict_557_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataHistogramContainer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataHistogramContainer", 3505, G__CalibrationDataInterface_Dict_557_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataFunctionContainer(void) {
   /* Analysis::CalibrationDataFunctionContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer));
   G__memfunc_setup("CalibrationDataFunctionContainer",3275,G__CalibrationDataInterface_Dict_558_0_1, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer), -1, 0, 1, 1, 1, 0, "C - - 10 '\"default\"' name", "default ctor needed for persistence", (void*) NULL, 0);
   G__memfunc_setup("getResult",959,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 3, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - x d - - 1 - result "
"U 'TObject' - 0 '0' obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getStatUncertainty",1906,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 2, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - x d - - 1 - result", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getUncertainty",1494,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus), -1, 0, 4, 1, 1, 8, 
"u 'string' - 11 - unc u 'Analysis::CalibrationDataVariables' - 11 - x "
"u 'pair<double,double>' 'Analysis::UncertaintyResult' 1 - result U 'TObject' - 0 '0' obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setLowerBound",1357,G__CalibrationDataInterface_Dict_558_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - vartype d - - 0 - bound", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUpperBound",1360,G__CalibrationDataInterface_Dict_558_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - vartype d - - 0 - bound", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkBounds",1129,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"U 'TObject' - 10 - - u 'vector<unsigned int,allocator<unsigned int> >' 'vector<unsigned int>' 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CalibrationDataInterface_Dict_558_0_8, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Analysis::CalibrationDataFunctionContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibrationDataInterface_Dict_558_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataFunctionContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibrationDataInterface_Dict_558_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Analysis::CalibrationDataFunctionContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibrationDataInterface_Dict_558_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Analysis::CalibrationDataFunctionContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibrationDataInterface_Dict_558_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibrationDataInterface_Dict_558_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataFunctionContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibrationDataInterface_Dict_558_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataFunctionContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibrationDataInterface_Dict_558_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataFunctionContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibrationDataInterface_Dict_558_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataFunctionContainer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataFunctionContainer", 3401, G__CalibrationDataInterface_Dict_558_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCalibrationDataInterface_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCalibrationDataInterface_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCalibrationDataInterface_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CalibrationDataInterface_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_Analysis = { "Analysis" , 110 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables = { "Analysis::CalibrationDataVariables" , 115 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase = { "Analysis::CalibrationDataInterfaceBase" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType = { "Analysis::CalibrationDataInterfaceBase::variableType" , 101 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_THashList = { "THashList" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer = { "Analysis::CalibrationDataContainer" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations = { "Analysis::CalibrationDataEigenVariations" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty = { "Analysis::Uncertainty" , 101 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT = { "Analysis::CalibrationDataInterfaceROOT" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgR = { "vector<Analysis::CalibrationDataContainer*,allocator<Analysis::CalibrationDataContainer*> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Analysis::CalibrationDataContainer*,allocator<Analysis::CalibrationDataContainer*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR = { "map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUcOlesslEconstsPAnalysiscLcLCalibrationDataContainermUgRcOallocatorlEpairlEconstsPAnalysiscLcLCalibrationDataContainermUsPconstcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgRsPgRsPgR = { "map<const Analysis::CalibrationDataContainer*,const Analysis::CalibrationDataEigenVariations*,less<const Analysis::CalibrationDataContainer*>,allocator<pair<const Analysis::CalibrationDataContainer* const,const Analysis::CalibrationDataEigenVariations*> > >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMap = { "TMap" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationParametrization = { "Analysis::CalibrationDataContainer::CalibrationParametrization" , 101 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus = { "Analysis::CalibrationDataContainer::CalibrationStatus" , 101 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_maplEstringcOpairlEdoublecOdoublegRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOpairlEdoublecOdoublegRsPgRsPgRsPgR = { "map<string,pair<double,double>,less<string>,allocator<pair<const string,pair<double,double> > > >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR = { "vector<pair<double,double>,allocator<pair<double,double> > >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,double>,allocator<pair<double,double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgR = { "map<string,vector<unsigned int,allocator<unsigned int> >,less<string>,allocator<pair<const string,vector<unsigned int,allocator<unsigned int> > > > >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer = { "Analysis::CalibrationDataHistogramContainer" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer = { "Analysis::CalibrationDataFunctionContainer" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR = { "vector<pair<TH1*,TH1*>,allocator<pair<TH1*,TH1*> > >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<TH1*,TH1*>,allocator<pair<TH1*,TH1*> > >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCalibrationDataInterface_Dict() {
  G__CalibrationDataInterface_DictLN_TClass.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TBuffer.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMemberInspector.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TObject.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TNamed.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TCollection.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_string.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_Analysis.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_THashList.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TH1.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TFile.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUcOlesslEconstsPAnalysiscLcLCalibrationDataContainermUgRcOallocatorlEpairlEconstsPAnalysiscLcLCalibrationDataContainermUsPconstcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMap.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationParametrization.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_maplEstringcOpairlEdoublecOdoublegRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOpairlEdoublecOdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCalibrationDataInterface_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_string);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_Analysis),0,-1,0,(char*)NULL,G__setup_memvarAnalysis,G__setup_memfuncAnalysis);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables),sizeof(Analysis::CalibrationDataVariables),-1,0,(char*)NULL,G__setup_memvarAnalysiscLcLCalibrationDataVariables,G__setup_memfuncAnalysiscLcLCalibrationDataVariables);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase),sizeof(Analysis::CalibrationDataInterfaceBase),-1,62721,(char*)NULL,G__setup_memvarAnalysiscLcLCalibrationDataInterfaceBase,G__setup_memfuncAnalysiscLcLCalibrationDataInterfaceBase);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_THashList);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TH1);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainer),sizeof(Analysis::CalibrationDataContainer),-1,292100,"base class for calibration data objects",G__setup_memvarAnalysiscLcLCalibrationDataContainer,G__setup_memfuncAnalysiscLcLCalibrationDataContainer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataEigenVariations),sizeof(Analysis::CalibrationDataEigenVariations),-1,295936,(char*)NULL,G__setup_memvarAnalysiscLcLCalibrationDataEigenVariations,G__setup_memfuncAnalysiscLcLCalibrationDataEigenVariations);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT),sizeof(Analysis::CalibrationDataInterfaceROOT),-1,324864,(char*)NULL,G__setup_memvarAnalysiscLcLCalibrationDataInterfaceROOT,G__setup_memfuncAnalysiscLcLCalibrationDataInterfaceROOT);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEAnalysiscLcLCalibrationDataContainermUcOallocatorlEAnalysiscLcLCalibrationDataContainermUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_maplEconstsPAnalysiscLcLCalibrationDataContainermUcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUcOlesslEconstsPAnalysiscLcLCalibrationDataContainermUgRcOallocatorlEpairlEconstsPAnalysiscLcLCalibrationDataContainermUsPconstcOconstsPAnalysiscLcLCalibrationDataEigenVariationsmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMap);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationParametrization);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataContainercLcLCalibrationStatus);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_maplEstringcOpairlEdoublecOdoublegRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOpairlEdoublecOdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataHistogramContainer),sizeof(Analysis::CalibrationDataHistogramContainer),-1,292096,"histogram based calibration data object",G__setup_memvarAnalysiscLcLCalibrationDataHistogramContainer,G__setup_memfuncAnalysiscLcLCalibrationDataHistogramContainer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataFunctionContainer),sizeof(Analysis::CalibrationDataFunctionContainer),-1,292096,"function based calibration data object",G__setup_memvarAnalysiscLcLCalibrationDataFunctionContainer,G__setup_memfuncAnalysiscLcLCalibrationDataFunctionContainer);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEpairlETH1mUcOTH1mUgRcOallocatorlEpairlETH1mUcOTH1mUgRsPgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupCalibrationDataInterface_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupCalibrationDataInterface_Dict()");
  G__set_cpp_environmentCalibrationDataInterface_Dict();
  G__cpp_setup_tagtableCalibrationDataInterface_Dict();

  G__cpp_setup_inheritanceCalibrationDataInterface_Dict();

  G__cpp_setup_typetableCalibrationDataInterface_Dict();

  G__cpp_setup_memvarCalibrationDataInterface_Dict();

  G__cpp_setup_memfuncCalibrationDataInterface_Dict();
  G__cpp_setup_globalCalibrationDataInterface_Dict();
  G__cpp_setup_funcCalibrationDataInterface_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCalibrationDataInterface_Dict();
  return;
}
class G__cpp_setup_initCalibrationDataInterface_Dict {
  public:
    G__cpp_setup_initCalibrationDataInterface_Dict() { G__add_setup_func("CalibrationDataInterface_Dict",(G__incsetup)(&G__cpp_setupCalibrationDataInterface_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCalibrationDataInterface_Dict() { G__remove_setup_func("CalibrationDataInterface_Dict"); }
};
G__cpp_setup_initCalibrationDataInterface_Dict G__cpp_setup_initializerCalibrationDataInterface_Dict;

