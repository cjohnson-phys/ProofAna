#ifdef __llvm__
#pragma GCC diagnostic ignored "-Wunused-private-field"
#endif
#include <ReweightUtils/APWeightEntry.h>
#include <ReweightUtils/APReweightBase.h>
#include <ReweightUtils/APReweight.h>
#include <ReweightUtils/APReweight2D.h>
#include <ReweightUtils/APReweight3D.h>
#include <ReweightUtils/APReweightND.h>
#include <ReweightUtils/APWeightHist.h>
#include <ReweightUtils/APEvtWeight.h>
#include <ReweightUtils/APWeightSum.h>
#include <ReweightUtils/APWeightSumEnsemble.h>
//
// File generated by /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.05-x86_64-slc5-gcc4.3/bin/rootcint at Thu Dec 18 16:09:27 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIobjdIReweightUtils_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ReweightUtils_Dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::APWeightEntry APWeightEntry;
      #else
      class APWeightEntry  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~APWeightEntry() throw() {};
         unsigned int _val_denominator; //!< Holds the value of original denominator. */
         unsigned int _val_numerator; //!< Holds the value of original numerator. */
         double _expectancy_val; //!< Holds the Expectancy value of efficiency/weight. */
         double _variance; //!< Holds Variance of efficiency/weight (classical binomial/poisson model). */
         double _stat_uncert_low; //!< Holds lower bound of asymmetric statistical uncertainty. */
         double _stat_uncert_high; //!< Holds upper bound of asymmetric statistical uncertainty. */
         double _sys_uncert; //!< Holds absolute systematic uncertainty value of efficiency/weight. */
         double _sys_uncert2; //!< Holds absolute systematic uncertainty squared value of efficiency/weight. */
         bool _is_trig; //!< Flag, set to true if weight entry is trigger based. */
         bool _is_nan; //!< Flag, set to true if denominator is zero. */
         unsigned int _ID; //!< Holds internal ID (used by APReweight/APReweight2D/APReweight3D/APReweightND). */
         double _integral; //!< Holds the integral of the probability distribution. */
         double* _pdf; //
         double* _bins; //
         double* _cumul; //!< Histograms to hold the probability distribution and the cumulative distribution. */
         ::TH1F* _hist; //!< Holds the TH1F instance from the arrays if computed. */
         vector< int > _coords; //!< Holds the coordinates of the current entry in the original histogram. */
         vector< int > _n_dim_origin; //!< Holds the amount of dimensions and bins per axis in the original histogram. */
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void APWeightEntry_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void APWeightEntry_Dictionary();
   static void *new_APWeightEntry(void *p = 0);
   static void *newArray_APWeightEntry(Long_t size, void *p);
   static void delete_APWeightEntry(void *p);
   static void deleteArray_APWeightEntry(void *p);
   static void destruct_APWeightEntry(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APWeightEntry*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::APWeightEntry) == sizeof(::ROOT::Shadow::APWeightEntry));
      ::APWeightEntry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::APWeightEntry),0);
      static ::ROOT::TGenericClassInfo 
         instance("APWeightEntry", "../ReweightUtils/APWeightEntry.h", 21,
                  typeid(::APWeightEntry), DefineBehavior(ptr, ptr),
                  &APWeightEntry_ShowMembers, &APWeightEntry_Dictionary, isa_proxy, 4,
                  sizeof(::APWeightEntry) );
      instance.SetNew(&new_APWeightEntry);
      instance.SetNewArray(&newArray_APWeightEntry);
      instance.SetDelete(&delete_APWeightEntry);
      instance.SetDeleteArray(&deleteArray_APWeightEntry);
      instance.SetDestructor(&destruct_APWeightEntry);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APWeightEntry*)
   {
      return GenerateInitInstanceLocal((::APWeightEntry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APWeightEntry*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void APWeightEntry_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::APWeightEntry*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void APReweightBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_APReweightBase(void *p = 0);
   static void *newArray_APReweightBase(Long_t size, void *p);
   static void delete_APReweightBase(void *p);
   static void deleteArray_APReweightBase(void *p);
   static void destruct_APReweightBase(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APReweightBase*)
   {
      ::APReweightBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::APReweightBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("APReweightBase", ::APReweightBase::Class_Version(), "../ReweightUtils/APReweightBase.h", 18,
                  typeid(::APReweightBase), DefineBehavior(ptr, ptr),
                  &::APReweightBase::Dictionary, isa_proxy, 4,
                  sizeof(::APReweightBase) );
      instance.SetNew(&new_APReweightBase);
      instance.SetNewArray(&newArray_APReweightBase);
      instance.SetDelete(&delete_APReweightBase);
      instance.SetDeleteArray(&deleteArray_APReweightBase);
      instance.SetDestructor(&destruct_APReweightBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APReweightBase*)
   {
      return GenerateInitInstanceLocal((::APReweightBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APReweightBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void APReweight_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_APReweight(void *p = 0);
   static void *newArray_APReweight(Long_t size, void *p);
   static void delete_APReweight(void *p);
   static void deleteArray_APReweight(void *p);
   static void destruct_APReweight(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APReweight*)
   {
      ::APReweight *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::APReweight >(0);
      static ::ROOT::TGenericClassInfo 
         instance("APReweight", ::APReweight::Class_Version(), "../ReweightUtils/APReweight.h", 26,
                  typeid(::APReweight), DefineBehavior(ptr, ptr),
                  &::APReweight::Dictionary, isa_proxy, 4,
                  sizeof(::APReweight) );
      instance.SetNew(&new_APReweight);
      instance.SetNewArray(&newArray_APReweight);
      instance.SetDelete(&delete_APReweight);
      instance.SetDeleteArray(&deleteArray_APReweight);
      instance.SetDestructor(&destruct_APReweight);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APReweight*)
   {
      return GenerateInitInstanceLocal((::APReweight*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APReweight*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void APReweight2D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_APReweight2D(void *p = 0);
   static void *newArray_APReweight2D(Long_t size, void *p);
   static void delete_APReweight2D(void *p);
   static void deleteArray_APReweight2D(void *p);
   static void destruct_APReweight2D(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APReweight2D*)
   {
      ::APReweight2D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::APReweight2D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("APReweight2D", ::APReweight2D::Class_Version(), "../ReweightUtils/APReweight2D.h", 25,
                  typeid(::APReweight2D), DefineBehavior(ptr, ptr),
                  &::APReweight2D::Dictionary, isa_proxy, 4,
                  sizeof(::APReweight2D) );
      instance.SetNew(&new_APReweight2D);
      instance.SetNewArray(&newArray_APReweight2D);
      instance.SetDelete(&delete_APReweight2D);
      instance.SetDeleteArray(&deleteArray_APReweight2D);
      instance.SetDestructor(&destruct_APReweight2D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APReweight2D*)
   {
      return GenerateInitInstanceLocal((::APReweight2D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APReweight2D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void APReweight3D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_APReweight3D(void *p = 0);
   static void *newArray_APReweight3D(Long_t size, void *p);
   static void delete_APReweight3D(void *p);
   static void deleteArray_APReweight3D(void *p);
   static void destruct_APReweight3D(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APReweight3D*)
   {
      ::APReweight3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::APReweight3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("APReweight3D", ::APReweight3D::Class_Version(), "../ReweightUtils/APReweight3D.h", 25,
                  typeid(::APReweight3D), DefineBehavior(ptr, ptr),
                  &::APReweight3D::Dictionary, isa_proxy, 4,
                  sizeof(::APReweight3D) );
      instance.SetNew(&new_APReweight3D);
      instance.SetNewArray(&newArray_APReweight3D);
      instance.SetDelete(&delete_APReweight3D);
      instance.SetDeleteArray(&deleteArray_APReweight3D);
      instance.SetDestructor(&destruct_APReweight3D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APReweight3D*)
   {
      return GenerateInitInstanceLocal((::APReweight3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APReweight3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void APReweightND_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_APReweightND(void *p = 0);
   static void *newArray_APReweightND(Long_t size, void *p);
   static void delete_APReweightND(void *p);
   static void deleteArray_APReweightND(void *p);
   static void destruct_APReweightND(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APReweightND*)
   {
      ::APReweightND *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::APReweightND >(0);
      static ::ROOT::TGenericClassInfo 
         instance("APReweightND", ::APReweightND::Class_Version(), "../ReweightUtils/APReweightND.h", 25,
                  typeid(::APReweightND), DefineBehavior(ptr, ptr),
                  &::APReweightND::Dictionary, isa_proxy, 4,
                  sizeof(::APReweightND) );
      instance.SetNew(&new_APReweightND);
      instance.SetNewArray(&newArray_APReweightND);
      instance.SetDelete(&delete_APReweightND);
      instance.SetDeleteArray(&deleteArray_APReweightND);
      instance.SetDestructor(&destruct_APReweightND);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APReweightND*)
   {
      return GenerateInitInstanceLocal((::APReweightND*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APReweightND*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void APWeightHist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_APWeightHist(void *p = 0);
   static void *newArray_APWeightHist(Long_t size, void *p);
   static void delete_APWeightHist(void *p);
   static void deleteArray_APWeightHist(void *p);
   static void destruct_APWeightHist(void *p);
   static void directoryAutoAdd_APWeightHist(void *obj, TDirectory *dir);
   static Long64_t merge_APWeightHist(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APWeightHist*)
   {
      ::APWeightHist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::APWeightHist >(0);
      static ::ROOT::TGenericClassInfo 
         instance("APWeightHist", ::APWeightHist::Class_Version(), "../ReweightUtils/APWeightHist.h", 22,
                  typeid(::APWeightHist), DefineBehavior(ptr, ptr),
                  &::APWeightHist::Dictionary, isa_proxy, 4,
                  sizeof(::APWeightHist) );
      instance.SetNew(&new_APWeightHist);
      instance.SetNewArray(&newArray_APWeightHist);
      instance.SetDelete(&delete_APWeightHist);
      instance.SetDeleteArray(&deleteArray_APWeightHist);
      instance.SetDestructor(&destruct_APWeightHist);
      instance.SetDirectoryAutoAdd(&directoryAutoAdd_APWeightHist);
      instance.SetMerge(&merge_APWeightHist);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APWeightHist*)
   {
      return GenerateInitInstanceLocal((::APWeightHist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APWeightHist*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void APEvtWeight_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_APEvtWeight(void *p);
   static void deleteArray_APEvtWeight(void *p);
   static void destruct_APEvtWeight(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APEvtWeight*)
   {
      ::APEvtWeight *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::APEvtWeight >(0);
      static ::ROOT::TGenericClassInfo 
         instance("APEvtWeight", ::APEvtWeight::Class_Version(), "../ReweightUtils/APEvtWeight.h", 22,
                  typeid(::APEvtWeight), DefineBehavior(ptr, ptr),
                  &::APEvtWeight::Dictionary, isa_proxy, 4,
                  sizeof(::APEvtWeight) );
      instance.SetDelete(&delete_APEvtWeight);
      instance.SetDeleteArray(&deleteArray_APEvtWeight);
      instance.SetDestructor(&destruct_APEvtWeight);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APEvtWeight*)
   {
      return GenerateInitInstanceLocal((::APEvtWeight*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APEvtWeight*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void APWeightSum_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_APWeightSum(void *p = 0);
   static void *newArray_APWeightSum(Long_t size, void *p);
   static void delete_APWeightSum(void *p);
   static void deleteArray_APWeightSum(void *p);
   static void destruct_APWeightSum(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APWeightSum*)
   {
      ::APWeightSum *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::APWeightSum >(0);
      static ::ROOT::TGenericClassInfo 
         instance("APWeightSum", ::APWeightSum::Class_Version(), "../ReweightUtils/APWeightSum.h", 25,
                  typeid(::APWeightSum), DefineBehavior(ptr, ptr),
                  &::APWeightSum::Dictionary, isa_proxy, 4,
                  sizeof(::APWeightSum) );
      instance.SetNew(&new_APWeightSum);
      instance.SetNewArray(&newArray_APWeightSum);
      instance.SetDelete(&delete_APWeightSum);
      instance.SetDeleteArray(&deleteArray_APWeightSum);
      instance.SetDestructor(&destruct_APWeightSum);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APWeightSum*)
   {
      return GenerateInitInstanceLocal((::APWeightSum*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APWeightSum*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void APWeightSumEnsemble_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_APWeightSumEnsemble(void *p = 0);
   static void *newArray_APWeightSumEnsemble(Long_t size, void *p);
   static void delete_APWeightSumEnsemble(void *p);
   static void deleteArray_APWeightSumEnsemble(void *p);
   static void destruct_APWeightSumEnsemble(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::APWeightSumEnsemble*)
   {
      ::APWeightSumEnsemble *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::APWeightSumEnsemble >(0);
      static ::ROOT::TGenericClassInfo 
         instance("APWeightSumEnsemble", ::APWeightSumEnsemble::Class_Version(), "../ReweightUtils/APWeightSumEnsemble.h", 24,
                  typeid(::APWeightSumEnsemble), DefineBehavior(ptr, ptr),
                  &::APWeightSumEnsemble::Dictionary, isa_proxy, 4,
                  sizeof(::APWeightSumEnsemble) );
      instance.SetNew(&new_APWeightSumEnsemble);
      instance.SetNewArray(&newArray_APWeightSumEnsemble);
      instance.SetDelete(&delete_APWeightSumEnsemble);
      instance.SetDeleteArray(&deleteArray_APWeightSumEnsemble);
      instance.SetDestructor(&destruct_APWeightSumEnsemble);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::APWeightSumEnsemble*)
   {
      return GenerateInitInstanceLocal((::APWeightSumEnsemble*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::APWeightSumEnsemble*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *APReweightBase::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *APReweightBase::Class_Name()
{
   return "APReweightBase";
}

//______________________________________________________________________________
const char *APReweightBase::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweightBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int APReweightBase::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweightBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void APReweightBase::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweightBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *APReweightBase::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweightBase*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *APReweight::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *APReweight::Class_Name()
{
   return "APReweight";
}

//______________________________________________________________________________
const char *APReweight::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweight*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int APReweight::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweight*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void APReweight::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweight*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *APReweight::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweight*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *APReweight2D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *APReweight2D::Class_Name()
{
   return "APReweight2D";
}

//______________________________________________________________________________
const char *APReweight2D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweight2D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int APReweight2D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweight2D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void APReweight2D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweight2D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *APReweight2D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweight2D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *APReweight3D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *APReweight3D::Class_Name()
{
   return "APReweight3D";
}

//______________________________________________________________________________
const char *APReweight3D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweight3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int APReweight3D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweight3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void APReweight3D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweight3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *APReweight3D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweight3D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *APReweightND::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *APReweightND::Class_Name()
{
   return "APReweightND";
}

//______________________________________________________________________________
const char *APReweightND::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweightND*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int APReweightND::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APReweightND*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void APReweightND::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweightND*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *APReweightND::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APReweightND*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *APWeightHist::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *APWeightHist::Class_Name()
{
   return "APWeightHist";
}

//______________________________________________________________________________
const char *APWeightHist::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APWeightHist*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int APWeightHist::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APWeightHist*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void APWeightHist::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APWeightHist*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *APWeightHist::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APWeightHist*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *APEvtWeight::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *APEvtWeight::Class_Name()
{
   return "APEvtWeight";
}

//______________________________________________________________________________
const char *APEvtWeight::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APEvtWeight*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int APEvtWeight::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APEvtWeight*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void APEvtWeight::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APEvtWeight*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *APEvtWeight::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APEvtWeight*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *APWeightSum::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *APWeightSum::Class_Name()
{
   return "APWeightSum";
}

//______________________________________________________________________________
const char *APWeightSum::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APWeightSum*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int APWeightSum::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APWeightSum*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void APWeightSum::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APWeightSum*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *APWeightSum::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APWeightSum*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *APWeightSumEnsemble::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *APWeightSumEnsemble::Class_Name()
{
   return "APWeightSumEnsemble";
}

//______________________________________________________________________________
const char *APWeightSumEnsemble::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APWeightSumEnsemble*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int APWeightSumEnsemble::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::APWeightSumEnsemble*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void APWeightSumEnsemble::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APWeightSumEnsemble*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *APWeightSumEnsemble::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::APWeightSumEnsemble*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
namespace ROOT {
   void APWeightEntry_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class APWeightEntry.
      typedef ::ROOT::Shadow::APWeightEntry ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::APWeightEntry*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_val_denominator", &sobj->_val_denominator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_val_numerator", &sobj->_val_numerator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_expectancy_val", &sobj->_expectancy_val);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_variance", &sobj->_variance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_stat_uncert_low", &sobj->_stat_uncert_low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_stat_uncert_high", &sobj->_stat_uncert_high);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sys_uncert", &sobj->_sys_uncert);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sys_uncert2", &sobj->_sys_uncert2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_is_trig", &sobj->_is_trig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_is_nan", &sobj->_is_nan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ID", &sobj->_ID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_integral", &sobj->_integral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_pdf", &sobj->_pdf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_bins", &sobj->_bins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_cumul", &sobj->_cumul);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_hist", &sobj->_hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_coords", (void*)&sobj->_coords);
      R__insp.InspectMember("vector<int>", (void*)&sobj->_coords, "_coords.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_n_dim_origin", (void*)&sobj->_n_dim_origin);
      R__insp.InspectMember("vector<int>", (void*)&sobj->_n_dim_origin, "_n_dim_origin.", true);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_APWeightEntry(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::APWeightEntry : new ::APWeightEntry;
   }
   static void *newArray_APWeightEntry(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::APWeightEntry[nElements] : new ::APWeightEntry[nElements];
   }
   // Wrapper around operator delete
   static void delete_APWeightEntry(void *p) {
      delete ((::APWeightEntry*)p);
   }
   static void deleteArray_APWeightEntry(void *p) {
      delete [] ((::APWeightEntry*)p);
   }
   static void destruct_APWeightEntry(void *p) {
      typedef ::APWeightEntry current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::APWeightEntry

//______________________________________________________________________________
void APReweightBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class APReweightBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(APReweightBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(APReweightBase::Class(),this);
   }
}

//______________________________________________________________________________
void APReweightBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class APReweightBase.
      TClass *R__cl = ::APReweightBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ID", &_ID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scale", &_scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isTrig", &_isTrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isQuiet", &_isQuiet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_syst_uncert_global", &_syst_uncert_global);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_empty_weight", &_empty_weight);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_APReweightBase(void *p) {
      return  p ? new(p) ::APReweightBase : new ::APReweightBase;
   }
   static void *newArray_APReweightBase(Long_t nElements, void *p) {
      return p ? new(p) ::APReweightBase[nElements] : new ::APReweightBase[nElements];
   }
   // Wrapper around operator delete
   static void delete_APReweightBase(void *p) {
      delete ((::APReweightBase*)p);
   }
   static void deleteArray_APReweightBase(void *p) {
      delete [] ((::APReweightBase*)p);
   }
   static void destruct_APReweightBase(void *p) {
      typedef ::APReweightBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::APReweightBase

//______________________________________________________________________________
void APReweight::Streamer(TBuffer &R__b)
{
   // Stream an object of class APReweight.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(APReweight::Class(),this);
   } else {
      R__b.WriteClassBuffer(APReweight::Class(),this);
   }
}

//______________________________________________________________________________
void APReweight::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class APReweight.
      TClass *R__cl = ::APReweight::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_denominator_hist", &_denominator_hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_numerator_hist", &_numerator_hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_weights", (void*)&_weights);
      R__insp.InspectMember("vector<APWeightEntry*>", (void*)&_weights, "_weights.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_n_bins", &_n_bins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_axis", &_axis);
      APReweightBase::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_APReweight(void *p) {
      return  p ? new(p) ::APReweight : new ::APReweight;
   }
   static void *newArray_APReweight(Long_t nElements, void *p) {
      return p ? new(p) ::APReweight[nElements] : new ::APReweight[nElements];
   }
   // Wrapper around operator delete
   static void delete_APReweight(void *p) {
      delete ((::APReweight*)p);
   }
   static void deleteArray_APReweight(void *p) {
      delete [] ((::APReweight*)p);
   }
   static void destruct_APReweight(void *p) {
      typedef ::APReweight current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::APReweight

//______________________________________________________________________________
void APReweight2D::Streamer(TBuffer &R__b)
{
   // Stream an object of class APReweight2D.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(APReweight2D::Class(),this);
   } else {
      R__b.WriteClassBuffer(APReweight2D::Class(),this);
   }
}

//______________________________________________________________________________
void APReweight2D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class APReweight2D.
      TClass *R__cl = ::APReweight2D::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_denominator_hist", &_denominator_hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_numerator_hist", &_numerator_hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_weights", (void*)&_weights);
      R__insp.InspectMember("vector<std::vector<APWeightEntry*> >", (void*)&_weights, "_weights.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_n_bins_x", &_n_bins_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_n_bins_y", &_n_bins_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_axis_x", &_axis_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_axis_y", &_axis_y);
      APReweightBase::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_APReweight2D(void *p) {
      return  p ? new(p) ::APReweight2D : new ::APReweight2D;
   }
   static void *newArray_APReweight2D(Long_t nElements, void *p) {
      return p ? new(p) ::APReweight2D[nElements] : new ::APReweight2D[nElements];
   }
   // Wrapper around operator delete
   static void delete_APReweight2D(void *p) {
      delete ((::APReweight2D*)p);
   }
   static void deleteArray_APReweight2D(void *p) {
      delete [] ((::APReweight2D*)p);
   }
   static void destruct_APReweight2D(void *p) {
      typedef ::APReweight2D current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::APReweight2D

//______________________________________________________________________________
void APReweight3D::Streamer(TBuffer &R__b)
{
   // Stream an object of class APReweight3D.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(APReweight3D::Class(),this);
   } else {
      R__b.WriteClassBuffer(APReweight3D::Class(),this);
   }
}

//______________________________________________________________________________
void APReweight3D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class APReweight3D.
      TClass *R__cl = ::APReweight3D::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_denominator_hist", &_denominator_hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_numerator_hist", &_numerator_hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_weights", (void*)&_weights);
      R__insp.InspectMember("vector<std::vector<std::vector<APWeightEntry*> > >", (void*)&_weights, "_weights.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_n_bins_x", &_n_bins_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_n_bins_y", &_n_bins_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_n_bins_z", &_n_bins_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_axis_x", &_axis_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_axis_y", &_axis_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_axis_z", &_axis_z);
      APReweightBase::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_APReweight3D(void *p) {
      return  p ? new(p) ::APReweight3D : new ::APReweight3D;
   }
   static void *newArray_APReweight3D(Long_t nElements, void *p) {
      return p ? new(p) ::APReweight3D[nElements] : new ::APReweight3D[nElements];
   }
   // Wrapper around operator delete
   static void delete_APReweight3D(void *p) {
      delete ((::APReweight3D*)p);
   }
   static void deleteArray_APReweight3D(void *p) {
      delete [] ((::APReweight3D*)p);
   }
   static void destruct_APReweight3D(void *p) {
      typedef ::APReweight3D current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::APReweight3D

//______________________________________________________________________________
void APReweightND::Streamer(TBuffer &R__b)
{
   // Stream an object of class APReweightND.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(APReweightND::Class(),this);
   } else {
      R__b.WriteClassBuffer(APReweightND::Class(),this);
   }
}

//______________________________________________________________________________
void APReweightND::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class APReweightND.
      TClass *R__cl = ::APReweightND::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_n_dim", &_n_dim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_denominator_hist", &_denominator_hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_numerator_hist", &_numerator_hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_weights", (void*)&_weights);
      R__insp.InspectMember("map<std::vector<int>,APWeightEntry*>", (void*)&_weights, "_weights.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_axes", (void*)&_axes);
      R__insp.InspectMember("vector<TAxis*>", (void*)&_axes, "_axes.", true);
      APReweightBase::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_APReweightND(void *p) {
      return  p ? new(p) ::APReweightND : new ::APReweightND;
   }
   static void *newArray_APReweightND(Long_t nElements, void *p) {
      return p ? new(p) ::APReweightND[nElements] : new ::APReweightND[nElements];
   }
   // Wrapper around operator delete
   static void delete_APReweightND(void *p) {
      delete ((::APReweightND*)p);
   }
   static void deleteArray_APReweightND(void *p) {
      delete [] ((::APReweightND*)p);
   }
   static void destruct_APReweightND(void *p) {
      typedef ::APReweightND current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::APReweightND

//______________________________________________________________________________
void APWeightHist::Streamer(TBuffer &R__b)
{
   // Stream an object of class APWeightHist.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(APWeightHist::Class(),this);
   } else {
      R__b.WriteClassBuffer(APWeightHist::Class(),this);
   }
}

//______________________________________________________________________________
void APWeightHist::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class APWeightHist.
      TClass *R__cl = ::APWeightHist::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_computed_entries", &_computed_entries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_binned_weights", (void*)&_binned_weights);
      R__insp.InspectMember("vector<std::vector<APWeightEntry*> >", (void*)&_binned_weights, "_binned_weights.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_bin_dists", (void*)&_bin_dists);
      R__insp.InspectMember("vector<TH1D*>", (void*)&_bin_dists, "_bin_dists.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumSys2", (void*)&fSumSys2);
      R__insp.InspectMember("vector<double>", (void*)&fSumSys2, "fSumSys2.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_graph_stat", &_graph_stat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_graph_syst", &_graph_syst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_prec", &_prec);
      TH1D::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_APWeightHist(void *p) {
      return  p ? new(p) ::APWeightHist : new ::APWeightHist;
   }
   static void *newArray_APWeightHist(Long_t nElements, void *p) {
      return p ? new(p) ::APWeightHist[nElements] : new ::APWeightHist[nElements];
   }
   // Wrapper around operator delete
   static void delete_APWeightHist(void *p) {
      delete ((::APWeightHist*)p);
   }
   static void deleteArray_APWeightHist(void *p) {
      delete [] ((::APWeightHist*)p);
   }
   static void destruct_APWeightHist(void *p) {
      typedef ::APWeightHist current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the directory auto add.
   static void directoryAutoAdd_APWeightHist(void *p, TDirectory *dir) {
      ((::APWeightHist*)p)->DirectoryAutoAdd(dir);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_APWeightHist(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::APWeightHist*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::APWeightHist

//______________________________________________________________________________
void APEvtWeight::Streamer(TBuffer &R__b)
{
   // Stream an object of class APEvtWeight.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(APEvtWeight::Class(),this);
   } else {
      R__b.WriteClassBuffer(APEvtWeight::Class(),this);
   }
}

//______________________________________________________________________________
void APEvtWeight::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class APEvtWeight.
      TClass *R__cl = ::APEvtWeight::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_current_evt_weights", (void*)&_current_evt_weights);
      R__insp.InspectMember("vector<std::vector<APWeightEntry*> >", (void*)&_current_evt_weights, "_current_evt_weights.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_n_entries", &_n_entries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_k_evt_weight", &_k_evt_weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_variance", &_variance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_variance_sys", &_variance_sys);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isComputed", &_isComputed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_type", &_type);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_APEvtWeight(void *p) {
      delete ((::APEvtWeight*)p);
   }
   static void deleteArray_APEvtWeight(void *p) {
      delete [] ((::APEvtWeight*)p);
   }
   static void destruct_APEvtWeight(void *p) {
      typedef ::APEvtWeight current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::APEvtWeight

//______________________________________________________________________________
void APWeightSum::Streamer(TBuffer &R__b)
{
   // Stream an object of class APWeightSum.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(APWeightSum::Class(),this);
   } else {
      R__b.WriteClassBuffer(APWeightSum::Class(),this);
   }
}

//______________________________________________________________________________
void APWeightSum::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class APWeightSum.
      TClass *R__cl = ::APWeightSum::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_current_evt_weights", (void*)&_current_evt_weights);
      R__insp.InspectMember("vector<APWeightEntry*>", (void*)&_current_evt_weights, "_current_evt_weights.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_linear_uncert", (void*)&_linear_uncert);
      R__insp.InspectMember("vector<THnSparse*>", (void*)&_linear_uncert, "_linear_uncert.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_k_evt_orig", &_k_evt_orig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_k_evt_weight", &_k_evt_weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_k_evt_weight2", &_k_evt_weight2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_k_evt_weight_external", &_k_evt_weight_external);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_variance", &_variance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_variance_nocorr", &_variance_nocorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_variance_fullcorr", &_variance_fullcorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_variance_sys", &_variance_sys);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isComputed", &_isComputed);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_APWeightSum(void *p) {
      return  p ? new(p) ::APWeightSum : new ::APWeightSum;
   }
   static void *newArray_APWeightSum(Long_t nElements, void *p) {
      return p ? new(p) ::APWeightSum[nElements] : new ::APWeightSum[nElements];
   }
   // Wrapper around operator delete
   static void delete_APWeightSum(void *p) {
      delete ((::APWeightSum*)p);
   }
   static void deleteArray_APWeightSum(void *p) {
      delete [] ((::APWeightSum*)p);
   }
   static void destruct_APWeightSum(void *p) {
      typedef ::APWeightSum current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::APWeightSum

//______________________________________________________________________________
void APWeightSumEnsemble::Streamer(TBuffer &R__b)
{
   // Stream an object of class APWeightSumEnsemble.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(APWeightSumEnsemble::Class(),this);
   } else {
      R__b.WriteClassBuffer(APWeightSumEnsemble::Class(),this);
   }
}

//______________________________________________________________________________
void APWeightSumEnsemble::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class APWeightSumEnsemble.
      TClass *R__cl = ::APWeightSumEnsemble::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_weight_vector", (void*)&_weight_vector);
      R__insp.InspectMember("vector<std::vector<APWeightEntry*> >", (void*)&_weight_vector, "_weight_vector.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_current_evt_pdfs", (void*)&_current_evt_pdfs);
      R__insp.InspectMember("vector<APWeightEntry*>", (void*)&_current_evt_pdfs, "_current_evt_pdfs.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ext_weights", (void*)&_ext_weights);
      R__insp.InspectMember("vector<double>", (void*)&_ext_weights, "_ext_weights.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_rel_prec", &_rel_prec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_pdf", &_pdf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ensemble_mode", &_ensemble_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ensemble_sigma", &_ensemble_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ensembleTest_done", &_ensembleTest_done);
      APWeightSum::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_APWeightSumEnsemble(void *p) {
      return  p ? new(p) ::APWeightSumEnsemble : new ::APWeightSumEnsemble;
   }
   static void *newArray_APWeightSumEnsemble(Long_t nElements, void *p) {
      return p ? new(p) ::APWeightSumEnsemble[nElements] : new ::APWeightSumEnsemble[nElements];
   }
   // Wrapper around operator delete
   static void delete_APWeightSumEnsemble(void *p) {
      delete ((::APWeightSumEnsemble*)p);
   }
   static void deleteArray_APWeightSumEnsemble(void *p) {
      delete [] ((::APWeightSumEnsemble*)p);
   }
   static void destruct_APWeightSumEnsemble(void *p) {
      typedef ::APWeightSumEnsemble current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::APWeightSumEnsemble

/********************************************************
* ../obj/ReweightUtils_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableReweightUtils_Dict();

extern "C" void G__set_cpp_environmentReweightUtils_Dict() {
  G__cpp_reset_tagtableReweightUtils_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevReweightUtils_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* APWeightEntry */
static int G__ReweightUtils_Dict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APWeightEntry* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightEntry[n];
     } else {
       p = new((void*) gvp) APWeightEntry[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightEntry;
     } else {
       p = new((void*) gvp) APWeightEntry;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APWeightEntry* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightEntry(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) APWeightEntry(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightEntry(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) APWeightEntry(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightEntry*) G__getstructoffset())->ReadEfficiency((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightEntry*) G__getstructoffset())->SetCoordinates(*((vector<int>*) G__int(libp->para[0])), *((vector<int>*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APWeightEntry*) G__getstructoffset())->GetValDenominator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APWeightEntry*) G__getstructoffset())->GetValNumerator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightEntry*) G__getstructoffset())->GetExpectancy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightEntry*) G__getstructoffset())->GetVariance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightEntry*) G__getstructoffset())->GetStatUncertLow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightEntry*) G__getstructoffset())->GetStatUncertHigh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightEntry*) G__getstructoffset())->GetSysUncert());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightEntry*) G__getstructoffset())->GetSysUncert2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APWeightEntry*) G__getstructoffset())->GetRandom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((APWeightEntry*) G__getstructoffset())->GetPDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APWeightEntry*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const APWeightEntry*) G__getstructoffset())->GetCoords();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const APWeightEntry*) G__getstructoffset())->GetOriginalDimensions();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const APWeightEntry*) G__getstructoffset())->IsNaN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const APWeightEntry*) G__getstructoffset())->IsTrig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightEntry*) G__getstructoffset())->SetSystUncert((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_169_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightEntry*) G__getstructoffset())->SetID((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_169_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APWeightEntry* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APWeightEntry(*(APWeightEntry*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APWeightEntry G__TAPWeightEntry;
static int G__ReweightUtils_Dict_169_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APWeightEntry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APWeightEntry*) (soff+(sizeof(APWeightEntry)*i)))->~G__TAPWeightEntry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APWeightEntry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APWeightEntry*) (soff))->~G__TAPWeightEntry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReweightUtils_Dict_169_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APWeightEntry* dest = (APWeightEntry*) G__getstructoffset();
   *dest = *(APWeightEntry*) libp->para[0].ref;
   const APWeightEntry& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* APReweightBase */
static int G__ReweightUtils_Dict_189_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweightBase* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweightBase[n];
     } else {
       p = new((void*) gvp) APReweightBase[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweightBase;
     } else {
       p = new((void*) gvp) APReweightBase;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweightBase*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) APReweightBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweightBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) APReweightBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      APReweightBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APReweightBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweightBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweightBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweightBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_189_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweightBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_189_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APReweightBase* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APReweightBase(*(APReweightBase*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APReweightBase G__TAPReweightBase;
static int G__ReweightUtils_Dict_189_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APReweightBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APReweightBase*) (soff+(sizeof(APReweightBase)*i)))->~G__TAPReweightBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APReweightBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APReweightBase*) (soff))->~G__TAPReweightBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReweightUtils_Dict_189_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweightBase* dest = (APReweightBase*) G__getstructoffset();
   *dest = *(APReweightBase*) libp->para[0].ref;
   const APReweightBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* APReweight */
static int G__ReweightUtils_Dict_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight[n];
     } else {
       p = new((void*) gvp) APReweight[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight;
     } else {
       p = new((void*) gvp) APReweight;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight(
(TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (TTree*) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (unsigned int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (bool) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) APReweight(
(TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (TTree*) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (unsigned int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (bool) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight(
(TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (TTree*) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (unsigned int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) APReweight(
(TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (TTree*) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (unsigned int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight(
*((vector<double>*) G__int(libp->para[0])), *((vector<double>*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) APReweight(
*((vector<double>*) G__int(libp->para[0])), *((vector<double>*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight(
*((vector<double>*) G__int(libp->para[0])), *((vector<double>*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) APReweight(
*((vector<double>*) G__int(libp->para[0])), *((vector<double>*) G__int(libp->para[1]))
, (unsigned int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight(
(TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) APReweight(
(TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) APReweight((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((APReweight*) G__getstructoffset())->ReadEfficiency((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1])
, (TH1*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((APReweight*) G__getstructoffset())->ReadEfficiency((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight*) G__getstructoffset())->GetBinWeight((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight*) G__getstructoffset())->GetWeight((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APReweight*) G__getstructoffset())->GetSampleScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweight*) G__getstructoffset())->NBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweight*) G__getstructoffset())->GetBin((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight*) G__getstructoffset())->GetDenominatorHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight*) G__getstructoffset())->GetNumeratorHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APReweight*) G__getstructoffset())->SetSystUncert((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((APReweight*) G__getstructoffset())->SetQuietMode((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((APReweight*) G__getstructoffset())->SetQuietMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) APReweight::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweight::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) APReweight::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      APReweight::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APReweight*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweight::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweight::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweight::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_194_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweight::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_194_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APReweight* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APReweight(*(APReweight*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APReweight G__TAPReweight;
static int G__ReweightUtils_Dict_194_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APReweight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APReweight*) (soff+(sizeof(APReweight)*i)))->~G__TAPReweight();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APReweight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APReweight*) (soff))->~G__TAPReweight();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReweightUtils_Dict_194_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight* dest = (APReweight*) G__getstructoffset();
   *dest = *(APReweight*) libp->para[0].ref;
   const APReweight& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* APReweight2D */
static int G__ReweightUtils_Dict_201_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight2D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight2D[n];
     } else {
       p = new((void*) gvp) APReweight2D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight2D;
     } else {
       p = new((void*) gvp) APReweight2D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight2D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight2D(
(TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) APReweight2D(
(TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight2D((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) APReweight2D((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((APReweight2D*) G__getstructoffset())->ReadEfficiency((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1])
, (TH2*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((APReweight2D*) G__getstructoffset())->ReadEfficiency((TH2*) G__int(libp->para[0]), (TH2*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight2D*) G__getstructoffset())->GetBinWeight((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight2D*) G__getstructoffset())->GetWeight((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APReweight2D*) G__getstructoffset())->GetSampleScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweight2D*) G__getstructoffset())->NBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweight2D*) G__getstructoffset())->GetBinX((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweight2D*) G__getstructoffset())->GetBinY((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight2D*) G__getstructoffset())->GetDenominatorHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight2D*) G__getstructoffset())->GetNumeratorHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APReweight2D*) G__getstructoffset())->SetSystUncert((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((APReweight2D*) G__getstructoffset())->SetQuietMode((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((APReweight2D*) G__getstructoffset())->SetQuietMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) APReweight2D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweight2D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) APReweight2D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      APReweight2D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APReweight2D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweight2D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweight2D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweight2D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_201_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweight2D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_201_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APReweight2D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APReweight2D(*(APReweight2D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APReweight2D G__TAPReweight2D;
static int G__ReweightUtils_Dict_201_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APReweight2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APReweight2D*) (soff+(sizeof(APReweight2D)*i)))->~G__TAPReweight2D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APReweight2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APReweight2D*) (soff))->~G__TAPReweight2D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReweightUtils_Dict_201_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight2D* dest = (APReweight2D*) G__getstructoffset();
   *dest = *(APReweight2D*) libp->para[0].ref;
   const APReweight2D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* APReweight3D */
static int G__ReweightUtils_Dict_208_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight3D[n];
     } else {
       p = new((void*) gvp) APReweight3D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight3D;
     } else {
       p = new((void*) gvp) APReweight3D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight3D(
(TH3*) G__int(libp->para[0]), (TH3*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) APReweight3D(
(TH3*) G__int(libp->para[0]), (TH3*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweight3D((TH3*) G__int(libp->para[0]), (TH3*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) APReweight3D((TH3*) G__int(libp->para[0]), (TH3*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((APReweight3D*) G__getstructoffset())->ReadEfficiency((TH3*) G__int(libp->para[0]), (TH3*) G__int(libp->para[1])
, (TH3*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((APReweight3D*) G__getstructoffset())->ReadEfficiency((TH3*) G__int(libp->para[0]), (TH3*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight3D*) G__getstructoffset())->GetBinWeight((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight3D*) G__getstructoffset())->GetWeight((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APReweight3D*) G__getstructoffset())->GetSampleScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweight3D*) G__getstructoffset())->NBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweight3D*) G__getstructoffset())->GetBinX((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweight3D*) G__getstructoffset())->GetBinY((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweight3D*) G__getstructoffset())->GetBinZ((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight3D*) G__getstructoffset())->GetDenominatorHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweight3D*) G__getstructoffset())->GetNumeratorHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APReweight3D*) G__getstructoffset())->SetSystUncert((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((APReweight3D*) G__getstructoffset())->SetQuietMode((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((APReweight3D*) G__getstructoffset())->SetQuietMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) APReweight3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweight3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) APReweight3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      APReweight3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APReweight3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweight3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweight3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweight3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_208_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweight3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_208_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APReweight3D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APReweight3D(*(APReweight3D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APReweight3D G__TAPReweight3D;
static int G__ReweightUtils_Dict_208_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APReweight3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APReweight3D*) (soff+(sizeof(APReweight3D)*i)))->~G__TAPReweight3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APReweight3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APReweight3D*) (soff))->~G__TAPReweight3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReweightUtils_Dict_208_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweight3D* dest = (APReweight3D*) G__getstructoffset();
   *dest = *(APReweight3D*) libp->para[0].ref;
   const APReweight3D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* APReweightND */
static int G__ReweightUtils_Dict_449_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweightND* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweightND[n];
     } else {
       p = new((void*) gvp) APReweightND[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweightND;
     } else {
       p = new((void*) gvp) APReweightND;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweightND* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweightND(
(THnSparse*) G__int(libp->para[0]), (THnSparse*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) APReweightND(
(THnSparse*) G__int(libp->para[0]), (THnSparse*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APReweightND((THnSparse*) G__int(libp->para[0]), (THnSparse*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) APReweightND((THnSparse*) G__int(libp->para[0]), (THnSparse*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((APReweightND*) G__getstructoffset())->ReadEfficiency((THnSparse*) G__int(libp->para[0]), (THnSparse*) G__int(libp->para[1])
, (THnSparse*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((APReweightND*) G__getstructoffset())->ReadEfficiency((THnSparse*) G__int(libp->para[0]), (THnSparse*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((APReweightND*) G__getstructoffset())->GetBinWeight((const int*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((APReweightND*) G__getstructoffset())->GetWeight((double*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APReweightND*) G__getstructoffset())->GetSampleScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const APReweightND*) G__getstructoffset())->NBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweightND*) G__getstructoffset())->GetDenominatorHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const APReweightND*) G__getstructoffset())->GetNumeratorHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APReweightND*) G__getstructoffset())->SetSystUncert((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((APReweightND*) G__getstructoffset())->SetQuietMode((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((APReweightND*) G__getstructoffset())->SetQuietMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) APReweightND::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweightND::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) APReweightND::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      APReweightND::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APReweightND*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweightND::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweightND::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APReweightND::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_449_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APReweightND::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_449_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APReweightND* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APReweightND(*(APReweightND*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APReweightND G__TAPReweightND;
static int G__ReweightUtils_Dict_449_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APReweightND*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APReweightND*) (soff+(sizeof(APReweightND)*i)))->~G__TAPReweightND();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APReweightND*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APReweightND*) (soff))->~G__TAPReweightND();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReweightUtils_Dict_449_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APReweightND* dest = (APReweightND*) G__getstructoffset();
   *dest = *(APReweightND*) libp->para[0].ref;
   const APReweightND& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* APWeightHist */
static int G__ReweightUtils_Dict_492_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APWeightHist* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new APWeightHist(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const int) G__int(libp->para[2]), (const float) G__double(libp->para[3])
, (const float) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) APWeightHist(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const int) G__int(libp->para[2]), (const float) G__double(libp->para[3])
, (const float) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APWeightHist* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightHist[n];
     } else {
       p = new((void*) gvp) APWeightHist[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightHist;
     } else {
       p = new((void*) gvp) APWeightHist;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((APWeightHist*) G__getstructoffset())->Fill((const double) G__double(libp->para[0]), (APWeightEntry*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((APWeightHist*) G__getstructoffset())->GetGraphStatUncert((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((APWeightHist*) G__getstructoffset())->GetGraphStatUncert());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((APWeightHist*) G__getstructoffset())->GetGraphSystUncert((bool) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((APWeightHist*) G__getstructoffset())->GetGraphSystUncert((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((APWeightHist*) G__getstructoffset())->GetGraphSystUncert());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((APWeightHist*) G__getstructoffset())->ComputeGraph((const int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((APWeightHist*) G__getstructoffset())->ComputeGraph();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((APWeightHist*) G__getstructoffset())->GetBinPDF((unsigned int) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((APWeightHist*) G__getstructoffset())->GetBinPDF((unsigned int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) APWeightHist::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APWeightHist::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) APWeightHist::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      APWeightHist::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightHist*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APWeightHist::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APWeightHist::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APWeightHist::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_492_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APWeightHist::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_492_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APWeightHist* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APWeightHist(*(APWeightHist*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APWeightHist G__TAPWeightHist;
static int G__ReweightUtils_Dict_492_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APWeightHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APWeightHist*) (soff+(sizeof(APWeightHist)*i)))->~G__TAPWeightHist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APWeightHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APWeightHist*) (soff))->~G__TAPWeightHist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* APEvtWeight */
static int G__ReweightUtils_Dict_497_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APEvtWeight* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new APEvtWeight((APEvtWeight::ObjType) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) APEvtWeight((APEvtWeight::ObjType) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APEvtWeight*) G__getstructoffset())->AddWeightToEvt((APWeightEntry*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APEvtWeight*) G__getstructoffset())->GetWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APEvtWeight*) G__getstructoffset())->GetStdDev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APEvtWeight*) G__getstructoffset())->GetVariance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APEvtWeight*) G__getstructoffset())->GetSysUncert());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APEvtWeight*) G__getstructoffset())->GetSysVariance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<APWeightEntry*>* pobj;
         vector<APWeightEntry*> xobj = ((APEvtWeight*) G__getstructoffset())->GetWeightObjects((APEvtWeight::ObjType) G__int(libp->para[0]));
         pobj = new vector<APWeightEntry*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((APEvtWeight*) G__getstructoffset())->NEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((APEvtWeight*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) APEvtWeight::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APEvtWeight::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) APEvtWeight::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      APEvtWeight::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APEvtWeight*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APEvtWeight::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APEvtWeight::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APEvtWeight::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_497_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APEvtWeight::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_497_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APEvtWeight* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APEvtWeight(*(APEvtWeight*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APEvtWeight G__TAPEvtWeight;
static int G__ReweightUtils_Dict_497_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APEvtWeight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APEvtWeight*) (soff+(sizeof(APEvtWeight)*i)))->~G__TAPEvtWeight();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APEvtWeight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APEvtWeight*) (soff))->~G__TAPEvtWeight();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReweightUtils_Dict_497_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APEvtWeight* dest = (APEvtWeight*) G__getstructoffset();
   *dest = *(APEvtWeight*) libp->para[0].ref;
   const APEvtWeight& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* APWeightSum */
static int G__ReweightUtils_Dict_499_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APWeightSum* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightSum[n];
     } else {
       p = new((void*) gvp) APWeightSum[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightSum;
     } else {
       p = new((void*) gvp) APWeightSum;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightSum*) G__getstructoffset())->AddWeightToEvt((APWeightEntry*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((APWeightSum*) G__getstructoffset())->FinishEvt((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((APWeightSum*) G__getstructoffset())->FinishEvt();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((APWeightSum*) G__getstructoffset())->AddEvt((APEvtWeight*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((APWeightSum*) G__getstructoffset())->AddEvt((APEvtWeight*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightSum*) G__getstructoffset())->GetSumW());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightSum*) G__getstructoffset())->GetSumW2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightSum*) G__getstructoffset())->GetSumWExternal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APWeightSum*) G__getstructoffset())->GetStdDev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APWeightSum*) G__getstructoffset())->GetVariance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APWeightSum*) G__getstructoffset())->GetVarianceNoCorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APWeightSum*) G__getstructoffset())->GetVarianceFullCorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const APWeightSum*) G__getstructoffset())->GetSysUncert());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const APWeightSum*) G__getstructoffset())->GetKUnweighted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((APWeightSum*) G__getstructoffset())->GetUncertHistogram((APReweightBase*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<THnSparse*>* pobj;
         vector<THnSparse*> xobj = ((APWeightSum*) G__getstructoffset())->GetAllUncertHistograms();
         pobj = new vector<THnSparse*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) APWeightSum::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APWeightSum::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) APWeightSum::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      APWeightSum::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightSum*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APWeightSum::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APWeightSum::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APWeightSum::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_499_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APWeightSum::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_499_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APWeightSum* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APWeightSum(*(APWeightSum*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APWeightSum G__TAPWeightSum;
static int G__ReweightUtils_Dict_499_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APWeightSum*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APWeightSum*) (soff+(sizeof(APWeightSum)*i)))->~G__TAPWeightSum();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APWeightSum*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APWeightSum*) (soff))->~G__TAPWeightSum();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReweightUtils_Dict_499_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APWeightSum* dest = (APWeightSum*) G__getstructoffset();
   *dest = *(APWeightSum*) libp->para[0].ref;
   const APWeightSum& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* APWeightSumEnsemble */
static int G__ReweightUtils_Dict_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APWeightSumEnsemble* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightSumEnsemble[n];
     } else {
       p = new((void*) gvp) APWeightSumEnsemble[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new APWeightSumEnsemble;
     } else {
       p = new((void*) gvp) APWeightSumEnsemble;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightSumEnsemble*) G__getstructoffset())->SetRelPrecision((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightSumEnsemble*) G__getstructoffset())->AddWeightToEvt((APWeightEntry*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((APWeightSumEnsemble*) G__getstructoffset())->FinishEvt((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((APWeightSumEnsemble*) G__getstructoffset())->FinishEvt();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APWeightSumEnsemble*) G__getstructoffset())->GetQuantile((const double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APWeightSumEnsemble*) G__getstructoffset())->GetRandom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APWeightSumEnsemble*) G__getstructoffset())->GetEnsemblePDFMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((APWeightSumEnsemble*) G__getstructoffset())->GetEnsemblePDFStdDev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((APWeightSumEnsemble*) G__getstructoffset())->GetPDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) APWeightSumEnsemble::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APWeightSumEnsemble::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) APWeightSumEnsemble::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      APWeightSumEnsemble::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((APWeightSumEnsemble*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APWeightSumEnsemble::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APWeightSumEnsemble::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) APWeightSumEnsemble::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReweightUtils_Dict_505_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) APWeightSumEnsemble::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReweightUtils_Dict_505_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   APWeightSumEnsemble* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new APWeightSumEnsemble(*(APWeightSumEnsemble*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef APWeightSumEnsemble G__TAPWeightSumEnsemble;
static int G__ReweightUtils_Dict_505_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (APWeightSumEnsemble*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((APWeightSumEnsemble*) (soff+(sizeof(APWeightSumEnsemble)*i)))->~G__TAPWeightSumEnsemble();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (APWeightSumEnsemble*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((APWeightSumEnsemble*) (soff))->~G__TAPWeightSumEnsemble();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReweightUtils_Dict_505_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   APWeightSumEnsemble* dest = (APWeightSumEnsemble*) G__getstructoffset();
   *dest = *(APWeightSumEnsemble*) libp->para[0].ref;
   const APWeightSumEnsemble& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* APWeightEntry */

/* APReweightBase */

/* APReweight */

/* APReweight2D */

/* APReweight3D */

/* APReweightND */

/* APWeightHist */

/* APEvtWeight */

/* APWeightSum */

/* APWeightSumEnsemble */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncReweightUtils_Dict {
 public:
  G__Sizep2memfuncReweightUtils_Dict(): p(&G__Sizep2memfuncReweightUtils_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncReweightUtils_Dict::*p)();
};

size_t G__get_sizep2memfuncReweightUtils_Dict()
{
  G__Sizep2memfuncReweightUtils_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceReweightUtils_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase))) {
     APReweightBase *G__Lderived;
     G__Lderived=(APReweightBase*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight))) {
     APReweight *G__Lderived;
     G__Lderived=(APReweight*)0x1000;
     {
       APReweightBase *G__Lpbase=(APReweightBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight),G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D))) {
     APReweight2D *G__Lderived;
     G__Lderived=(APReweight2D*)0x1000;
     {
       APReweightBase *G__Lpbase=(APReweightBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D),G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D))) {
     APReweight3D *G__Lderived;
     G__Lderived=(APReweight3D*)0x1000;
     {
       APReweightBase *G__Lpbase=(APReweightBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D),G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND))) {
     APReweightND *G__Lderived;
     G__Lderived=(APReweightND*)0x1000;
     {
       APReweightBase *G__Lpbase=(APReweightBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND),G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist))) {
     APWeightHist *G__Lderived;
     G__Lderived=(APWeightHist*)0x1000;
     {
       TH1D *G__Lpbase=(TH1D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TH1 *G__Lpbase=(TH1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArrayD *G__Lpbase=(TArrayD*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TArrayD),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArray *G__Lpbase=(TArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight))) {
     APEvtWeight *G__Lderived;
     G__Lderived=(APEvtWeight*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum))) {
     APWeightSum *G__Lderived;
     G__Lderived=(APWeightSum*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble))) {
     APWeightSumEnsemble *G__Lderived;
     G__Lderived=(APWeightSumEnsemble*)0x1000;
     {
       APWeightSum *G__Lpbase=(APWeightSum*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble),G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble),G__get_linked_tagnum(&G__ReweightUtils_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableReweightUtils_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<APWeightEntry*>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<APWeightEntry*> >",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<APWeightEntry*> >",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<APWeightEntry*,allocator<APWeightEntry*> > >",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::vector<APWeightEntry*> > >",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<APWeightEntry*> > >",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<APWeightEntry*,allocator<APWeightEntry*> >,allocator<vector<APWeightEntry*,allocator<APWeightEntry*> > > > >",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::vector<int>,APWeightEntry*>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_maplEvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUcOlesslEvectorlEintcOallocatorlEintgRsPgRsPgRcOallocatorlEpairlEconstsPvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<vector<int>,APWeightEntry*>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_maplEvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUcOlesslEvectorlEintcOallocatorlEintgRsPgRsPgRcOallocatorlEpairlEconstsPvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<vector<int,allocator<int> >,APWeightEntry*>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_maplEvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUcOlesslEvectorlEintcOallocatorlEintgRsPgRsPgRcOallocatorlEpairlEconstsPvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<vector<int,allocator<int> >,APWeightEntry*,less<vector<int,allocator<int> > > >",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_maplEvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUcOlesslEvectorlEintcOallocatorlEintgRsPgRsPgRcOallocatorlEpairlEconstsPvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TAxis*>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETAxismUcOallocatorlETAxismUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETAxismUcOallocatorlETAxismUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETAxismUcOallocatorlETAxismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETAxismUcOallocatorlETAxismUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETAxismUcOallocatorlETAxismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1D*>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<THnSparse*>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* APWeightEntry */
static void G__setup_memvarAPWeightEntry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry));
   { APWeightEntry *p; p=(APWeightEntry*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_val_denominator=",0,"!< Holds the value of original denominator. */");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_val_numerator=",0,"!< Holds the value of original numerator. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_expectancy_val=",0,"!< Holds the Expectancy value of efficiency/weight. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_variance=",0,"!< Holds Variance of efficiency/weight (classical binomial/poisson model). */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_stat_uncert_low=",0,"!< Holds lower bound of asymmetric statistical uncertainty. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_stat_uncert_high=",0,"!< Holds upper bound of asymmetric statistical uncertainty. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_sys_uncert=",0,"!< Holds absolute systematic uncertainty value of efficiency/weight. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_sys_uncert2=",0,"!< Holds absolute systematic uncertainty squared value of efficiency/weight. */");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_is_trig=",0,"!< Flag, set to true if weight entry is trigger based. */");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_is_nan=",0,"!< Flag, set to true if denominator is zero. */");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_ID=",0,"!< Holds internal ID (used by APReweight/APReweight2D/APReweight3D/APReweightND). */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_integral=",0,"!< Holds the integral of the probability distribution. */");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"_pdf=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"_bins=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"_cumul=",0,"!< Histograms to hold the probability distribution and the cumulative distribution. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1F),-1,-1,4,"_hist=",0,"!< Holds the TH1F instance from the arrays if computed. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_coords=",0,"!< Holds the coordinates of the current entry in the original histogram. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_n_dim_origin=",0,"!< Holds the amount of dimensions and bins per axis in the original histogram. */");
   }
   G__tag_memvar_reset();
}


   /* APReweightBase */
static void G__setup_memvarAPReweightBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase));
   { APReweightBase *p; p=(APReweightBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"_ID=",0,"!< Holds the unique ID for assignment of APWeightEntries to source. */");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-2,2,"_NID=",0,"!< Holds the overall number of assigned IDs. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_scale=",0,"!< Holds the scale factor that was calculated from sample sizes upon instantiation. */");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_isTrig=",0,"!< Flag to determine if the class holds trigger efficiencies or \"simple\" MC weights. */");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_isQuiet=",0,"!< Flag to turn off messages. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_syst_uncert_global=",0,"!< Holds the global relative (!) systematic uncertainty of all efficiencies/weights. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry),-1,-1,2,"_empty_weight=",0,"!< Dummy weight (equals 0.) to return if value out of range is provided. */");
   }
   G__tag_memvar_reset();
}


   /* APReweight */
static void G__setup_memvarAPReweight(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight));
   { APReweight *p; p=(APReweight*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1D),-1,-1,4,"_denominator_hist=",0,"!< Holds the original denominator histogram. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1D),-1,-1,4,"_numerator_hist=",0,"!< Holds the original numerator histogram. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR),G__defined_typename("vector<APWeightEntry*>"),-1,4,"_weights=",0,"!< Holds all weight entries. */");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_n_bins=",0,"!< Holds the amount of bins. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TAxis),-1,-1,4,"_axis=",0,"!< Holds the axis of the APReweight instance (from input histograms). */");
   }
   G__tag_memvar_reset();
}


   /* APReweight2D */
static void G__setup_memvarAPReweight2D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D));
   { APReweight2D *p; p=(APReweight2D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH2D),-1,-1,4,"_denominator_hist=",0,"!< Holds the original denominator histogram. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH2D),-1,-1,4,"_numerator_hist=",0,"!< Holds the original numerator histogram. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<APWeightEntry*> >"),-1,4,"_weights=",0,"!< Holds all weight entries. */");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_n_bins_x=",0,"!< Holds the amount of bins in X. */");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_n_bins_y=",0,"!< Holds the amount of bins in Y. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TAxis),-1,-1,4,"_axis_x=",0,"!< Holds the X axis of the APReweight2D instance (from input histograms). */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TAxis),-1,-1,4,"_axis_y=",0,"!< Holds the Y axis of the APReweight2D instance (from input histograms). */");
   }
   G__tag_memvar_reset();
}


   /* APReweight3D */
static void G__setup_memvarAPReweight3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D));
   { APReweight3D *p; p=(APReweight3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH3D),-1,-1,4,"_denominator_hist=",0,"!< Holds the original denominator histogram. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH3D),-1,-1,4,"_numerator_hist=",0,"!< Holds the original numerator histogram. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<std::vector<APWeightEntry*> > >"),-1,4,"_weights=",0,"!< Holds all weight entries. */");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_n_bins_x=",0,"!< Holds the amount of bins in X. */");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_n_bins_y=",0,"!< Holds the amount of bins in Y. */");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_n_bins_z=",0,"!< Holds the amount of bins in Z. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TAxis),-1,-1,4,"_axis_x=",0,"!< Holds the X axis of the APReweight3D instance (from input histograms). */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TAxis),-1,-1,4,"_axis_y=",0,"!< Holds the Y axis of the APReweight3D instance (from input histograms). */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TAxis),-1,-1,4,"_axis_z=",0,"!< Holds the Z axis of the APReweight3D instance (from input histograms). */");
   }
   G__tag_memvar_reset();
}


   /* APReweightND */
static void G__setup_memvarAPReweightND(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND));
   { APReweightND *p; p=(APReweightND*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_n_dim=",0,"!< Holds the amount of dimensions. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_THnSparse),-1,-1,4,"_denominator_hist=",0,"!< Holds the original denominator histogram. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_THnSparse),-1,-1,4,"_numerator_hist=",0,"!< Holds the original numerator histogram. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_maplEvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUcOlesslEvectorlEintcOallocatorlEintgRsPgRsPgRcOallocatorlEpairlEconstsPvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUgRsPgRsPgR),G__defined_typename("map<std::vector<int>,APWeightEntry*>"),-1,4,"_weights=",0,"!< Holds all weight entries. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETAxismUcOallocatorlETAxismUgRsPgR),G__defined_typename("vector<TAxis*>"),-1,4,"_axes=",0,"!< Holds all axes of the APReweightND instance (from input histograms). */");
   }
   G__tag_memvar_reset();
}


   /* APWeightHist */
static void G__setup_memvarAPWeightHist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist));
   { APWeightHist *p; p=(APWeightHist*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_computed_entries=",0,"!< Flag to store information about the status of the computation. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<APWeightEntry*> >"),-1,4,"_binned_weights=",0,"!< Holds all filled weights weights as pointers. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR),G__defined_typename("vector<TH1D*>"),-1,4,"_bin_dists=",0,"!< Holds the PDFs for the individual bins. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"fSumSys2=",0,"!< Holds the variances of systematic uncertainties for the individual bins. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TGraphAsymmErrors),-1,-1,4,"_graph_stat=",0,"!< Holds the histogram with statistical uncertainties. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TGraphErrors),-1,-1,4,"_graph_syst=",0,"!< Holds the histogram with systematic uncertainties. */");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_prec=",0,"!< Holds the calculation precision (= amount of histograms & binning factor). */");
   }
   G__tag_memvar_reset();
}


   /* APEvtWeight */
static void G__setup_memvarAPEvtWeight(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight));
   { APEvtWeight *p; p=(APEvtWeight*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kMuon=%lldLL",(long long)APEvtWeight::kMuon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kTau=%lldLL",(long long)APEvtWeight::kTau).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kElectron=%lldLL",(long long)APEvtWeight::kElectron).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kJet=%lldLL",(long long)APEvtWeight::kJet).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kMuonMO=%lldLL",(long long)APEvtWeight::kMuonMO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kTauMO=%lldLL",(long long)APEvtWeight::kTauMO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kElectronMO=%lldLL",(long long)APEvtWeight::kElectronMO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kJetMO=%lldLL",(long long)APEvtWeight::kJetMO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kDiMuon=%lldLL",(long long)APEvtWeight::kDiMuon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kDiTau=%lldLL",(long long)APEvtWeight::kDiTau).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kDiElectron=%lldLL",(long long)APEvtWeight::kDiElectron).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kDiJet=%lldLL",(long long)APEvtWeight::kDiJet).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kANDed=%lldLL",(long long)APEvtWeight::kANDed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kORed=%lldLL",(long long)APEvtWeight::kORed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kMOORed=%lldLL",(long long)APEvtWeight::kMOORed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-2,1,G__FastAllocString(4096).Format("kMOANDed=%lldLL",(long long)APEvtWeight::kMOANDed).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<APWeightEntry*> >"),-1,2,"_current_evt_weights=",0,"!< Holds the weights for muons, electrons and jets in the current event. */");
   G__memvar_setup((void*)0,107,0,0,-1,-1,-1,2,"_n_entries=",0,"!< Holds the original amount of unweighted counts (\"sum of 1's\"). */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_k_evt_weight=",0,"!< Holds the event weight. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_variance=",0,"!< Holds the variance. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_variance_sys=",0,"!< Holds the systematic variance (from systematics assigned to weights). */");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_isComputed=",0,"!< Flag if calculation has already been performed for current set of input weights. */");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType),-1,-1,2,"_type=",0,"!< Holds the object type of the event weight (muon, electron, jet or combined). */");
   }
   G__tag_memvar_reset();
}


   /* APWeightSum */
static void G__setup_memvarAPWeightSum(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum));
   { APWeightSum *p; p=(APWeightSum*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR),G__defined_typename("vector<APWeightEntry*>"),-1,2,"_current_evt_weights=",0,"!< Holds the expectancy values of the weights in the current event. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgR),G__defined_typename("vector<THnSparse*>"),-1,2,"_linear_uncert=",0,"!< Holds all histograms for uncertainties. */");
   G__memvar_setup((void*)0,107,0,0,-1,-1,-1,2,"_k_evt_orig=",0,"!< Holds the original amount of unweighted counts (\"sum of 1's\"). */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_k_evt_weight=",0,"!< Holds the sum of weights. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_k_evt_weight2=",0,"!< Holds the sum of squared weights. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_k_evt_weight_external=",0,"!< Holds the sum of external weights (no trigger weighting). */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_variance=",0,"!< Holds the variance. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_variance_nocorr=",0,"!< Holds the variance, assuming no correlations. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_variance_fullcorr=",0,"!< Holds the variance, assuming full correlation amongst objects. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_variance_sys=",0,"!< Holds the systematic variance (from systematics assigned to weights). */");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_isComputed=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* APWeightSumEnsemble */
static void G__setup_memvarAPWeightSumEnsemble(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble));
   { APWeightSumEnsemble *p; p=(APWeightSumEnsemble*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<APWeightEntry*> >"),-1,4,"_weight_vector=",0,"!< Holds the weight objects (dim2) for each event (dim1). */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR),G__defined_typename("vector<APWeightEntry*>"),-1,4,"_current_evt_pdfs=",0,"!< Holds the weight objects for the current event. */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_ext_weights=",0,"!< Holds the external event weight provided when finishing the respective events. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_rel_prec=",0,"!< Holds the relative precision of the gaussian fit to stop the ensemble test at. */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1F),-1,-1,4,"_pdf=",0,"!< Holds the TH1F instance from the arrays if computed. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_ensemble_mode=",0,"!< Holds the Mode (= sum of weights from PDF) from ensemble test. */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_ensemble_sigma=",0,"!< Holds the standard deviation from ensemble test. */");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_ensembleTest_done=",0,"!< Flag if the ensemble test has been performed with the current set of weights. */");
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarReweightUtils_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncAPWeightEntry(void) {
   /* APWeightEntry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry));
   G__memfunc_setup("APWeightEntry",1291,G__ReweightUtils_Dict_169_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 0, 1, 1, 0, "", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("APWeightEntry",1291,G__ReweightUtils_Dict_169_0_2, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 4, 1, 1, 0, 
"h - - 0 - val_denominator h - - 0 - val_numerator "
"d - - 0 - scale g - - 0 'false' isTrig", "!< Constructor, takes n_denom, n_num, the relative scale of the used samples or an additional user scale and a bool if the entry is a trigger weight. */", (void*) NULL, 0);
   G__memfunc_setup("ReadEfficiency",1393,G__ReweightUtils_Dict_169_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - efficiency d - - 0 - err_low "
"d - - 0 - err_high", "!< Read efficiencies and upper/lower uncertainty (if numerator/denominator not applicable (e.g. Bootstrap)). */", (void*) NULL, 0);
   G__memfunc_setup("SetCoordinates",1447,G__ReweightUtils_Dict_169_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >' 'vector<int>' 0 - coords u 'vector<int,allocator<int> >' 'vector<int>' 0 - n_dim_origin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValDenominator",1731,G__ReweightUtils_Dict_169_0_5, 104, -1, -1, 0, 0, 1, 1, 8, "", "!< Get value of original denominator. */", (void*) NULL, 0);
   G__memfunc_setup("GetValNumerator",1536,G__ReweightUtils_Dict_169_0_6, 104, -1, -1, 0, 0, 1, 1, 8, "", "!< Get value of original numerator. */", (void*) NULL, 0);
   G__memfunc_setup("GetExpectancy",1332,G__ReweightUtils_Dict_169_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get Expectancy value of efficiency/weight. */", (void*) NULL, 0);
   G__memfunc_setup("GetVariance",1097,G__ReweightUtils_Dict_169_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get Variance of efficiency/weight (classical binomial/poisson model). */", (void*) NULL, 0);
   G__memfunc_setup("GetStatUncertLow",1631,G__ReweightUtils_Dict_169_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get lower bound of asymmetric statistical uncertainty. */", (void*) NULL, 0);
   G__memfunc_setup("GetStatUncertHigh",1709,G__ReweightUtils_Dict_169_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get upper bound of asymmetric statistical uncertainty. */", (void*) NULL, 0);
   G__memfunc_setup("GetSysUncert",1232,G__ReweightUtils_Dict_169_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get absolute systematic uncertainty value of efficiency/weight. */", (void*) NULL, 0);
   G__memfunc_setup("GetSysUncert2",1282,G__ReweightUtils_Dict_169_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get absolute systematic uncertainty squared value of efficiency/weight. */", (void*) NULL, 0);
   G__memfunc_setup("GetRandom",897,G__ReweightUtils_Dict_169_0_13, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Get random number from PDF. */", (void*) NULL, 0);
   G__memfunc_setup("GetPDF",506,G__ReweightUtils_Dict_169_0_14, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1F), -1, 0, 0, 1, 1, 0, "", "!< Returns the calculated PDF. */", (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__ReweightUtils_Dict_169_0_15, 104, -1, -1, 0, 0, 1, 1, 8, "", "!< Returns the internal ID (used by APReweight/APReweight2D/APReweight3D/APReweightND). */", (void*) NULL, 0);
   G__memfunc_setup("GetCoords",906,G__ReweightUtils_Dict_169_0_16, 117, G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", "!< Returns the coordinates of the current entry in the original histogram. */", (void*) NULL, 0);
   G__memfunc_setup("GetOriginalDimensions",2158,G__ReweightUtils_Dict_169_0_17, 117, G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", "!< Returns the dimensions and amounts of bins for each dimension of the original histogram. */", (void*) NULL, 0);
   G__memfunc_setup("IsNaN",441,G__ReweightUtils_Dict_169_0_18, 103, -1, -1, 0, 0, 1, 1, 8, "", "!< Returns true if instance is NaN. */", (void*) NULL, 0);
   G__memfunc_setup("IsTrig",594,G__ReweightUtils_Dict_169_0_19, 103, -1, -1, 0, 0, 1, 1, 8, "", "!< Returns true if instance is trigger based. */", (void*) NULL, 0);
   G__memfunc_setup("SetSystUncert",1360,G__ReweightUtils_Dict_169_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rel_uncert", "!< Set the relative (!) systematic uncertainty for the efficiency/weight. */", (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__ReweightUtils_Dict_169_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - id", "!< Set the internal ID (used by APReweight/APReweight2D/APReweight3D/APReweightND). */", (void*) NULL, 0);
   G__memfunc_setup("_CreateHist",1099,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "!< Creates a TH1F instance from the arrays if necessary. */", (void*) NULL, 0);
   G__memfunc_setup("_ComputeCum",1121,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "!< Calculates the cumulative function of the pdf if necessary. */", (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("APWeightEntry", 1291, G__ReweightUtils_Dict_169_0_24, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 1, 1, 1, 0, "u 'APWeightEntry' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APWeightEntry", 1417, G__ReweightUtils_Dict_169_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReweightUtils_Dict_169_0_26, (int) ('u'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 1, 1, 1, 1, 0, "u 'APWeightEntry' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAPReweightBase(void) {
   /* APReweightBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase));
   G__memfunc_setup("APReweightBase",1355,G__ReweightUtils_Dict_189_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase), -1, 0, 0, 1, 1, 0, "", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__ReweightUtils_Dict_189_0_2, 104, -1, -1, 0, 0, 1, 1, 8, "", "!< Returns the unique ID for assignment of APWeightEntries to source. */", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReweightUtils_Dict_189_0_3, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&APReweightBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReweightUtils_Dict_189_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweightBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReweightUtils_Dict_189_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&APReweightBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReweightUtils_Dict_189_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&APReweightBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReweightUtils_Dict_189_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReweightUtils_Dict_189_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweightBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReweightUtils_Dict_189_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweightBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReweightUtils_Dict_189_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweightBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReweightUtils_Dict_189_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweightBase::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("APReweightBase", 1355, G__ReweightUtils_Dict_189_0_15, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase), -1, 0, 1, 1, 1, 0, "u 'APReweightBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APReweightBase", 1481, G__ReweightUtils_Dict_189_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReweightUtils_Dict_189_0_17, (int) ('u'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightBase), -1, 1, 1, 1, 1, 0, "u 'APReweightBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAPReweight(void) {
   /* APReweight */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight));
   G__memfunc_setup("APReweight",976,G__ReweightUtils_Dict_194_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight), -1, 0, 0, 1, 1, 0, "", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("APReweight",976,G__ReweightUtils_Dict_194_0_2, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight), -1, 0, 8, 1, 1, 0, 
"U 'TTree' - 0 - denominator u 'string' - 0 - denominator_branch "
"U 'TTree' - 0 - numerator u 'string' - 0 - numerator_branch "
"h - - 0 - n_bins d - - 0 - x_min "
"d - - 0 - x_max g - - 0 'false' isTrig", "!< Constructor for whole branches (numerator/denominator) to read in. */", (void*) NULL, 0);
   G__memfunc_setup("APReweight",976,G__ReweightUtils_Dict_194_0_3, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight), -1, 0, 6, 1, 1, 0, 
"u 'vector<double,allocator<double> >' 'vector<double>' 0 - denominator u 'vector<double,allocator<double> >' 'vector<double>' 0 - numerator "
"h - - 0 - n_bins d - - 0 - x_min "
"d - - 0 - x_max g - - 0 'false' isTrig", "!< Constructor for vectors (numerator/denominator) to read in. */", (void*) NULL, 0);
   G__memfunc_setup("APReweight",976,G__ReweightUtils_Dict_194_0_4, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight), -1, 0, 3, 1, 1, 0, 
"U 'TH1' - 0 - denominator_in U 'TH1' - 0 - numerator_in "
"g - - 0 'false' isTrig", "!< Constructor for histograms (numerator/denominator) to read in. */", (void*) NULL, 0);
   G__memfunc_setup("ReadEfficiency",1393,G__ReweightUtils_Dict_194_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH1' - 0 - efficiency_in U 'TH1' - 0 - err_low_in "
"U 'TH1' - 0 '0' err_high_in", "!< Read efficiencies and upper/lower uncertainty (if numerator/denominator not applicable (e.g. Bootstrap)). */", (void*) NULL, 0);
   G__memfunc_setup("GetBinWeight",1185,G__ReweightUtils_Dict_194_0_6, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 1, 1, 1, 8, "h - - 0 - bin", "!< Get Weight entry for a given bin number. */", (void*) NULL, 0);
   G__memfunc_setup("GetWeight",904,G__ReweightUtils_Dict_194_0_7, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 1, 1, 1, 8, "d - - 0 - value", "!< Get Weight entry for a given value. */", (void*) NULL, 0);
   G__memfunc_setup("GetSampleScale",1386,G__ReweightUtils_Dict_194_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get scale factor that was calculated from sample sizes upon instantiation. */", (void*) NULL, 0);
   G__memfunc_setup("NBins",474,G__ReweightUtils_Dict_194_0_9, 104, -1, -1, 0, 0, 1, 1, 8, "", "!< Get amount of bins. */", (void*) NULL, 0);
   G__memfunc_setup("GetBin",569,G__ReweightUtils_Dict_194_0_10, 104, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - value", "!< Get bin number that corresponds to a given value. */", (void*) NULL, 0);
   G__memfunc_setup("GetDenominatorHist",1848,G__ReweightUtils_Dict_194_0_11, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1D), -1, 0, 0, 1, 1, 8, "", "!< Get original denominator histogram. */", (void*) NULL, 0);
   G__memfunc_setup("GetNumeratorHist",1653,G__ReweightUtils_Dict_194_0_12, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1D), -1, 0, 0, 1, 1, 8, "", "!< Get original numerator histogram. */", (void*) NULL, 0);
   G__memfunc_setup("SetSystUncert",1360,G__ReweightUtils_Dict_194_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rel_uncert", "!< Set the global relative (!) systematic uncertainty of all efficiencies/weights. */", (void*) NULL, 0);
   G__memfunc_setup("SetQuietMode",1209,G__ReweightUtils_Dict_194_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' isQuiet", "!< Sets the flag to turn off messages. */", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReweightUtils_Dict_194_0_15, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&APReweight::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReweightUtils_Dict_194_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweight::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReweightUtils_Dict_194_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&APReweight::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReweightUtils_Dict_194_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&APReweight::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReweightUtils_Dict_194_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReweightUtils_Dict_194_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweight::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReweightUtils_Dict_194_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweight::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReweightUtils_Dict_194_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweight::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReweightUtils_Dict_194_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweight::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("APReweight", 976, G__ReweightUtils_Dict_194_0_27, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight), -1, 0, 1, 1, 1, 0, "u 'APReweight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APReweight", 1102, G__ReweightUtils_Dict_194_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReweightUtils_Dict_194_0_29, (int) ('u'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight), -1, 1, 1, 1, 1, 0, "u 'APReweight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAPReweight2D(void) {
   /* APReweight2D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D));
   G__memfunc_setup("APReweight2D",1094,G__ReweightUtils_Dict_201_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D), -1, 0, 0, 1, 1, 0, "", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("APReweight2D",1094,G__ReweightUtils_Dict_201_0_2, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D), -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - denominator_in U 'TH2' - 0 - numerator_in "
"g - - 0 'false' isTrig", "!< Constructor for histograms (numerator/denominator) to read in. */", (void*) NULL, 0);
   G__memfunc_setup("ReadEfficiency",1393,G__ReweightUtils_Dict_201_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH2' - 0 - efficiency_in U 'TH2' - 0 - err_low_in "
"U 'TH2' - 0 '0' err_high_in", "!< Read efficiencies and upper/lower uncertainty (if numerator/denominator not applicable (e.g. Bootstrap)). */", (void*) NULL, 0);
   G__memfunc_setup("GetBinWeight",1185,G__ReweightUtils_Dict_201_0_4, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 2, 1, 1, 8, 
"h - - 0 - bin_x h - - 0 - bin_y", "!< Get Weight entry for a given pair of bin numbers. */", (void*) NULL, 0);
   G__memfunc_setup("GetWeight",904,G__ReweightUtils_Dict_201_0_5, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 2, 1, 1, 8, 
"d - - 0 - value_x d - - 0 - value_y", "!< Get Weight entry for a given pair of values. */", (void*) NULL, 0);
   G__memfunc_setup("GetSampleScale",1386,G__ReweightUtils_Dict_201_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get scale factor that was calculated from sample sizes upon instantiation. */", (void*) NULL, 0);
   G__memfunc_setup("NBins",474,G__ReweightUtils_Dict_201_0_7, 104, -1, -1, 0, 0, 1, 1, 8, "", "!< Get amount of bins. */", (void*) NULL, 0);
   G__memfunc_setup("GetBinX",657,G__ReweightUtils_Dict_201_0_8, 104, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - value_x", "!< Get bin number in X that corresponds to a given value. */", (void*) NULL, 0);
   G__memfunc_setup("GetBinY",658,G__ReweightUtils_Dict_201_0_9, 104, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - value_y", "!< Get bin number in Y that corresponds to a given value. */", (void*) NULL, 0);
   G__memfunc_setup("GetDenominatorHist",1848,G__ReweightUtils_Dict_201_0_10, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH2D), -1, 0, 0, 1, 1, 8, "", "!< Get original denominator histogram. */", (void*) NULL, 0);
   G__memfunc_setup("GetNumeratorHist",1653,G__ReweightUtils_Dict_201_0_11, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH2D), -1, 0, 0, 1, 1, 8, "", "!< Get original numerator histogram. */", (void*) NULL, 0);
   G__memfunc_setup("SetSystUncert",1360,G__ReweightUtils_Dict_201_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rel_uncert", "!< Set the global relative (!) systematic uncertainty of all efficiencies/weights. */", (void*) NULL, 0);
   G__memfunc_setup("SetQuietMode",1209,G__ReweightUtils_Dict_201_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' isQuiet", "!< Sets the flag to turn off messages. */", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReweightUtils_Dict_201_0_14, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&APReweight2D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReweightUtils_Dict_201_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweight2D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReweightUtils_Dict_201_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&APReweight2D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReweightUtils_Dict_201_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&APReweight2D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReweightUtils_Dict_201_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReweightUtils_Dict_201_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweight2D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReweightUtils_Dict_201_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweight2D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReweightUtils_Dict_201_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweight2D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReweightUtils_Dict_201_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweight2D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("APReweight2D", 1094, G__ReweightUtils_Dict_201_0_26, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D), -1, 0, 1, 1, 1, 0, "u 'APReweight2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APReweight2D", 1220, G__ReweightUtils_Dict_201_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReweightUtils_Dict_201_0_28, (int) ('u'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight2D), -1, 1, 1, 1, 1, 0, "u 'APReweight2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAPReweight3D(void) {
   /* APReweight3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D));
   G__memfunc_setup("APReweight3D",1095,G__ReweightUtils_Dict_208_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D), -1, 0, 0, 1, 1, 0, "", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("APReweight3D",1095,G__ReweightUtils_Dict_208_0_2, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D), -1, 0, 3, 1, 1, 0, 
"U 'TH3' - 0 - denominator_in U 'TH3' - 0 - numerator_in "
"g - - 0 'false' isTrig", "!< Constructor for histograms (numerator/denominator) to read in. */", (void*) NULL, 0);
   G__memfunc_setup("ReadEfficiency",1393,G__ReweightUtils_Dict_208_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH3' - 0 - efficiency_in U 'TH3' - 0 - err_low_in "
"U 'TH3' - 0 '0' err_high_in", "!< Read efficiencies and upper/lower uncertainty (if numerator/denominator not applicable (e.g. Bootstrap)). */", (void*) NULL, 0);
   G__memfunc_setup("GetBinWeight",1185,G__ReweightUtils_Dict_208_0_4, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 3, 1, 1, 8, 
"h - - 0 - bin_x h - - 0 - bin_y "
"h - - 0 - bin_z", "!< Get Weight entry for a given triplet of bin numbers. */", (void*) NULL, 0);
   G__memfunc_setup("GetWeight",904,G__ReweightUtils_Dict_208_0_5, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 3, 1, 1, 8, 
"d - - 0 - value_x d - - 0 - value_y "
"d - - 0 - value_z", "!< Get Weight entry for a given triplet of values. */", (void*) NULL, 0);
   G__memfunc_setup("GetSampleScale",1386,G__ReweightUtils_Dict_208_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get scale factor that was calculated from sample sizes upon instantiation. */", (void*) NULL, 0);
   G__memfunc_setup("NBins",474,G__ReweightUtils_Dict_208_0_7, 104, -1, -1, 0, 0, 1, 1, 8, "", "!< Get amount of bins. */", (void*) NULL, 0);
   G__memfunc_setup("GetBinX",657,G__ReweightUtils_Dict_208_0_8, 104, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - value_x", "!< Get bin number in X that corresponds to a given value. */", (void*) NULL, 0);
   G__memfunc_setup("GetBinY",658,G__ReweightUtils_Dict_208_0_9, 104, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - value_y", "!< Get bin number in Y that corresponds to a given value. */", (void*) NULL, 0);
   G__memfunc_setup("GetBinZ",659,G__ReweightUtils_Dict_208_0_10, 104, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - value_z", "!< Get bin number in Z that corresponds to a given value. */", (void*) NULL, 0);
   G__memfunc_setup("GetDenominatorHist",1848,G__ReweightUtils_Dict_208_0_11, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH3D), -1, 0, 0, 1, 1, 8, "", "!< Get original denominator histogram. */", (void*) NULL, 0);
   G__memfunc_setup("GetNumeratorHist",1653,G__ReweightUtils_Dict_208_0_12, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH3D), -1, 0, 0, 1, 1, 8, "", "!< Get original numerator histogram. */", (void*) NULL, 0);
   G__memfunc_setup("SetSystUncert",1360,G__ReweightUtils_Dict_208_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rel_uncert", "!< Set the global relative (!) systematic uncertainty of all efficiencies/weights. */", (void*) NULL, 0);
   G__memfunc_setup("SetQuietMode",1209,G__ReweightUtils_Dict_208_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' isQuiet", "!< Sets the flag to turn off messages. */", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReweightUtils_Dict_208_0_15, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&APReweight3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReweightUtils_Dict_208_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweight3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReweightUtils_Dict_208_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&APReweight3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReweightUtils_Dict_208_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&APReweight3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReweightUtils_Dict_208_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReweightUtils_Dict_208_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweight3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReweightUtils_Dict_208_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweight3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReweightUtils_Dict_208_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweight3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReweightUtils_Dict_208_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweight3D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("APReweight3D", 1095, G__ReweightUtils_Dict_208_0_27, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D), -1, 0, 1, 1, 1, 0, "u 'APReweight3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APReweight3D", 1221, G__ReweightUtils_Dict_208_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReweightUtils_Dict_208_0_29, (int) ('u'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweight3D), -1, 1, 1, 1, 1, 0, "u 'APReweight3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAPReweightND(void) {
   /* APReweightND */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND));
   G__memfunc_setup("APReweightND",1122,G__ReweightUtils_Dict_449_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND), -1, 0, 0, 1, 1, 0, "", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("APReweightND",1122,G__ReweightUtils_Dict_449_0_2, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND), -1, 0, 3, 1, 1, 0, 
"U 'THnSparse' - 0 - denominator_in U 'THnSparse' - 0 - numerator_in "
"g - - 0 'false' isTrig", "!< Constructor for histograms (numerator/denominator) to read in. */", (void*) NULL, 0);
   G__memfunc_setup("ReadEfficiency",1393,G__ReweightUtils_Dict_449_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'THnSparse' - 0 - efficiency_in U 'THnSparse' - 0 - err_low_in "
"U 'THnSparse' - 0 '0' err_high_in", "!< Read efficiencies and upper/lower uncertainty (if numerator/denominator not applicable (e.g. Bootstrap)). */", (void*) NULL, 0);
   G__memfunc_setup("GetBinWeight",1185,G__ReweightUtils_Dict_449_0_4, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 1, 1, 1, 0, "I - - 10 - bin", "!< Get Weight entry for a given n-tuple of bin numbers. */", (void*) NULL, 0);
   G__memfunc_setup("GetWeight",904,G__ReweightUtils_Dict_449_0_5, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightEntry), -1, 0, 1, 1, 1, 0, "D - - 0 - value", "!< Get Weight entry for a given n-tuple of values. */", (void*) NULL, 0);
   G__memfunc_setup("GetSampleScale",1386,G__ReweightUtils_Dict_449_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get scale factor that was calculated from sample sizes upon instantiation. */", (void*) NULL, 0);
   G__memfunc_setup("NBins",474,G__ReweightUtils_Dict_449_0_7, 104, -1, -1, 0, 0, 1, 1, 8, "", "!< Get amount of bins. */", (void*) NULL, 0);
   G__memfunc_setup("GetDenominatorHist",1848,G__ReweightUtils_Dict_449_0_8, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_THnSparse), -1, 0, 0, 1, 1, 8, "", "!< Get original denominator histogram. */", (void*) NULL, 0);
   G__memfunc_setup("GetNumeratorHist",1653,G__ReweightUtils_Dict_449_0_9, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_THnSparse), -1, 0, 0, 1, 1, 8, "", "!< Get original numerator histogram. */", (void*) NULL, 0);
   G__memfunc_setup("SetSystUncert",1360,G__ReweightUtils_Dict_449_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rel_uncert", "!< Set the global relative (!) systematic uncertainty of all efficiencies/weights. */", (void*) NULL, 0);
   G__memfunc_setup("SetQuietMode",1209,G__ReweightUtils_Dict_449_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' isQuiet", "!< Sets the flag to turn off messages. */", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReweightUtils_Dict_449_0_12, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&APReweightND::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReweightUtils_Dict_449_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweightND::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReweightUtils_Dict_449_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&APReweightND::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReweightUtils_Dict_449_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&APReweightND::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReweightUtils_Dict_449_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReweightUtils_Dict_449_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweightND::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReweightUtils_Dict_449_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweightND::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReweightUtils_Dict_449_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APReweightND::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReweightUtils_Dict_449_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APReweightND::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("APReweightND", 1122, G__ReweightUtils_Dict_449_0_24, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND), -1, 0, 1, 1, 1, 0, "u 'APReweightND' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APReweightND", 1248, G__ReweightUtils_Dict_449_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReweightUtils_Dict_449_0_26, (int) ('u'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APReweightND), -1, 1, 1, 1, 1, 0, "u 'APReweightND' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAPWeightHist(void) {
   /* APWeightHist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist));
   G__memfunc_setup("APWeightHist",1169,G__ReweightUtils_Dict_492_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i - - 10 - n_bins f - - 10 - x_min "
"f - - 10 - x_max", "!< Constructor which takes histo title, amount of bins and the range and optionally the preicision to use for the calculation of the uncertainty. */", (void*) NULL, 0);
   G__memfunc_setup("APWeightHist",1169,G__ReweightUtils_Dict_492_0_2, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist), -1, 0, 0, 1, 1, 0, "", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__ReweightUtils_Dict_492_0_3, 105, -1, -1, 0, 2, 1, 1, 0, 
"d - - 10 - value U 'APWeightEntry' - 0 - weight", "!< Adds a weighted value to the calculation. */", (void*) NULL, 0);
   G__memfunc_setup("GetGraphStatUncert",1823,G__ReweightUtils_Dict_492_0_4, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TGraphAsymmErrors), -1, 0, 1, 1, 1, 0, "g - - 0 'true' autocompute", "!< Extracts the histogram with statistical uncertainties. */", (void*) NULL, 0);
   G__memfunc_setup("GetGraphSystUncert",1846,G__ReweightUtils_Dict_492_0_5, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TGraphErrors), -1, 0, 2, 1, 1, 0, 
"g - - 0 'true' simple g - - 0 'true' autocompute", "!< Extracts the histogram with systematic uncertainties. */", (void*) NULL, 0);
   G__memfunc_setup("ComputeGraph",1231,G__ReweightUtils_Dict_492_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 10 '250' prec", "!< Computes the resulting graph from all added ntuples and calculates the uncertainties for all bins. */", (void*) NULL, 0);
   G__memfunc_setup("GetBinPDF",787,G__ReweightUtils_Dict_492_0_7, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1D), -1, 0, 2, 1, 1, 0, 
"h - - 0 - bin g - - 0 'true' autocompute", "Retrieves the PDF of a bin (starting with bin=1 in accordance with the TH1 classes, over- & underflow bins not accessible) */", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReweightUtils_Dict_492_0_8, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&APWeightHist::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReweightUtils_Dict_492_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APWeightHist::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReweightUtils_Dict_492_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&APWeightHist::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReweightUtils_Dict_492_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&APWeightHist::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReweightUtils_Dict_492_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReweightUtils_Dict_492_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APWeightHist::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReweightUtils_Dict_492_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APWeightHist::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReweightUtils_Dict_492_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APWeightHist::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReweightUtils_Dict_492_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APWeightHist::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("APWeightHist", 1169, G__ReweightUtils_Dict_492_0_20, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightHist), -1, 0, 1, 1, 1, 0, "u 'APWeightHist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APWeightHist", 1295, G__ReweightUtils_Dict_492_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAPEvtWeight(void) {
   /* APEvtWeight */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight));
   G__memfunc_setup("APEvtWeight",1064,G__ReweightUtils_Dict_497_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight), -1, 0, 1, 1, 1, 0, "i 'APEvtWeight::ObjType' - 0 - type", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("AddWeightToEvt",1379,G__ReweightUtils_Dict_497_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'APWeightEntry' - 0 - weight", "!< Adds a weight to the sum of weights. */", (void*) NULL, 0);
   G__memfunc_setup("GetWeight",904,G__ReweightUtils_Dict_497_0_3, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the event weight. */", (void*) NULL, 0);
   G__memfunc_setup("GetStdDev",874,G__ReweightUtils_Dict_497_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the standard deviation. */", (void*) NULL, 0);
   G__memfunc_setup("GetVariance",1097,G__ReweightUtils_Dict_497_0_5, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the variance. */", (void*) NULL, 0);
   G__memfunc_setup("GetSysUncert",1232,G__ReweightUtils_Dict_497_0_6, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the systematic uncertainty (from systematics assigned to weights). */", (void*) NULL, 0);
   G__memfunc_setup("GetSysVariance",1416,G__ReweightUtils_Dict_497_0_7, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the systematic variance (from systematics assigned to weights). */", (void*) NULL, 0);
   G__memfunc_setup("GetWeightObjects",1618,G__ReweightUtils_Dict_497_0_8, 117, G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR), G__defined_typename("vector<APWeightEntry*>"), 0, 1, 1, 1, 0, "i 'APEvtWeight::ObjType' - 0 - type", "!< Returns the vector of weight objects for a specific object type. */", (void*) NULL, 0);
   G__memfunc_setup("NEntries",808,G__ReweightUtils_Dict_497_0_9, 107, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the unweighted number of entries. */", (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__ReweightUtils_Dict_497_0_10, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType), -1, 0, 0, 1, 1, 0, "", "!< Returns the type of the event weight (muon, electron, jet, ANDed, ORed). */", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReweightUtils_Dict_497_0_11, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&APEvtWeight::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReweightUtils_Dict_497_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APEvtWeight::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReweightUtils_Dict_497_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&APEvtWeight::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReweightUtils_Dict_497_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&APEvtWeight::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReweightUtils_Dict_497_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReweightUtils_Dict_497_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APEvtWeight::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReweightUtils_Dict_497_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APEvtWeight::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReweightUtils_Dict_497_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APEvtWeight::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReweightUtils_Dict_497_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APEvtWeight::DeclFileLine) ), 0);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Calculates the event weight for the current entries. */", (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("APEvtWeight", 1064, G__ReweightUtils_Dict_497_0_24, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight), -1, 0, 1, 1, 1, 0, "u 'APEvtWeight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APEvtWeight", 1190, G__ReweightUtils_Dict_497_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReweightUtils_Dict_497_0_26, (int) ('u'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APEvtWeight), -1, 1, 1, 1, 1, 0, "u 'APEvtWeight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAPWeightSum(void) {
   /* APWeightSum */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum));
   G__memfunc_setup("APWeightSum",1070,G__ReweightUtils_Dict_499_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum), -1, 0, 0, 1, 1, 0, "", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("AddWeightToEvt",1379,G__ReweightUtils_Dict_499_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'APWeightEntry' - 0 - weight", "!< Adds a weight to the sum of weights. */", (void*) NULL, 0);
   G__memfunc_setup("FinishEvt",912,G__ReweightUtils_Dict_499_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1.0' ext_weight", "!< Finishes the current event and calculates the event weight. Takes an optional external weight factor (e.g. mc weight). */", (void*) NULL, 0);
   G__memfunc_setup("AddEvt",568,G__ReweightUtils_Dict_499_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'APEvtWeight' - 0 - evt_weight d - - 0 '1.0' ext_weight", "!< Adds an event with an externally calculated EvtWeight object. Takes an optional external weight factor (e.g. mc weight). */", (void*) NULL, 0);
   G__memfunc_setup("GetSumW",684,G__ReweightUtils_Dict_499_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Returns the sum of weights. */", (void*) NULL, 0);
   G__memfunc_setup("GetSumW2",734,G__ReweightUtils_Dict_499_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Returns sum of (weights^2). */", (void*) NULL, 0);
   G__memfunc_setup("GetSumWExternal",1519,G__ReweightUtils_Dict_499_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Returns the sum of weights without taking into account the trigger weighting (external weights only) to allow switching trigger weighting on/off. */", (void*) NULL, 0);
   G__memfunc_setup("GetStdDev",874,G__ReweightUtils_Dict_499_0_8, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the standard deviation. */", (void*) NULL, 0);
   G__memfunc_setup("GetVariance",1097,G__ReweightUtils_Dict_499_0_9, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the variance. */", (void*) NULL, 0);
   G__memfunc_setup("GetVarianceNoCorr",1692,G__ReweightUtils_Dict_499_0_10, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the variance, assuming no correlations. */", (void*) NULL, 0);
   G__memfunc_setup("GetVarianceFullCorr",1906,G__ReweightUtils_Dict_499_0_11, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the variance, assuming full correlation amongst objects. */", (void*) NULL, 0);
   G__memfunc_setup("GetSysUncert",1232,G__ReweightUtils_Dict_499_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Returns the systematic uncertainty (from systematics assigned to weights). */", (void*) NULL, 0);
   G__memfunc_setup("GetKUnweighted",1407,G__ReweightUtils_Dict_499_0_13, 107, -1, -1, 0, 0, 1, 1, 8, "", "!< Returns the unweighted sum of entries. */", (void*) NULL, 0);
   G__memfunc_setup("GetUncertHistogram",1855,G__ReweightUtils_Dict_499_0_14, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_THnSparse), -1, 0, 1, 1, 1, 0, "U 'APReweightBase' - 0 - weighter", "!< Returns THnSparse holding the uncertainties for given APReweightBase instance. */", (void*) NULL, 0);
   G__memfunc_setup("GetAllUncertHistograms",2251,G__ReweightUtils_Dict_499_0_15, 117, G__get_linked_tagnum(&G__ReweightUtils_DictLN_vectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgR), G__defined_typename("vector<THnSparse*>"), 0, 0, 1, 1, 0, "", "!< Returns vector of THnSparses holding the uncertainties for all APReweight IDs. */", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReweightUtils_Dict_499_0_16, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&APWeightSum::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReweightUtils_Dict_499_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APWeightSum::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReweightUtils_Dict_499_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&APWeightSum::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReweightUtils_Dict_499_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&APWeightSum::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReweightUtils_Dict_499_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReweightUtils_Dict_499_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APWeightSum::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReweightUtils_Dict_499_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APWeightSum::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReweightUtils_Dict_499_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APWeightSum::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReweightUtils_Dict_499_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APWeightSum::DeclFileLine) ), 0);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "!< Calculates the final uncertainties including correlations. */", (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("APWeightSum", 1070, G__ReweightUtils_Dict_499_0_29, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum), -1, 0, 1, 1, 1, 0, "u 'APWeightSum' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APWeightSum", 1196, G__ReweightUtils_Dict_499_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReweightUtils_Dict_499_0_31, (int) ('u'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSum), -1, 1, 1, 1, 1, 0, "u 'APWeightSum' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAPWeightSumEnsemble(void) {
   /* APWeightSumEnsemble */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble));
   G__memfunc_setup("APWeightSumEnsemble",1881,G__ReweightUtils_Dict_505_0_1, 105, G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble), -1, 0, 0, 1, 1, 0, "", "!< Default constructor. */", (void*) NULL, 0);
   G__memfunc_setup("SetRelPrecision",1531,G__ReweightUtils_Dict_505_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rel_prec", "!< Sets the relative precision of the gaussian fit to stop the ensemble test at. */", (void*) NULL, 0);
   G__memfunc_setup("AddWeightToEvt",1379,G__ReweightUtils_Dict_505_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'APWeightEntry' - 0 - weight", "!< Adds a weight to the sum of weights. */", (void*) NULL, 0);
   G__memfunc_setup("FinishEvt",912,G__ReweightUtils_Dict_505_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1.0' ext_weight", "!< Finishes the current event and calculates the event weight. Takes an optional external weight factor (e.g. mc weight). */", (void*) NULL, 0);
   G__memfunc_setup("GetQuantile",1123,G__ReweightUtils_Dict_505_0_5, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - prob", "!< Returns the quantlile for p=prob for the distribution. (Invokes Ensemble Test) */", (void*) NULL, 0);
   G__memfunc_setup("GetRandom",897,G__ReweightUtils_Dict_505_0_6, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns a random value according to the pdf. (Invokes Ensemble Test) */", (void*) NULL, 0);
   G__memfunc_setup("GetEnsemblePDFMode",1706,G__ReweightUtils_Dict_505_0_7, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the Mode (= sum of weights from PDF). (Invokes Ensemble Test) */", (void*) NULL, 0);
   G__memfunc_setup("GetEnsemblePDFStdDev",1903,G__ReweightUtils_Dict_505_0_8, 100, -1, -1, 0, 0, 1, 1, 0, "", "!< Returns the standard deviation from PDF . (Invokes Ensemble Test) */", (void*) NULL, 0);
   G__memfunc_setup("GetPDF",506,G__ReweightUtils_Dict_505_0_9, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TH1F), -1, 0, 0, 1, 1, 0, "", "!< Returns the calculated PDF. (Invokes Ensemble Test) */", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReweightUtils_Dict_505_0_10, 85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&APWeightSumEnsemble::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReweightUtils_Dict_505_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APWeightSumEnsemble::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReweightUtils_Dict_505_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&APWeightSumEnsemble::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReweightUtils_Dict_505_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&APWeightSumEnsemble::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReweightUtils_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReweightUtils_Dict_505_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReweightUtils_Dict_505_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APWeightSumEnsemble::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReweightUtils_Dict_505_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APWeightSumEnsemble::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReweightUtils_Dict_505_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&APWeightSumEnsemble::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReweightUtils_Dict_505_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&APWeightSumEnsemble::DeclFileLine) ), 0);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "!< Performs the ensemble test to model final PDF. */", (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("APWeightSumEnsemble", 1881, G__ReweightUtils_Dict_505_0_23, (int) ('i'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble), -1, 0, 1, 1, 1, 0, "u 'APWeightSumEnsemble' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~APWeightSumEnsemble", 2007, G__ReweightUtils_Dict_505_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReweightUtils_Dict_505_0_25, (int) ('u'), G__get_linked_tagnum(&G__ReweightUtils_DictLN_APWeightSumEnsemble), -1, 1, 1, 1, 1, 0, "u 'APWeightSumEnsemble' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncReweightUtils_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalReweightUtils_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcReweightUtils_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ReweightUtils_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APWeightEntry = { "APWeightEntry" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APReweightBase = { "APReweightBase" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TAxis = { "TAxis" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APReweight = { "APReweight" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR = { "vector<APWeightEntry*,allocator<APWeightEntry*> >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<APWeightEntry*,allocator<APWeightEntry*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APReweight2D = { "APReweight2D" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR = { "vector<vector<APWeightEntry*,allocator<APWeightEntry*> >,allocator<vector<APWeightEntry*,allocator<APWeightEntry*> > > >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<APWeightEntry*,allocator<APWeightEntry*> >,allocator<vector<APWeightEntry*,allocator<APWeightEntry*> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TH3 = { "TH3" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TH3D = { "TH3D" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APReweight3D = { "APReweight3D" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<APWeightEntry*,allocator<APWeightEntry*> >,allocator<vector<APWeightEntry*,allocator<APWeightEntry*> > > >,allocator<vector<vector<APWeightEntry*,allocator<APWeightEntry*> >,allocator<vector<APWeightEntry*,allocator<APWeightEntry*> > > > > >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<APWeightEntry*,allocator<APWeightEntry*> >,allocator<vector<APWeightEntry*,allocator<APWeightEntry*> > > >,allocator<vector<vector<APWeightEntry*,allocator<APWeightEntry*> >,allocator<vector<APWeightEntry*,allocator<APWeightEntry*> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_THnSparse = { "THnSparse" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APReweightND = { "APReweightND" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_maplEvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUcOlesslEvectorlEintcOallocatorlEintgRsPgRsPgRcOallocatorlEpairlEconstsPvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUgRsPgRsPgR = { "map<vector<int,allocator<int> >,APWeightEntry*,less<vector<int,allocator<int> > >,allocator<pair<const vector<int,allocator<int> >,APWeightEntry*> > >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlETAxismUcOallocatorlETAxismUgRsPgR = { "vector<TAxis*,allocator<TAxis*> >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETAxismUcOallocatorlETAxismUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TAxis*,allocator<TAxis*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TArray = { "TArray" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_TGraphAsymmErrors = { "TGraphAsymmErrors" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APWeightHist = { "APWeightHist" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR = { "vector<TH1D*,allocator<TH1D*> >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1D*,allocator<TH1D*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APEvtWeight = { "APEvtWeight" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APEvtWeightcLcLObjType = { "APEvtWeight::ObjType" , 101 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APWeightSum = { "APWeightSum" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_vectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgR = { "vector<THnSparse*,allocator<THnSparse*> >" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<THnSparse*,allocator<THnSparse*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReweightUtils_DictLN_APWeightSumEnsemble = { "APWeightSumEnsemble" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableReweightUtils_Dict() {
  G__ReweightUtils_DictLN_TClass.tagnum = -1 ;
  G__ReweightUtils_DictLN_TBuffer.tagnum = -1 ;
  G__ReweightUtils_DictLN_TMemberInspector.tagnum = -1 ;
  G__ReweightUtils_DictLN_TObject.tagnum = -1 ;
  G__ReweightUtils_DictLN_TNamed.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_string.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_TH1F.tagnum = -1 ;
  G__ReweightUtils_DictLN_APWeightEntry.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_APReweightBase.tagnum = -1 ;
  G__ReweightUtils_DictLN_TTree.tagnum = -1 ;
  G__ReweightUtils_DictLN_TH1.tagnum = -1 ;
  G__ReweightUtils_DictLN_TH1D.tagnum = -1 ;
  G__ReweightUtils_DictLN_TAxis.tagnum = -1 ;
  G__ReweightUtils_DictLN_APReweight.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_TH2.tagnum = -1 ;
  G__ReweightUtils_DictLN_TH2D.tagnum = -1 ;
  G__ReweightUtils_DictLN_APReweight2D.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_TH3.tagnum = -1 ;
  G__ReweightUtils_DictLN_TH3D.tagnum = -1 ;
  G__ReweightUtils_DictLN_APReweight3D.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_THnSparse.tagnum = -1 ;
  G__ReweightUtils_DictLN_APReweightND.tagnum = -1 ;
  G__ReweightUtils_DictLN_maplEvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUcOlesslEvectorlEintcOallocatorlEintgRsPgRsPgRcOallocatorlEpairlEconstsPvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUgRsPgRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlETAxismUcOallocatorlETAxismUgRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETAxismUcOallocatorlETAxismUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_TArray.tagnum = -1 ;
  G__ReweightUtils_DictLN_TArrayD.tagnum = -1 ;
  G__ReweightUtils_DictLN_TAttLine.tagnum = -1 ;
  G__ReweightUtils_DictLN_TAttFill.tagnum = -1 ;
  G__ReweightUtils_DictLN_TAttMarker.tagnum = -1 ;
  G__ReweightUtils_DictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__ReweightUtils_DictLN_TGraphErrors.tagnum = -1 ;
  G__ReweightUtils_DictLN_TGraphAsymmErrors.tagnum = -1 ;
  G__ReweightUtils_DictLN_APWeightHist.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_APEvtWeight.tagnum = -1 ;
  G__ReweightUtils_DictLN_APEvtWeightcLcLObjType.tagnum = -1 ;
  G__ReweightUtils_DictLN_APWeightSum.tagnum = -1 ;
  G__ReweightUtils_DictLN_vectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReweightUtils_DictLN_APWeightSumEnsemble.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableReweightUtils_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_string);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TH1F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APWeightEntry),sizeof(APWeightEntry),-1,296192,(char*)NULL,G__setup_memvarAPWeightEntry,G__setup_memfuncAPWeightEntry);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APReweightBase),sizeof(APReweightBase),-1,324864,(char*)NULL,G__setup_memvarAPReweightBase,G__setup_memfuncAPReweightBase);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TTree);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TH1);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TAxis);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APReweight),sizeof(APReweight),-1,324864,(char*)NULL,G__setup_memvarAPReweight,G__setup_memfuncAPReweight);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TH2);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TH2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APReweight2D),sizeof(APReweight2D),-1,324864,(char*)NULL,G__setup_memvarAPReweight2D,G__setup_memfuncAPReweight2D);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TH3);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TH3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APReweight3D),sizeof(APReweight3D),-1,324864,(char*)NULL,G__setup_memvarAPReweight3D,G__setup_memfuncAPReweight3D);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRcOallocatorlEvectorlEAPWeightEntrymUcOallocatorlEAPWeightEntrymUgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_THnSparse);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APReweightND),sizeof(APReweightND),-1,324864,(char*)NULL,G__setup_memvarAPReweightND,G__setup_memfuncAPReweightND);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_maplEvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUcOlesslEvectorlEintcOallocatorlEintgRsPgRsPgRcOallocatorlEpairlEconstsPvectorlEintcOallocatorlEintgRsPgRcOAPWeightEntrymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlETAxismUcOallocatorlETAxismUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETAxismUcOallocatorlETAxismUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TArray);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TAttMarker);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TGraphErrors);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_TGraphAsymmErrors);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APWeightHist),sizeof(APWeightHist),-1,324864,"!< ClassDef for ROOTCINT dictionary. */",G__setup_memvarAPWeightHist,G__setup_memfuncAPWeightHist);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APEvtWeight),sizeof(APEvtWeight),-1,324608,(char*)NULL,G__setup_memvarAPEvtWeight,G__setup_memfuncAPEvtWeight);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APEvtWeightcLcLObjType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APWeightSum),sizeof(APWeightSum),-1,324864,(char*)NULL,G__setup_memvarAPWeightSum,G__setup_memfuncAPWeightSum);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_vectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_reverse_iteratorlEvectorlETHnSparsemUcOallocatorlETHnSparsemUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReweightUtils_DictLN_APWeightSumEnsemble),sizeof(APWeightSumEnsemble),-1,324864,(char*)NULL,G__setup_memvarAPWeightSumEnsemble,G__setup_memfuncAPWeightSumEnsemble);
}
extern "C" void G__cpp_setupReweightUtils_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupReweightUtils_Dict()");
  G__set_cpp_environmentReweightUtils_Dict();
  G__cpp_setup_tagtableReweightUtils_Dict();

  G__cpp_setup_inheritanceReweightUtils_Dict();

  G__cpp_setup_typetableReweightUtils_Dict();

  G__cpp_setup_memvarReweightUtils_Dict();

  G__cpp_setup_memfuncReweightUtils_Dict();
  G__cpp_setup_globalReweightUtils_Dict();
  G__cpp_setup_funcReweightUtils_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncReweightUtils_Dict();
  return;
}
class G__cpp_setup_initReweightUtils_Dict {
  public:
    G__cpp_setup_initReweightUtils_Dict() { G__add_setup_func("ReweightUtils_Dict",(G__incsetup)(&G__cpp_setupReweightUtils_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initReweightUtils_Dict() { G__remove_setup_func("ReweightUtils_Dict"); }
};
G__cpp_setup_initReweightUtils_Dict G__cpp_setup_initializerReweightUtils_Dict;

