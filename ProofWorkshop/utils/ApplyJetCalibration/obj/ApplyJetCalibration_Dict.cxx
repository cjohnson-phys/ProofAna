#ifdef __llvm__
#pragma GCC diagnostic ignored "-Wunused-private-field"
#endif
#include <map>
#include <TString.h>
#include "../ApplyJetCalibration/ApplyJetCalibration.h"
//
// File generated by /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.05-x86_64-slc5-gcc4.3/bin/rootcint at Thu Dec 18 16:05:06 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIobjdIApplyJetCalibration_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ApplyJetCalibration_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void GSCTool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GSCTool(void *p = 0);
   static void *newArray_GSCTool(Long_t size, void *p);
   static void delete_GSCTool(void *p);
   static void deleteArray_GSCTool(void *p);
   static void destruct_GSCTool(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GSCTool*)
   {
      ::GSCTool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GSCTool >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GSCTool", ::GSCTool::Class_Version(), "./../Root/../ApplyJetCalibration/GSC.h", 20,
                  typeid(::GSCTool), DefineBehavior(ptr, ptr),
                  &::GSCTool::Dictionary, isa_proxy, 4,
                  sizeof(::GSCTool) );
      instance.SetNew(&new_GSCTool);
      instance.SetNewArray(&newArray_GSCTool);
      instance.SetDelete(&delete_GSCTool);
      instance.SetDeleteArray(&deleteArray_GSCTool);
      instance.SetDestructor(&destruct_GSCTool);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GSCTool*)
   {
      return GenerateInitInstanceLocal((::GSCTool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GSCTool*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void NPVBeamspotCorrectionTool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_NPVBeamspotCorrectionTool(void *p = 0);
   static void *newArray_NPVBeamspotCorrectionTool(Long_t size, void *p);
   static void delete_NPVBeamspotCorrectionTool(void *p);
   static void deleteArray_NPVBeamspotCorrectionTool(void *p);
   static void destruct_NPVBeamspotCorrectionTool(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::NPVBeamspotCorrectionTool*)
   {
      ::NPVBeamspotCorrectionTool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::NPVBeamspotCorrectionTool >(0);
      static ::ROOT::TGenericClassInfo 
         instance("NPVBeamspotCorrectionTool", ::NPVBeamspotCorrectionTool::Class_Version(), "./../Root/../ApplyJetCalibration/NPVBeamspotCorrection.h", 17,
                  typeid(::NPVBeamspotCorrectionTool), DefineBehavior(ptr, ptr),
                  &::NPVBeamspotCorrectionTool::Dictionary, isa_proxy, 4,
                  sizeof(::NPVBeamspotCorrectionTool) );
      instance.SetNew(&new_NPVBeamspotCorrectionTool);
      instance.SetNewArray(&newArray_NPVBeamspotCorrectionTool);
      instance.SetDelete(&delete_NPVBeamspotCorrectionTool);
      instance.SetDeleteArray(&deleteArray_NPVBeamspotCorrectionTool);
      instance.SetDestructor(&destruct_NPVBeamspotCorrectionTool);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::NPVBeamspotCorrectionTool*)
   {
      return GenerateInitInstanceLocal((::NPVBeamspotCorrectionTool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::NPVBeamspotCorrectionTool*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void JetCalibrationTool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_JetCalibrationTool(void *p = 0);
   static void *newArray_JetCalibrationTool(Long_t size, void *p);
   static void delete_JetCalibrationTool(void *p);
   static void deleteArray_JetCalibrationTool(void *p);
   static void destruct_JetCalibrationTool(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JetCalibrationTool*)
   {
      ::JetCalibrationTool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::JetCalibrationTool >(0);
      static ::ROOT::TGenericClassInfo 
         instance("JetCalibrationTool", ::JetCalibrationTool::Class_Version(), "./../Root/../ApplyJetCalibration/ApplyJetCalibration.h", 24,
                  typeid(::JetCalibrationTool), DefineBehavior(ptr, ptr),
                  &::JetCalibrationTool::Dictionary, isa_proxy, 4,
                  sizeof(::JetCalibrationTool) );
      instance.SetNew(&new_JetCalibrationTool);
      instance.SetNewArray(&newArray_JetCalibrationTool);
      instance.SetDelete(&delete_JetCalibrationTool);
      instance.SetDeleteArray(&deleteArray_JetCalibrationTool);
      instance.SetDestructor(&destruct_JetCalibrationTool);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JetCalibrationTool*)
   {
      return GenerateInitInstanceLocal((::JetCalibrationTool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JetCalibrationTool*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *GSCTool::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GSCTool::Class_Name()
{
   return "GSCTool";
}

//______________________________________________________________________________
const char *GSCTool::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GSCTool*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GSCTool::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GSCTool*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GSCTool::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GSCTool*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GSCTool::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GSCTool*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *NPVBeamspotCorrectionTool::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *NPVBeamspotCorrectionTool::Class_Name()
{
   return "NPVBeamspotCorrectionTool";
}

//______________________________________________________________________________
const char *NPVBeamspotCorrectionTool::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::NPVBeamspotCorrectionTool*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int NPVBeamspotCorrectionTool::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::NPVBeamspotCorrectionTool*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void NPVBeamspotCorrectionTool::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::NPVBeamspotCorrectionTool*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *NPVBeamspotCorrectionTool::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::NPVBeamspotCorrectionTool*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *JetCalibrationTool::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *JetCalibrationTool::Class_Name()
{
   return "JetCalibrationTool";
}

//______________________________________________________________________________
const char *JetCalibrationTool::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::JetCalibrationTool*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int JetCalibrationTool::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::JetCalibrationTool*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void JetCalibrationTool::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::JetCalibrationTool*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *JetCalibrationTool::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::JetCalibrationTool*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void JetCalibrationTool::Streamer(TBuffer &R__b)
{
   // Stream an object of class JetCalibrationTool.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(JetCalibrationTool::Class(),this);
   } else {
      R__b.WriteClassBuffer(JetCalibrationTool::Class(),this);
   }
}

//______________________________________________________________________________
void JetCalibrationTool::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class JetCalibrationTool.
      TClass *R__cl = ::JetCalibrationTool::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_interpol", &_interpol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JES_factors[90][7]", JES_factors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "etaCorr_factors[90][7]", etaCorr_factors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JMS_factors[90][7]", JMS_factors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_etaBinAxis", &_etaBinAxis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_minPt_JES", &_minPt_JES);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_minPt_EtaCorr", &_minPt_EtaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_maxE_EtaCorr", &_maxE_EtaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_jesDesc", &_jesDesc);
      R__insp.InspectMember(_jesDesc, "_jesDesc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mu_ref", &_mu_ref);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_NPV_ref", &_NPV_ref);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_offsetBins", &_offsetBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_resOffsetBins", &_resOffsetBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_offsetSlopes", (void*)&_offsetSlopes);
      R__insp.InspectMember("JetCalibrationTool::VecD", (void*)&_offsetSlopes, "_offsetSlopes.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_offsetIntercepts", (void*)&_offsetIntercepts);
      R__insp.InspectMember("JetCalibrationTool::VecD", (void*)&_offsetIntercepts, "_offsetIntercepts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_resOffsetMu", (void*)&_resOffsetMu);
      R__insp.InspectMember("JetCalibrationTool::VecD", (void*)&_resOffsetMu, "_resOffsetMu.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_resOffsetNPV", (void*)&_resOffsetNPV);
      R__insp.InspectMember("JetCalibrationTool::VecD", (void*)&_resOffsetNPV, "_resOffsetNPV.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_offsetDesc", &_offsetDesc);
      R__insp.InspectMember(_offsetDesc, "_offsetDesc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_resOffsetDesc", &_resOffsetDesc);
      R__insp.InspectMember(_resOffsetDesc, "_resOffsetDesc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_offsetNewParameterization", &_offsetNewParameterization);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isData", &_isData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_applyOffsetCorrection", &_applyOffsetCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_applyMassCorrection", &_applyMassCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_basePath", &_basePath);
      R__insp.InspectMember(_basePath, "_basePath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_GeV", &_GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_insituCorr", &_insituCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_insituEtaMax", &_insituEtaMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_insituPtMin", &_insituPtMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_insituPtMax", &_insituPtMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_useFullJetArea4vectorCorr", &_useFullJetArea4vectorCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_gsc", &_gsc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_applyGSCCorrection", &_applyGSCCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_GSCDepth", &_GSCDepth);
      R__insp.InspectMember(_GSCDepth, "_GSCDepth.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_npv", &_npv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_applyNPVBeamspotCorrection", &_applyNPVBeamspotCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_muSF", &_muSF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_rand", &_rand);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_JetCalibrationTool(void *p) {
      return  p ? new(p) ::JetCalibrationTool : new ::JetCalibrationTool;
   }
   static void *newArray_JetCalibrationTool(Long_t nElements, void *p) {
      return p ? new(p) ::JetCalibrationTool[nElements] : new ::JetCalibrationTool[nElements];
   }
   // Wrapper around operator delete
   static void delete_JetCalibrationTool(void *p) {
      delete ((::JetCalibrationTool*)p);
   }
   static void deleteArray_JetCalibrationTool(void *p) {
      delete [] ((::JetCalibrationTool*)p);
   }
   static void destruct_JetCalibrationTool(void *p) {
      typedef ::JetCalibrationTool current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JetCalibrationTool

//______________________________________________________________________________
void GSCTool::Streamer(TBuffer &R__b)
{
   // Stream an object of class GSCTool.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GSCTool::Class(),this);
   } else {
      R__b.WriteClassBuffer(GSCTool::Class(),this);
   }
}

//______________________________________________________________________________
void GSCTool::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GSCTool.
      TClass *R__cl = ::GSCTool::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_basePath", &_basePath);
      R__insp.InspectMember(_basePath, "_basePath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_respFactorsEM3", (void*)&_respFactorsEM3);
      R__insp.InspectMember("GSCTool::VecTH2D", (void*)&_respFactorsEM3, "_respFactorsEM3.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_respFactorsnTrk", (void*)&_respFactorsnTrk);
      R__insp.InspectMember("GSCTool::VecTH2D", (void*)&_respFactorsnTrk, "_respFactorsnTrk.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_respFactorstrackWIDTH", (void*)&_respFactorstrackWIDTH);
      R__insp.InspectMember("GSCTool::VecTH2D", (void*)&_respFactorstrackWIDTH, "_respFactorstrackWIDTH.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_respFactorsTile0", (void*)&_respFactorsTile0);
      R__insp.InspectMember("GSCTool::VecTH2D", (void*)&_respFactorsTile0, "_respFactorsTile0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_binSize", &_binSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trackWIDTHMaxEtaBin", &_trackWIDTHMaxEtaBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nTrkMaxEtaBin", &_nTrkMaxEtaBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Tile0MaxEtaBin", &_Tile0MaxEtaBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_EM3MaxEtaBin", &_EM3MaxEtaBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_etaGapMin", &_etaGapMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_etaGapMax", &_etaGapMax);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GSCTool(void *p) {
      return  p ? new(p) ::GSCTool : new ::GSCTool;
   }
   static void *newArray_GSCTool(Long_t nElements, void *p) {
      return p ? new(p) ::GSCTool[nElements] : new ::GSCTool[nElements];
   }
   // Wrapper around operator delete
   static void delete_GSCTool(void *p) {
      delete ((::GSCTool*)p);
   }
   static void deleteArray_GSCTool(void *p) {
      delete [] ((::GSCTool*)p);
   }
   static void destruct_GSCTool(void *p) {
      typedef ::GSCTool current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GSCTool

//______________________________________________________________________________
void NPVBeamspotCorrectionTool::Streamer(TBuffer &R__b)
{
   // Stream an object of class NPVBeamspotCorrectionTool.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(NPVBeamspotCorrectionTool::Class(),this);
   } else {
      R__b.WriteClassBuffer(NPVBeamspotCorrectionTool::Class(),this);
   }
}

//______________________________________________________________________________
void NPVBeamspotCorrectionTool::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class NPVBeamspotCorrectionTool.
      TClass *R__cl = ::NPVBeamspotCorrectionTool::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*g_nvtx_nreco_bs66mm", &g_nvtx_nreco_bs66mm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*g_nvtx_nreco_bs47mm", &g_nvtx_nreco_bs47mm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*invGraph", &invGraph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NPVmin", &NPVmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NPVmax", &NPVmax);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_NPVBeamspotCorrectionTool(void *p) {
      return  p ? new(p) ::NPVBeamspotCorrectionTool : new ::NPVBeamspotCorrectionTool;
   }
   static void *newArray_NPVBeamspotCorrectionTool(Long_t nElements, void *p) {
      return p ? new(p) ::NPVBeamspotCorrectionTool[nElements] : new ::NPVBeamspotCorrectionTool[nElements];
   }
   // Wrapper around operator delete
   static void delete_NPVBeamspotCorrectionTool(void *p) {
      delete ((::NPVBeamspotCorrectionTool*)p);
   }
   static void deleteArray_NPVBeamspotCorrectionTool(void *p) {
      delete [] ((::NPVBeamspotCorrectionTool*)p);
   }
   static void destruct_NPVBeamspotCorrectionTool(void *p) {
      typedef ::NPVBeamspotCorrectionTool current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::NPVBeamspotCorrectionTool

namespace ROOT {
   void vectorlETH2DmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETH2DmUgR_Dictionary();
   static void *new_vectorlETH2DmUgR(void *p = 0);
   static void *newArray_vectorlETH2DmUgR(Long_t size, void *p);
   static void delete_vectorlETH2DmUgR(void *p);
   static void deleteArray_vectorlETH2DmUgR(void *p);
   static void destruct_vectorlETH2DmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TH2D*>*)
   {
      vector<TH2D*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TH2D*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TH2D*>", -2, "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.05-x86_64-slc5-gcc4.3/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TH2D*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETH2DmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TH2D*>) );
      instance.SetNew(&new_vectorlETH2DmUgR);
      instance.SetNewArray(&newArray_vectorlETH2DmUgR);
      instance.SetDelete(&delete_vectorlETH2DmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETH2DmUgR);
      instance.SetDestructor(&destruct_vectorlETH2DmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TH2D*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TH2D*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETH2DmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TH2D*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETH2DmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH2D*> : new vector<TH2D*>;
   }
   static void *newArray_vectorlETH2DmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH2D*>[nElements] : new vector<TH2D*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETH2DmUgR(void *p) {
      delete ((vector<TH2D*>*)p);
   }
   static void deleteArray_vectorlETH2DmUgR(void *p) {
      delete [] ((vector<TH2D*>*)p);
   }
   static void destruct_vectorlETH2DmUgR(void *p) {
      typedef vector<TH2D*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TH2D*>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

/********************************************************
* ../obj/ApplyJetCalibration_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableApplyJetCalibration_Dict();

extern "C" void G__set_cpp_environmentApplyJetCalibration_Dict() {
  G__cpp_reset_tagtableApplyJetCalibration_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevApplyJetCalibration_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GSCTool */
static int G__ApplyJetCalibration_Dict_607_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GSCTool* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GSCTool[n];
     } else {
       p = new((void*) gvp) GSCTool[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GSCTool;
     } else {
       p = new((void*) gvp) GSCTool;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GSCTool* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GSCTool(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) GSCTool(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GSCTool::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GSCTool::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GSCTool::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GSCTool::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GSCTool*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GSCTool::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GSCTool::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GSCTool::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GSCTool::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GSCTool*) G__getstructoffset())->initGSC(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GSCTool*) G__getstructoffset())->GettrackWIDTHResponse((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GSCTool*) G__getstructoffset())->GetnTrkResponse((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GSCTool*) G__getstructoffset())->GetTile0Response((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GSCTool*) G__getstructoffset())->GetEM3Response((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letdouble(result7, 100, (double) ((GSCTool*) G__getstructoffset())->GetGSCCorrection(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, *((TString*) G__int(libp->para[6]))));
      break;
   case 6:
      G__letdouble(result7, 100, (double) ((GSCTool*) G__getstructoffset())->GetGSCCorrection((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_607_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GSCTool*) G__getstructoffset())->GetjetPropertyMax(*((TString*) G__int(libp->para[0])), (unsigned int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ApplyJetCalibration_Dict_607_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GSCTool* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GSCTool(*(GSCTool*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GSCTool G__TGSCTool;
static int G__ApplyJetCalibration_Dict_607_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GSCTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GSCTool*) (soff+(sizeof(GSCTool)*i)))->~G__TGSCTool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GSCTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GSCTool*) (soff))->~G__TGSCTool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ApplyJetCalibration_Dict_607_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GSCTool* dest = (GSCTool*) G__getstructoffset();
   *dest = *(GSCTool*) libp->para[0].ref;
   const GSCTool& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* NPVBeamspotCorrectionTool */
static int G__ApplyJetCalibration_Dict_615_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   NPVBeamspotCorrectionTool* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new NPVBeamspotCorrectionTool[n];
     } else {
       p = new((void*) gvp) NPVBeamspotCorrectionTool[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new NPVBeamspotCorrectionTool;
     } else {
       p = new((void*) gvp) NPVBeamspotCorrectionTool;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) NPVBeamspotCorrectionTool::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) NPVBeamspotCorrectionTool::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) NPVBeamspotCorrectionTool::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      NPVBeamspotCorrectionTool::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((NPVBeamspotCorrectionTool*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) NPVBeamspotCorrectionTool::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NPVBeamspotCorrectionTool::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) NPVBeamspotCorrectionTool::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NPVBeamspotCorrectionTool::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((NPVBeamspotCorrectionTool*) G__getstructoffset())->initNPVBeamspotCorrection();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_615_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((NPVBeamspotCorrectionTool*) G__getstructoffset())->GetNVertexBsCorrection((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ApplyJetCalibration_Dict_615_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   NPVBeamspotCorrectionTool* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new NPVBeamspotCorrectionTool(*(NPVBeamspotCorrectionTool*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef NPVBeamspotCorrectionTool G__TNPVBeamspotCorrectionTool;
static int G__ApplyJetCalibration_Dict_615_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (NPVBeamspotCorrectionTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((NPVBeamspotCorrectionTool*) (soff+(sizeof(NPVBeamspotCorrectionTool)*i)))->~G__TNPVBeamspotCorrectionTool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (NPVBeamspotCorrectionTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((NPVBeamspotCorrectionTool*) (soff))->~G__TNPVBeamspotCorrectionTool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ApplyJetCalibration_Dict_615_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   NPVBeamspotCorrectionTool* dest = (NPVBeamspotCorrectionTool*) G__getstructoffset();
   *dest = *(NPVBeamspotCorrectionTool*) libp->para[0].ref;
   const NPVBeamspotCorrectionTool& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* JetCalibrationTool */
static int G__ApplyJetCalibration_Dict_616_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JetCalibrationTool* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetCalibrationTool(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]), *((TString*) G__int(libp->para[3])));
     } else {
       p = new((void*) gvp) JetCalibrationTool(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]), *((TString*) G__int(libp->para[3])));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetCalibrationTool(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) JetCalibrationTool(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetCalibrationTool(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) JetCalibrationTool(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetCalibrationTool(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) JetCalibrationTool(*((TString*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JetCalibrationTool* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetCalibrationTool[n];
     } else {
       p = new((void*) gvp) JetCalibrationTool[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetCalibrationTool;
     } else {
       p = new((void*) gvp) JetCalibrationTool;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) JetCalibrationTool::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JetCalibrationTool::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) JetCalibrationTool::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      JetCalibrationTool::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JetCalibrationTool*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JetCalibrationTool::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JetCalibrationTool::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JetCalibrationTool::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JetCalibrationTool::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JetCalibrationTool*) G__getstructoffset())->init(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetOffset((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetOffset((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetOffset((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetResidualOffset((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetOffsetSF((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetOffsetSF((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetOffsetSF((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetResidualOffsetSF((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetOffsetScaleFactor((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetJES((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetEtaCorr((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetMassCorr((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetNPVBeamspotCorrection((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((JetCalibrationTool*) G__getstructoffset())->GetNPVcorrApprox((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((JetCalibrationTool*) G__getstructoffset())->GetNPVcorrApprox((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((JetCalibrationTool*) G__getstructoffset())->GetNPVcorrApprox2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((JetCalibrationTool*) G__getstructoffset())->GetNPVcorrApprox2((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((JetCalibrationTool*) G__getstructoffset())->JetAreaJES());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->MuScaleFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->MuForPlotting((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetGSC((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyJES((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyEtaJES((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyEtaMassJES((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyOffsetEtaJES(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 8:
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyOffsetEtaJES(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 7:
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyOffsetEtaJES(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyOffsetEtaJESGSC(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyJetAreaOffsetEtaJESGSC(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11])
, (double) G__double(libp->para[12]), (double) G__double(libp->para[13])
, (double) G__double(libp->para[14]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyJetAreaOffset(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyJetAreaOffsetOrigin(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyJetAreaOffsetEtaJES(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyJetAreaOffsetOriginEtaJES(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyOffset(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 8:
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyOffset(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 7:
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyOffset(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 11:
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyBadChnOffsetEtaJES(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 10:
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyBadChnOffsetEtaJES(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 9:
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((JetCalibrationTool*) G__getstructoffset())->ApplyBadChnOffsetEtaJES(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]));
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((JetCalibrationTool*) G__getstructoffset())->AbsoluteJES_Description();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((JetCalibrationTool*) G__getstructoffset())->OffsetCorr_Description();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((JetCalibrationTool*) G__getstructoffset())->ResidualOffsetCorr_Description();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JetCalibrationTool*) G__getstructoffset())->SetInterpolation(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((JetCalibrationTool*) G__getstructoffset())->GetInsituCorr((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ApplyJetCalibration_Dict_616_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((JetCalibrationTool*) G__getstructoffset())->UseGeV((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((JetCalibrationTool*) G__getstructoffset())->UseGeV();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ApplyJetCalibration_Dict_616_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   JetCalibrationTool* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new JetCalibrationTool(*(JetCalibrationTool*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JetCalibrationTool G__TJetCalibrationTool;
static int G__ApplyJetCalibration_Dict_616_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JetCalibrationTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JetCalibrationTool*) (soff+(sizeof(JetCalibrationTool)*i)))->~G__TJetCalibrationTool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JetCalibrationTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JetCalibrationTool*) (soff))->~G__TJetCalibrationTool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ApplyJetCalibration_Dict_616_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JetCalibrationTool* dest = (JetCalibrationTool*) G__getstructoffset();
   *dest = *(JetCalibrationTool*) libp->para[0].ref;
   const JetCalibrationTool& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GSCTool */

/* NPVBeamspotCorrectionTool */

/* JetCalibrationTool */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncApplyJetCalibration_Dict {
 public:
  G__Sizep2memfuncApplyJetCalibration_Dict(): p(&G__Sizep2memfuncApplyJetCalibration_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncApplyJetCalibration_Dict::*p)();
};

size_t G__get_sizep2memfuncApplyJetCalibration_Dict()
{
  G__Sizep2memfuncApplyJetCalibration_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceApplyJetCalibration_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool))) {
     GSCTool *G__Lderived;
     G__Lderived=(GSCTool*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool),G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool),G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool))) {
     NPVBeamspotCorrectionTool *G__Lderived;
     G__Lderived=(NPVBeamspotCorrectionTool*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool),G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool),G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool))) {
     JetCalibrationTool *G__Lderived;
     G__Lderived=(JetCalibrationTool*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool),G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool),G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableApplyJetCalibration_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2D*>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VecTH2D",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VecD",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("StrV",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uint",104,-1,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VecD",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("StrV",117,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uint",104,-1,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GSCTool */
static void G__setup_memvarGSCTool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool));
   { GSCTool *p; p=(GSCTool*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString),-1,-1,4,"_basePath=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),G__defined_typename("VecTH2D"),-1,4,"_respFactorsEM3=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),G__defined_typename("VecTH2D"),-1,4,"_respFactorsnTrk=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),G__defined_typename("VecTH2D"),-1,4,"_respFactorstrackWIDTH=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),G__defined_typename("VecTH2D"),-1,4,"_respFactorsTile0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_binSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("uint"),-1,4,"_trackWIDTHMaxEtaBin=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("uint"),-1,4,"_nTrkMaxEtaBin=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("uint"),-1,4,"_Tile0MaxEtaBin=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("uint"),-1,4,"_EM3MaxEtaBin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_etaGapMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_etaGapMax=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* NPVBeamspotCorrectionTool */
static void G__setup_memvarNPVBeamspotCorrectionTool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool));
   { NPVBeamspotCorrectionTool *p; p=(NPVBeamspotCorrectionTool*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TGraph),-1,-1,4,"g_nvtx_nreco_bs66mm=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TGraph),-1,-1,4,"g_nvtx_nreco_bs47mm=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TGraph),-1,-1,4,"invGraph=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"NPVmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"NPVmax=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* JetCalibrationTool */
static void G__setup_memvarJetCalibrationTool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool));
   { JetCalibrationTool *p; p=(JetCalibrationTool*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationToolcLcLinterpol),-1,-2,4,"cut_corners=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationToolcLcLinterpol),-1,-2,4,"gaus=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationToolcLcLinterpol),-1,-2,4,"none=2LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationToolcLcLinterpol),-1,-1,4,"_interpol=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("uint"),-2,4,"NetaBins=90ULL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("uint"),-2,4,"Npar=7ULL",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"JES_factors[90][7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"etaCorr_factors[90][7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"JMS_factors[90][7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TAxis),-1,-1,4,"_etaBinAxis=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_minPt_JES=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_minPt_EtaCorr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_maxE_EtaCorr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString),-1,-1,4,"_jesDesc=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_mu_ref=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_NPV_ref=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TAxis),-1,-1,4,"_offsetBins=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TAxis),-1,-1,4,"_resOffsetBins=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("VecD"),-1,4,"_offsetSlopes=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("VecD"),-1,4,"_offsetIntercepts=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("VecD"),-1,4,"_resOffsetMu=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("VecD"),-1,4,"_resOffsetNPV=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString),-1,-1,4,"_offsetDesc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString),-1,-1,4,"_resOffsetDesc=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_offsetNewParameterization=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_isData=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_applyOffsetCorrection=",0,"whether or not to apply the pile-up correction");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_applyMassCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString),-1,-1,4,"_basePath=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_GeV=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TH2D),-1,-1,4,"_insituCorr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_insituEtaMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_insituPtMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_insituPtMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_useFullJetArea4vectorCorr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool),-1,-1,4,"_gsc=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_applyGSCCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString),-1,-1,4,"_GSCDepth=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool),-1,-1,4,"_npv=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_applyNPVBeamspotCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_muSF=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TRandom3),-1,-1,4,"_rand=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarApplyJetCalibration_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGSCTool(void) {
   /* GSCTool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool));
   G__memfunc_setup("GSCTool",635,G__ApplyJetCalibration_Dict_607_0_1, 105, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GSCTool",635,G__ApplyJetCalibration_Dict_607_0_2, 105, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - jetAlgo u 'TString' - 0 - GSCFactorsFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ApplyJetCalibration_Dict_607_0_3, 85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GSCTool::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ApplyJetCalibration_Dict_607_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GSCTool::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ApplyJetCalibration_Dict_607_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GSCTool::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ApplyJetCalibration_Dict_607_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GSCTool::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ApplyJetCalibration_Dict_607_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ApplyJetCalibration_Dict_607_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GSCTool::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ApplyJetCalibration_Dict_607_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GSCTool::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ApplyJetCalibration_Dict_607_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GSCTool::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ApplyJetCalibration_Dict_607_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GSCTool::DeclFileLine) ), 0);
   G__memfunc_setup("initGSC",657,G__ApplyJetCalibration_Dict_607_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - jetAlgo u 'TString' - 0 - GSCFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GettrackWIDTHResponse",2052,G__ApplyJetCalibration_Dict_607_0_16, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - pT d - - 0 - eta "
"d - - 0 - trackWIDTH", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetnTrkResponse",1550,G__ApplyJetCalibration_Dict_607_0_17, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - pT d - - 0 - eta "
"d - - 0 - nTrk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTile0Response",1581,G__ApplyJetCalibration_Dict_607_0_18, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - pT d - - 0 - eta "
"d - - 0 - Tile0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEM3Response",1332,G__ApplyJetCalibration_Dict_607_0_19, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - pT d - - 0 - eta "
"d - - 0 - EM3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGSCCorrection",1557,G__ApplyJetCalibration_Dict_607_0_20, 100, -1, -1, 0, 7, 1, 1, 0, 
"d - - 0 - pT d - - 0 - eta "
"d - - 0 - nTrk d - - 0 - trackWIDTH "
"d - - 0 - Tile0 d - - 0 - EM3 "
"u 'TString' - 0 '\"Full\"' depth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetjetPropertyMax",1774,G__ApplyJetCalibration_Dict_607_0_21, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - jetPropName h - - 0 - etabin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPtjetPropertyHisto",2287,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 4, 1, 4, 0, 
"d - - 0 - pT d - - 0 - eta "
"d - - 0 - jetProperty u 'vector<TH2D*,allocator<TH2D*> >' 'GSCTool::VecTH2D' 0 - respFactors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FileExist",909,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openInputFile",1346,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TFile), -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHisto",807,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TH2D), -1, 0, 2, 1, 4, 0, 
"U 'TFile' - 0 - file u 'TString' - 0 - hname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("error",554,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFile",769,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString), -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - fn", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GSCTool", 635, G__ApplyJetCalibration_Dict_607_0_28, (int) ('i'), G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool), -1, 0, 1, 1, 1, 0, "u 'GSCTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GSCTool", 761, G__ApplyJetCalibration_Dict_607_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ApplyJetCalibration_Dict_607_0_30, (int) ('u'), G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_GSCTool), -1, 1, 1, 1, 1, 0, "u 'GSCTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncNPVBeamspotCorrectionTool(void) {
   /* NPVBeamspotCorrectionTool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool));
   G__memfunc_setup("NPVBeamspotCorrectionTool",2533,G__ApplyJetCalibration_Dict_615_0_1, 105, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ApplyJetCalibration_Dict_615_0_2, 85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&NPVBeamspotCorrectionTool::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ApplyJetCalibration_Dict_615_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&NPVBeamspotCorrectionTool::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ApplyJetCalibration_Dict_615_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&NPVBeamspotCorrectionTool::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ApplyJetCalibration_Dict_615_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&NPVBeamspotCorrectionTool::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ApplyJetCalibration_Dict_615_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ApplyJetCalibration_Dict_615_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&NPVBeamspotCorrectionTool::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ApplyJetCalibration_Dict_615_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&NPVBeamspotCorrectionTool::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ApplyJetCalibration_Dict_615_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&NPVBeamspotCorrectionTool::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ApplyJetCalibration_Dict_615_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&NPVBeamspotCorrectionTool::DeclFileLine) ), 0);
   G__memfunc_setup("initNPVBeamspotCorrection",2555,G__ApplyJetCalibration_Dict_615_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNVertexBsCorrection",2233,G__ApplyJetCalibration_Dict_615_0_15, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - nRecoVtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("error",554,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NVtx_NReconstructible_bs66mm",2799,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TGraph), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NVtx_NReconstructible_bs47mm",2798,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TGraph), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("NPVBeamspotCorrectionTool", 2533, G__ApplyJetCalibration_Dict_615_0_19, (int) ('i'), 
G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool), -1, 0, 1, 1, 1, 0, "u 'NPVBeamspotCorrectionTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~NPVBeamspotCorrectionTool", 2659, G__ApplyJetCalibration_Dict_615_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ApplyJetCalibration_Dict_615_0_21, (int) ('u'), G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool), -1, 1, 1, 1, 1, 0, "u 'NPVBeamspotCorrectionTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJetCalibrationTool(void) {
   /* JetCalibrationTool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool));
   G__memfunc_setup("JetCalibrationTool",1833,G__ApplyJetCalibration_Dict_616_0_1, 105, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - jetAlgo u 'TString' - 0 '\"CalibrationConfigs/InsituJES_2011_Preliminary.config\"' JESsettingFile "
"g - - 0 'true' isData u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JetCalibrationTool",1833,G__ApplyJetCalibration_Dict_616_0_2, 105, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool), -1, 0, 0, 1, 1, 0, "", "for persistification, can be used also with subsequent call to init()", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ApplyJetCalibration_Dict_616_0_3, 85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&JetCalibrationTool::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ApplyJetCalibration_Dict_616_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JetCalibrationTool::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ApplyJetCalibration_Dict_616_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&JetCalibrationTool::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ApplyJetCalibration_Dict_616_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&JetCalibrationTool::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ApplyJetCalibration_Dict_616_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ApplyJetCalibration_Dict_616_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JetCalibrationTool::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ApplyJetCalibration_Dict_616_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JetCalibrationTool::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ApplyJetCalibration_Dict_616_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JetCalibrationTool::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ApplyJetCalibration_Dict_616_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JetCalibrationTool::DeclFileLine) ), 0);
   G__memfunc_setup("error",554,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFile",769,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString), -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__ApplyJetCalibration_Dict_616_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - jetAlgo u 'TString' - 0 - JESfile "
"g - - 0 - isData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffset",903,G__ApplyJetCalibration_Dict_616_0_18, 100, -1, -1, 0, 5, 1, 1, 0, 
"d - - 0 - eta_det d - - 0 - mu "
"d - - 0 - NPV d - - 0 '-99' mu_ref "
"d - - 0 '-99' NPV_ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResidualOffset",1728,G__ApplyJetCalibration_Dict_616_0_19, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - eta_det d - - 0 - mu "
"d - - 0 - NPV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffsetSF",1056,G__ApplyJetCalibration_Dict_616_0_20, 100, -1, -1, 0, 6, 1, 1, 0, 
"d - - 0 - pT_det d - - 0 - eta_det "
"d - - 0 - mu d - - 0 - NPV "
"d - - 0 '-99' mu_ref d - - 0 '-99' NPV_ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResidualOffsetSF",1881,G__ApplyJetCalibration_Dict_616_0_21, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - pT_det d - - 0 - eta_det "
"d - - 0 - mu d - - 0 - NPV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffsetScaleFactor",1998,G__ApplyJetCalibration_Dict_616_0_22, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - pT_det d - - 0 - offsetET", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJES",514,G__ApplyJetCalibration_Dict_616_0_23, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - E_uncorr d - - 0 - eta_det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaCorr",976,G__ApplyJetCalibration_Dict_616_0_24, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - Ecorr d - - 0 - eta_det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMassCorr",1098,G__ApplyJetCalibration_Dict_616_0_25, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - Ecorr d - - 0 - eta_det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPVBeamspotCorrection",2407,G__ApplyJetCalibration_Dict_616_0_26, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - NPV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPVcorrApprox",1604,G__ApplyJetCalibration_Dict_616_0_27, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - NPV i - - 0 '-99' eventNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPVcorrApprox2",1654,G__ApplyJetCalibration_Dict_616_0_28, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - NPV i - - 0 '-99' eventNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JetAreaJES",894,G__ApplyJetCalibration_Dict_616_0_29, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MuScaleFactor",1289,G__ApplyJetCalibration_Dict_616_0_30, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MuForPlotting",1338,G__ApplyJetCalibration_Dict_616_0_31, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - mu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGSC",509,G__ApplyJetCalibration_Dict_616_0_32, 100, -1, -1, 0, 6, 1, 1, 0, 
"d - - 0 - pT_corr d - - 0 - eta_det "
"d - - 0 - nTrk d - - 0 - trackWIDTH "
"d - - 0 - Tile0 d - - 0 - EM3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyJES",744,G__ApplyJetCalibration_Dict_616_0_33, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 5, 1, 1, 0, 
"d - - 0 - E_uncorr d - - 0 - eta_det "
"d - - 0 - eta d - - 0 - phi "
"d - - 0 - mass_uncorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyEtaJES",1026,G__ApplyJetCalibration_Dict_616_0_34, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 5, 1, 1, 0, 
"d - - 0 - E_uncorr d - - 0 - eta_det "
"d - - 0 - eta d - - 0 - phi "
"d - - 0 - mass_uncorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyEtaMassJES",1430,G__ApplyJetCalibration_Dict_616_0_35, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 5, 1, 1, 0, 
"d - - 0 - E_uncorr d - - 0 - eta_det "
"d - - 0 - eta d - - 0 - phi "
"d - - 0 - mass_uncorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyOffsetEtaJES",1641,G__ApplyJetCalibration_Dict_616_0_36, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 9, 1, 1, 0, 
"d - - 0 - E_uncorr d - - 0 - eta_det "
"d - - 0 - eta d - - 0 - phi "
"d - - 0 - mass_uncorr d - - 0 - mu "
"d - - 0 - NPV d - - 0 '-99' MUref "
"d - - 0 '-99' NPVref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyOffsetEtaJESGSC",1862,G__ApplyJetCalibration_Dict_616_0_37, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 11, 1, 1, 0, 
"d - - 0 - E_uncorr d - - 0 - eta_det "
"d - - 0 - eta d - - 0 - phi "
"d - - 0 - mass_uncorr d - - 0 - trackWIDTH "
"d - - 0 - nTrk d - - 0 - Tile0 "
"d - - 0 - EM3 d - - 0 - mu "
"d - - 0 - NPV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyJetAreaOffsetEtaJESGSC",2530,G__ApplyJetCalibration_Dict_616_0_38, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 15, 1, 1, 0, 
"d - - 0 - E_uncorr d - - 0 - eta_det "
"d - - 0 - phi d - - 0 - mass_uncorr "
"d - - 0 - Ax d - - 0 - Ay "
"d - - 0 - Az d - - 0 - Ae "
"d - - 0 - rho d - - 0 - trackWIDTH "
"d - - 0 - nTrk d - - 0 - Tile0 "
"d - - 0 - EM3 d - - 0 - mu "
"d - - 0 - NPV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyJetAreaOffset",1801,G__ApplyJetCalibration_Dict_616_0_39, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 11, 1, 1, 0, 
"d - - 0 - E_det d - - 0 - eta_det "
"d - - 0 - phi_det d - - 0 - m_det "
"d - - 0 - Ax d - - 0 - Ay "
"d - - 0 - Az d - - 0 - Ae "
"d - - 0 - rho d - - 0 - mu "
"d - - 0 - NPV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyJetAreaOffsetOrigin",2417,G__ApplyJetCalibration_Dict_616_0_40, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 12, 1, 1, 0, 
"d - - 0 - E_det d - - 0 - eta_det "
"d - - 0 - eta_origin d - - 0 - phi_origin "
"d - - 0 - m_origin d - - 0 - Ax "
"d - - 0 - Ay d - - 0 - Az "
"d - - 0 - Ae d - - 0 - rho "
"d - - 0 - mu d - - 0 - NPV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyJetAreaOffsetEtaJES",2309,G__ApplyJetCalibration_Dict_616_0_41, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 11, 1, 1, 0, 
"d - - 0 - E_det d - - 0 - eta_det "
"d - - 0 - phi_det d - - 0 - m_det "
"d - - 0 - Ax d - - 0 - Ay "
"d - - 0 - Az d - - 0 - Ae "
"d - - 0 - rho d - - 0 - mu "
"d - - 0 - NPV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyJetAreaOffsetOriginEtaJES",2925,G__ApplyJetCalibration_Dict_616_0_42, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 12, 1, 1, 0, 
"d - - 0 - E_det d - - 0 - eta_det "
"d - - 0 - eta_origin d - - 0 - phi_origin "
"d - - 0 - m_origin d - - 0 - Ax "
"d - - 0 - Ay d - - 0 - Az "
"d - - 0 - Ae d - - 0 - rho "
"d - - 0 - mu d - - 0 - NPV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyOffset",1133,G__ApplyJetCalibration_Dict_616_0_43, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 9, 1, 1, 0, 
"d - - 0 - E_uncorr d - - 0 - eta_det "
"d - - 0 - eta d - - 0 - phi "
"d - - 0 - mass_uncorr d - - 0 - mu "
"d - - 0 - NPV d - - 0 '-99' MUref "
"d - - 0 '-99' NPVref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyBadChnOffsetEtaJES",2185,G__ApplyJetCalibration_Dict_616_0_44, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TLorentzVector), -1, 0, 11, 1, 1, 0, 
"d - - 0 - E_uncorr d - - 0 - eta_det "
"d - - 0 - eta d - - 0 - phi "
"d - - 0 - mass_uncorr d - - 0 - bch_corr_cell "
"d - - 0 - bch_corr_jet d - - 0 - mu "
"d - - 0 - NPV d - - 0 '-99' MUref "
"d - - 0 '-99' NPVref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AbsoluteJES_Description",2308,G__ApplyJetCalibration_Dict_616_0_45, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OffsetCorr_Description",2272,G__ApplyJetCalibration_Dict_616_0_46, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResidualOffsetCorr_Description",3097,G__ApplyJetCalibration_Dict_616_0_47, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInterpolation",1684,G__ApplyJetCalibration_Dict_616_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - interpolStr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInsituCorr",1330,G__ApplyJetCalibration_Dict_616_0_49, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - pt d - - 0 - eta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseGeV",559,G__ApplyJetCalibration_Dict_616_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' useGeV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLogPolN",955,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 2, 1, 4, 0, 
"D - - 10 - factors d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffsetPt",1099,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 6, 1, 4, 0, 
"d - - 0 - aeta d - - 0 - mu "
"d - - 0 - NPV u 'vector<double,allocator<double> >' 'JetCalibrationTool::VecD' 0 - OffsetMu "
"u 'vector<double,allocator<double> >' 'JetCalibrationTool::VecD' 0 - OffsetNPV U 'TAxis' - 0 - OffsetBins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaBin",851,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "d - - 0 - eta_det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHisto",807,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TH1), -1, 0, 2, 1, 4, 0, 
"U 'TFile' - 0 - file u 'TString' - 0 - hname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CombineCalibration",1829,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_TH2D), -1, 0, 2, 1, 4, 0, 
"U 'TH2D' - 0 - h2d U 'TH1D' - 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffsetEtaBin",1466,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "d - - 0 - eta_det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vectorize",955,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("JetCalibrationTool::StrV"), 0, 2, 1, 4, 0, 
"u 'TString' - 0 - txt u 'TString' - 0 '\" \"' sep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VectorizeD",1023,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("JetCalibrationTool::VecD"), 0, 2, 1, 4, 0, 
"u 'TString' - 0 - txt u 'TString' - 0 '\" \"' sep", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("JetCalibrationTool", 1833, G__ApplyJetCalibration_Dict_616_0_59, (int) ('i'), G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool), -1, 0, 1, 1, 1, 0, "u 'JetCalibrationTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~JetCalibrationTool", 1959, G__ApplyJetCalibration_Dict_616_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ApplyJetCalibration_Dict_616_0_61, (int) ('u'), G__get_linked_tagnum(&G__ApplyJetCalibration_DictLN_JetCalibrationTool), -1, 1, 1, 1, 1, 0, "u 'JetCalibrationTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncApplyJetCalibration_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalApplyJetCalibration_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcApplyJetCalibration_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ApplyJetCalibration_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TAxis = { "TAxis" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TRandom3 = { "TRandom3" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_GSCTool = { "GSCTool" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR = { "vector<TH2D*,allocator<TH2D*> >" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2D*,allocator<TH2D*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool = { "NPVBeamspotCorrectionTool" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_JetCalibrationTool = { "JetCalibrationTool" , 99 , -1 };
G__linked_taginfo G__ApplyJetCalibration_DictLN_JetCalibrationToolcLcLinterpol = { "JetCalibrationTool::interpol" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableApplyJetCalibration_Dict() {
  G__ApplyJetCalibration_DictLN_TClass.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TBuffer.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMemberInspector.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TObject.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TNamed.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TString.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TFile.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TLorentzVector.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TAxis.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TH1D.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TH1.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TH2D.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TRandom3.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_GSCTool.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_TGraph.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_JetCalibrationTool.tagnum = -1 ;
  G__ApplyJetCalibration_DictLN_JetCalibrationToolcLcLinterpol.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableApplyJetCalibration_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TString);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TFile);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TLorentzVector);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TAxis);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TH1);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TH2D);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TRandom3);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_GSCTool),sizeof(GSCTool),-1,324864,(char*)NULL,G__setup_memvarGSCTool,G__setup_memfuncGSCTool);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_TGraph);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_NPVBeamspotCorrectionTool),sizeof(NPVBeamspotCorrectionTool),-1,324864,(char*)NULL,G__setup_memvarNPVBeamspotCorrectionTool,G__setup_memfuncNPVBeamspotCorrectionTool);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_JetCalibrationTool),sizeof(JetCalibrationTool),-1,324864,(char*)NULL,G__setup_memvarJetCalibrationTool,G__setup_memfuncJetCalibrationTool);
   G__get_linked_tagnum_fwd(&G__ApplyJetCalibration_DictLN_JetCalibrationToolcLcLinterpol);
}
extern "C" void G__cpp_setupApplyJetCalibration_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupApplyJetCalibration_Dict()");
  G__set_cpp_environmentApplyJetCalibration_Dict();
  G__cpp_setup_tagtableApplyJetCalibration_Dict();

  G__cpp_setup_inheritanceApplyJetCalibration_Dict();

  G__cpp_setup_typetableApplyJetCalibration_Dict();

  G__cpp_setup_memvarApplyJetCalibration_Dict();

  G__cpp_setup_memfuncApplyJetCalibration_Dict();
  G__cpp_setup_globalApplyJetCalibration_Dict();
  G__cpp_setup_funcApplyJetCalibration_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncApplyJetCalibration_Dict();
  return;
}
class G__cpp_setup_initApplyJetCalibration_Dict {
  public:
    G__cpp_setup_initApplyJetCalibration_Dict() { G__add_setup_func("ApplyJetCalibration_Dict",(G__incsetup)(&G__cpp_setupApplyJetCalibration_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initApplyJetCalibration_Dict() { G__remove_setup_func("ApplyJetCalibration_Dict"); }
};
G__cpp_setup_initApplyJetCalibration_Dict G__cpp_setup_initializerApplyJetCalibration_Dict;

